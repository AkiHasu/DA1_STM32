
DHT22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b494  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a3c  0800b628  0800b628  0000c628  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c064  0800c064  0000e1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800c064  0800c064  0000d064  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c06c  0800c06c  0000e1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c06c  0800c06c  0000d06c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c070  0800c070  0000d070  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800c074  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000e1f0  2**0
                  CONTENTS
 10 .bss          00000444  200001f0  200001f0  0000e1f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000634  20000634  0000e1f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000e1f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012150  00000000  00000000  0000e220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002b80  00000000  00000000  00020370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001220  00000000  00000000  00022ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000e40  00000000  00000000  00024110  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000241f0  00000000  00000000  00024f50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001513a  00000000  00000000  00049140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2b9f  00000000  00000000  0005e27a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00130e19  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005e5c  00000000  00000000  00130e5c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000003a  00000000  00000000  00136cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800b60c 	.word	0x0800b60c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800b60c 	.word	0x0800b60c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bfc:	f000 b988 	b.w	8000f10 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	468e      	mov	lr, r1
 8000c20:	4604      	mov	r4, r0
 8000c22:	4688      	mov	r8, r1
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d14a      	bne.n	8000cbe <__udivmoddi4+0xa6>
 8000c28:	428a      	cmp	r2, r1
 8000c2a:	4617      	mov	r7, r2
 8000c2c:	d962      	bls.n	8000cf4 <__udivmoddi4+0xdc>
 8000c2e:	fab2 f682 	clz	r6, r2
 8000c32:	b14e      	cbz	r6, 8000c48 <__udivmoddi4+0x30>
 8000c34:	f1c6 0320 	rsb	r3, r6, #32
 8000c38:	fa01 f806 	lsl.w	r8, r1, r6
 8000c3c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c40:	40b7      	lsls	r7, r6
 8000c42:	ea43 0808 	orr.w	r8, r3, r8
 8000c46:	40b4      	lsls	r4, r6
 8000c48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c4c:	fa1f fc87 	uxth.w	ip, r7
 8000c50:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c54:	0c23      	lsrs	r3, r4, #16
 8000c56:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c5a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c5e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c62:	429a      	cmp	r2, r3
 8000c64:	d909      	bls.n	8000c7a <__udivmoddi4+0x62>
 8000c66:	18fb      	adds	r3, r7, r3
 8000c68:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c6c:	f080 80ea 	bcs.w	8000e44 <__udivmoddi4+0x22c>
 8000c70:	429a      	cmp	r2, r3
 8000c72:	f240 80e7 	bls.w	8000e44 <__udivmoddi4+0x22c>
 8000c76:	3902      	subs	r1, #2
 8000c78:	443b      	add	r3, r7
 8000c7a:	1a9a      	subs	r2, r3, r2
 8000c7c:	b2a3      	uxth	r3, r4
 8000c7e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c82:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c86:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c8a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c8e:	459c      	cmp	ip, r3
 8000c90:	d909      	bls.n	8000ca6 <__udivmoddi4+0x8e>
 8000c92:	18fb      	adds	r3, r7, r3
 8000c94:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c98:	f080 80d6 	bcs.w	8000e48 <__udivmoddi4+0x230>
 8000c9c:	459c      	cmp	ip, r3
 8000c9e:	f240 80d3 	bls.w	8000e48 <__udivmoddi4+0x230>
 8000ca2:	443b      	add	r3, r7
 8000ca4:	3802      	subs	r0, #2
 8000ca6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000caa:	eba3 030c 	sub.w	r3, r3, ip
 8000cae:	2100      	movs	r1, #0
 8000cb0:	b11d      	cbz	r5, 8000cba <__udivmoddi4+0xa2>
 8000cb2:	40f3      	lsrs	r3, r6
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	e9c5 3200 	strd	r3, r2, [r5]
 8000cba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cbe:	428b      	cmp	r3, r1
 8000cc0:	d905      	bls.n	8000cce <__udivmoddi4+0xb6>
 8000cc2:	b10d      	cbz	r5, 8000cc8 <__udivmoddi4+0xb0>
 8000cc4:	e9c5 0100 	strd	r0, r1, [r5]
 8000cc8:	2100      	movs	r1, #0
 8000cca:	4608      	mov	r0, r1
 8000ccc:	e7f5      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cce:	fab3 f183 	clz	r1, r3
 8000cd2:	2900      	cmp	r1, #0
 8000cd4:	d146      	bne.n	8000d64 <__udivmoddi4+0x14c>
 8000cd6:	4573      	cmp	r3, lr
 8000cd8:	d302      	bcc.n	8000ce0 <__udivmoddi4+0xc8>
 8000cda:	4282      	cmp	r2, r0
 8000cdc:	f200 8105 	bhi.w	8000eea <__udivmoddi4+0x2d2>
 8000ce0:	1a84      	subs	r4, r0, r2
 8000ce2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000ce6:	2001      	movs	r0, #1
 8000ce8:	4690      	mov	r8, r2
 8000cea:	2d00      	cmp	r5, #0
 8000cec:	d0e5      	beq.n	8000cba <__udivmoddi4+0xa2>
 8000cee:	e9c5 4800 	strd	r4, r8, [r5]
 8000cf2:	e7e2      	b.n	8000cba <__udivmoddi4+0xa2>
 8000cf4:	2a00      	cmp	r2, #0
 8000cf6:	f000 8090 	beq.w	8000e1a <__udivmoddi4+0x202>
 8000cfa:	fab2 f682 	clz	r6, r2
 8000cfe:	2e00      	cmp	r6, #0
 8000d00:	f040 80a4 	bne.w	8000e4c <__udivmoddi4+0x234>
 8000d04:	1a8a      	subs	r2, r1, r2
 8000d06:	0c03      	lsrs	r3, r0, #16
 8000d08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d0c:	b280      	uxth	r0, r0
 8000d0e:	b2bc      	uxth	r4, r7
 8000d10:	2101      	movs	r1, #1
 8000d12:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d16:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d1a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d1e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d907      	bls.n	8000d36 <__udivmoddi4+0x11e>
 8000d26:	18fb      	adds	r3, r7, r3
 8000d28:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x11c>
 8000d2e:	429a      	cmp	r2, r3
 8000d30:	f200 80e0 	bhi.w	8000ef4 <__udivmoddi4+0x2dc>
 8000d34:	46c4      	mov	ip, r8
 8000d36:	1a9b      	subs	r3, r3, r2
 8000d38:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d3c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d40:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d44:	fb02 f404 	mul.w	r4, r2, r4
 8000d48:	429c      	cmp	r4, r3
 8000d4a:	d907      	bls.n	8000d5c <__udivmoddi4+0x144>
 8000d4c:	18fb      	adds	r3, r7, r3
 8000d4e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d52:	d202      	bcs.n	8000d5a <__udivmoddi4+0x142>
 8000d54:	429c      	cmp	r4, r3
 8000d56:	f200 80ca 	bhi.w	8000eee <__udivmoddi4+0x2d6>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	1b1b      	subs	r3, r3, r4
 8000d5e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d62:	e7a5      	b.n	8000cb0 <__udivmoddi4+0x98>
 8000d64:	f1c1 0620 	rsb	r6, r1, #32
 8000d68:	408b      	lsls	r3, r1
 8000d6a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d6e:	431f      	orrs	r7, r3
 8000d70:	fa0e f401 	lsl.w	r4, lr, r1
 8000d74:	fa20 f306 	lsr.w	r3, r0, r6
 8000d78:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d7c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d80:	4323      	orrs	r3, r4
 8000d82:	fa00 f801 	lsl.w	r8, r0, r1
 8000d86:	fa1f fc87 	uxth.w	ip, r7
 8000d8a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d8e:	0c1c      	lsrs	r4, r3, #16
 8000d90:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d94:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d98:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d9c:	45a6      	cmp	lr, r4
 8000d9e:	fa02 f201 	lsl.w	r2, r2, r1
 8000da2:	d909      	bls.n	8000db8 <__udivmoddi4+0x1a0>
 8000da4:	193c      	adds	r4, r7, r4
 8000da6:	f100 3aff 	add.w	sl, r0, #4294967295
 8000daa:	f080 809c 	bcs.w	8000ee6 <__udivmoddi4+0x2ce>
 8000dae:	45a6      	cmp	lr, r4
 8000db0:	f240 8099 	bls.w	8000ee6 <__udivmoddi4+0x2ce>
 8000db4:	3802      	subs	r0, #2
 8000db6:	443c      	add	r4, r7
 8000db8:	eba4 040e 	sub.w	r4, r4, lr
 8000dbc:	fa1f fe83 	uxth.w	lr, r3
 8000dc0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000dc4:	fb09 4413 	mls	r4, r9, r3, r4
 8000dc8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dcc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000dd0:	45a4      	cmp	ip, r4
 8000dd2:	d908      	bls.n	8000de6 <__udivmoddi4+0x1ce>
 8000dd4:	193c      	adds	r4, r7, r4
 8000dd6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dda:	f080 8082 	bcs.w	8000ee2 <__udivmoddi4+0x2ca>
 8000dde:	45a4      	cmp	ip, r4
 8000de0:	d97f      	bls.n	8000ee2 <__udivmoddi4+0x2ca>
 8000de2:	3b02      	subs	r3, #2
 8000de4:	443c      	add	r4, r7
 8000de6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dea:	eba4 040c 	sub.w	r4, r4, ip
 8000dee:	fba0 ec02 	umull	lr, ip, r0, r2
 8000df2:	4564      	cmp	r4, ip
 8000df4:	4673      	mov	r3, lr
 8000df6:	46e1      	mov	r9, ip
 8000df8:	d362      	bcc.n	8000ec0 <__udivmoddi4+0x2a8>
 8000dfa:	d05f      	beq.n	8000ebc <__udivmoddi4+0x2a4>
 8000dfc:	b15d      	cbz	r5, 8000e16 <__udivmoddi4+0x1fe>
 8000dfe:	ebb8 0203 	subs.w	r2, r8, r3
 8000e02:	eb64 0409 	sbc.w	r4, r4, r9
 8000e06:	fa04 f606 	lsl.w	r6, r4, r6
 8000e0a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e0e:	431e      	orrs	r6, r3
 8000e10:	40cc      	lsrs	r4, r1
 8000e12:	e9c5 6400 	strd	r6, r4, [r5]
 8000e16:	2100      	movs	r1, #0
 8000e18:	e74f      	b.n	8000cba <__udivmoddi4+0xa2>
 8000e1a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e1e:	0c01      	lsrs	r1, r0, #16
 8000e20:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e24:	b280      	uxth	r0, r0
 8000e26:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e2a:	463b      	mov	r3, r7
 8000e2c:	4638      	mov	r0, r7
 8000e2e:	463c      	mov	r4, r7
 8000e30:	46b8      	mov	r8, r7
 8000e32:	46be      	mov	lr, r7
 8000e34:	2620      	movs	r6, #32
 8000e36:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e3a:	eba2 0208 	sub.w	r2, r2, r8
 8000e3e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e42:	e766      	b.n	8000d12 <__udivmoddi4+0xfa>
 8000e44:	4601      	mov	r1, r0
 8000e46:	e718      	b.n	8000c7a <__udivmoddi4+0x62>
 8000e48:	4610      	mov	r0, r2
 8000e4a:	e72c      	b.n	8000ca6 <__udivmoddi4+0x8e>
 8000e4c:	f1c6 0220 	rsb	r2, r6, #32
 8000e50:	fa2e f302 	lsr.w	r3, lr, r2
 8000e54:	40b7      	lsls	r7, r6
 8000e56:	40b1      	lsls	r1, r6
 8000e58:	fa20 f202 	lsr.w	r2, r0, r2
 8000e5c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e60:	430a      	orrs	r2, r1
 8000e62:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e66:	b2bc      	uxth	r4, r7
 8000e68:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e6c:	0c11      	lsrs	r1, r2, #16
 8000e6e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e72:	fb08 f904 	mul.w	r9, r8, r4
 8000e76:	40b0      	lsls	r0, r6
 8000e78:	4589      	cmp	r9, r1
 8000e7a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e7e:	b280      	uxth	r0, r0
 8000e80:	d93e      	bls.n	8000f00 <__udivmoddi4+0x2e8>
 8000e82:	1879      	adds	r1, r7, r1
 8000e84:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e88:	d201      	bcs.n	8000e8e <__udivmoddi4+0x276>
 8000e8a:	4589      	cmp	r9, r1
 8000e8c:	d81f      	bhi.n	8000ece <__udivmoddi4+0x2b6>
 8000e8e:	eba1 0109 	sub.w	r1, r1, r9
 8000e92:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e96:	fb09 f804 	mul.w	r8, r9, r4
 8000e9a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e9e:	b292      	uxth	r2, r2
 8000ea0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000ea4:	4542      	cmp	r2, r8
 8000ea6:	d229      	bcs.n	8000efc <__udivmoddi4+0x2e4>
 8000ea8:	18ba      	adds	r2, r7, r2
 8000eaa:	f109 31ff 	add.w	r1, r9, #4294967295
 8000eae:	d2c4      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb0:	4542      	cmp	r2, r8
 8000eb2:	d2c2      	bcs.n	8000e3a <__udivmoddi4+0x222>
 8000eb4:	f1a9 0102 	sub.w	r1, r9, #2
 8000eb8:	443a      	add	r2, r7
 8000eba:	e7be      	b.n	8000e3a <__udivmoddi4+0x222>
 8000ebc:	45f0      	cmp	r8, lr
 8000ebe:	d29d      	bcs.n	8000dfc <__udivmoddi4+0x1e4>
 8000ec0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ec4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ec8:	3801      	subs	r0, #1
 8000eca:	46e1      	mov	r9, ip
 8000ecc:	e796      	b.n	8000dfc <__udivmoddi4+0x1e4>
 8000ece:	eba7 0909 	sub.w	r9, r7, r9
 8000ed2:	4449      	add	r1, r9
 8000ed4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ed8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000edc:	fb09 f804 	mul.w	r8, r9, r4
 8000ee0:	e7db      	b.n	8000e9a <__udivmoddi4+0x282>
 8000ee2:	4673      	mov	r3, lr
 8000ee4:	e77f      	b.n	8000de6 <__udivmoddi4+0x1ce>
 8000ee6:	4650      	mov	r0, sl
 8000ee8:	e766      	b.n	8000db8 <__udivmoddi4+0x1a0>
 8000eea:	4608      	mov	r0, r1
 8000eec:	e6fd      	b.n	8000cea <__udivmoddi4+0xd2>
 8000eee:	443b      	add	r3, r7
 8000ef0:	3a02      	subs	r2, #2
 8000ef2:	e733      	b.n	8000d5c <__udivmoddi4+0x144>
 8000ef4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ef8:	443b      	add	r3, r7
 8000efa:	e71c      	b.n	8000d36 <__udivmoddi4+0x11e>
 8000efc:	4649      	mov	r1, r9
 8000efe:	e79c      	b.n	8000e3a <__udivmoddi4+0x222>
 8000f00:	eba1 0109 	sub.w	r1, r1, r9
 8000f04:	46c4      	mov	ip, r8
 8000f06:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f0a:	fb09 f804 	mul.w	r8, r9, r4
 8000f0e:	e7c4      	b.n	8000e9a <__udivmoddi4+0x282>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <BH1750_send_command>:

	return HAL_OK;
}

HAL_StatusTypeDef BH1750_send_command(BH1750_device_t* dev, uint8_t cmd)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af02      	add	r7, sp, #8
 8000f1a:	6078      	str	r0, [r7, #4]
 8000f1c:	460b      	mov	r3, r1
 8000f1e:	70fb      	strb	r3, [r7, #3]
	//TODO hal checks
	if(HAL_I2C_Master_Transmit(
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	6858      	ldr	r0, [r3, #4]
			dev->i2c_handle,	//I2C Handle
			dev->address_w,		//I2C addr of dev
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	7a5b      	ldrb	r3, [r3, #9]
	if(HAL_I2C_Master_Transmit(
 8000f28:	4619      	mov	r1, r3
 8000f2a:	1cfa      	adds	r2, r7, #3
 8000f2c:	230a      	movs	r3, #10
 8000f2e:	9300      	str	r3, [sp, #0]
 8000f30:	2301      	movs	r3, #1
 8000f32:	f003 fd71 	bl	8004a18 <HAL_I2C_Master_Transmit>
 8000f36:	4603      	mov	r3, r0
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d001      	beq.n	8000f40 <BH1750_send_command+0x2c>
			&cmd,				//CMD to be executed
			1,					//8bit addr
			10					//Wait time
		) != HAL_OK) return HAL_ERROR;
 8000f3c:	2301      	movs	r3, #1
 8000f3e:	e000      	b.n	8000f42 <BH1750_send_command+0x2e>

	return HAL_OK;
 8000f40:	2300      	movs	r3, #0
}
 8000f42:	4618      	mov	r0, r3
 8000f44:	3708      	adds	r7, #8
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <BH1750_poll_self>:

void BH1750_poll_self(BH1750_device_t* self)
{
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b082      	sub	sp, #8
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
	BH1750_get_lumen(self);
 8000f52:	6878      	ldr	r0, [r7, #4]
 8000f54:	f000 f87a 	bl	800104c <BH1750_get_lumen>
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}

08000f60 <BH1750_init_dev_struct>:

BH1750_device_t* BH1750_init_dev_struct(I2C_HandleTypeDef* i2c_handle,
		char* name, bool addr_grounded)
{
 8000f60:	b580      	push	{r7, lr}
 8000f62:	b086      	sub	sp, #24
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	60f8      	str	r0, [r7, #12]
 8000f68:	60b9      	str	r1, [r7, #8]
 8000f6a:	4613      	mov	r3, r2
 8000f6c:	71fb      	strb	r3, [r7, #7]
	BH1750_device_t* init =
			(BH1750_device_t*)calloc(1, sizeof(BH1750_device_t));
 8000f6e:	2114      	movs	r1, #20
 8000f70:	2001      	movs	r0, #1
 8000f72:	f007 fcdf 	bl	8008934 <calloc>
 8000f76:	4603      	mov	r3, r0
 8000f78:	617b      	str	r3, [r7, #20]

	if(init == NULL) return NULL;
 8000f7a:	697b      	ldr	r3, [r7, #20]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d101      	bne.n	8000f84 <BH1750_init_dev_struct+0x24>
 8000f80:	2300      	movs	r3, #0
 8000f82:	e02d      	b.n	8000fe0 <BH1750_init_dev_struct+0x80>

	if(addr_grounded){
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d006      	beq.n	8000f98 <BH1750_init_dev_struct+0x38>
		init->address_r = BH1750_GROUND_ADDR_READ;
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	2247      	movs	r2, #71	@ 0x47
 8000f8e:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_GROUND_ADDR_WRITE;
 8000f90:	697b      	ldr	r3, [r7, #20]
 8000f92:	2246      	movs	r2, #70	@ 0x46
 8000f94:	725a      	strb	r2, [r3, #9]
 8000f96:	e005      	b.n	8000fa4 <BH1750_init_dev_struct+0x44>
	}else{
		init->address_r = BH1750_NO_GROUND_ADDR_READ;
 8000f98:	697b      	ldr	r3, [r7, #20]
 8000f9a:	22ba      	movs	r2, #186	@ 0xba
 8000f9c:	721a      	strb	r2, [r3, #8]
		init->address_w = BH1750_NO_GROUND_ADDR_WRITE;
 8000f9e:	697b      	ldr	r3, [r7, #20]
 8000fa0:	22b9      	movs	r2, #185	@ 0xb9
 8000fa2:	725a      	strb	r2, [r3, #9]
	}

	init->name = (char*)malloc(sizeof(char) * strlen(name));
 8000fa4:	68b8      	ldr	r0, [r7, #8]
 8000fa6:	f7ff f963 	bl	8000270 <strlen>
 8000faa:	4603      	mov	r3, r0
 8000fac:	4618      	mov	r0, r3
 8000fae:	f007 fcdd 	bl	800896c <malloc>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	461a      	mov	r2, r3
 8000fb6:	697b      	ldr	r3, [r7, #20]
 8000fb8:	601a      	str	r2, [r3, #0]

	if(init->name == NULL) return NULL;
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	2b00      	cmp	r3, #0
 8000fc0:	d101      	bne.n	8000fc6 <BH1750_init_dev_struct+0x66>
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	e00c      	b.n	8000fe0 <BH1750_init_dev_struct+0x80>

	init->i2c_handle = i2c_handle;
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	68fa      	ldr	r2, [r7, #12]
 8000fca:	605a      	str	r2, [r3, #4]

	strcpy(init->name, name);
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	68b9      	ldr	r1, [r7, #8]
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	f008 fb9d 	bl	8009712 <strcpy>

	init->poll = &BH1750_poll_self;
 8000fd8:	697b      	ldr	r3, [r7, #20]
 8000fda:	4a03      	ldr	r2, [pc, #12]	@ (8000fe8 <BH1750_init_dev_struct+0x88>)
 8000fdc:	611a      	str	r2, [r3, #16]

	return init;
 8000fde:	697b      	ldr	r3, [r7, #20]
}
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	3718      	adds	r7, #24
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	bd80      	pop	{r7, pc}
 8000fe8:	08000f4b 	.word	0x08000f4b

08000fec <BH1750_init_dev>:

HAL_StatusTypeDef BH1750_init_dev(BH1750_device_t* dev)
{
 8000fec:	b580      	push	{r7, lr}
 8000fee:	b082      	sub	sp, #8
 8000ff0:	af00      	add	r7, sp, #0
 8000ff2:	6078      	str	r0, [r7, #4]
	BH1750_send_command(dev, CMD_POWER_ON);
 8000ff4:	2101      	movs	r1, #1
 8000ff6:	6878      	ldr	r0, [r7, #4]
 8000ff8:	f7ff ff8c 	bl	8000f14 <BH1750_send_command>
	BH1750_send_command(dev, CMD_RESET);
 8000ffc:	2103      	movs	r1, #3
 8000ffe:	6878      	ldr	r0, [r7, #4]
 8001000:	f7ff ff88 	bl	8000f14 <BH1750_send_command>
	BH1750_send_command(dev, CMD_H_RES_MODE);
 8001004:	2110      	movs	r1, #16
 8001006:	6878      	ldr	r0, [r7, #4]
 8001008:	f7ff ff84 	bl	8000f14 <BH1750_send_command>

	return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	3708      	adds	r7, #8
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <BH1750_read_dev>:

HAL_StatusTypeDef BH1750_read_dev(BH1750_device_t* dev)
{
 8001016:	b580      	push	{r7, lr}
 8001018:	b084      	sub	sp, #16
 800101a:	af02      	add	r7, sp, #8
 800101c:	6078      	str	r0, [r7, #4]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	6858      	ldr	r0, [r3, #4]
			dev->address_r,
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	7a1b      	ldrb	r3, [r3, #8]
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 8001026:	4619      	mov	r1, r3
			dev->buffer,
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	f103 020c 	add.w	r2, r3, #12
	if(HAL_I2C_Master_Receive(dev->i2c_handle,
 800102e:	230a      	movs	r3, #10
 8001030:	9300      	str	r3, [sp, #0]
 8001032:	2302      	movs	r3, #2
 8001034:	f003 fdee 	bl	8004c14 <HAL_I2C_Master_Receive>
 8001038:	4603      	mov	r3, r0
 800103a:	2b00      	cmp	r3, #0
 800103c:	d001      	beq.n	8001042 <BH1750_read_dev+0x2c>
			2,
			10
	) != HAL_OK) return HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	e000      	b.n	8001044 <BH1750_read_dev+0x2e>

	return HAL_OK;
 8001042:	2300      	movs	r3, #0
}
 8001044:	4618      	mov	r0, r3
 8001046:	3708      	adds	r7, #8
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}

0800104c <BH1750_get_lumen>:
	dev->value/=1.2;

	return HAL_OK;
}

float BH1750_get_lumen(BH1750_device_t* dev) {
 800104c:	b580      	push	{r7, lr}
 800104e:	b084      	sub	sp, #16
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
    if (BH1750_read_dev(dev) != HAL_OK) {
 8001054:	6878      	ldr	r0, [r7, #4]
 8001056:	f7ff ffde 	bl	8001016 <BH1750_read_dev>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <BH1750_get_lumen+0x18>
        return -1.0f; // Hoặc giá trị báo lỗi khác
 8001060:	4b0f      	ldr	r3, [pc, #60]	@ (80010a0 <BH1750_get_lumen+0x54>)
 8001062:	e016      	b.n	8001092 <BH1750_get_lumen+0x46>
    }
    // Thực hiện chuyển đổi trực tiếp ở đây
    uint16_t raw_value = ((uint16_t)dev->buffer[0] << 8) | dev->buffer[1];
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	7b1b      	ldrb	r3, [r3, #12]
 8001068:	b21b      	sxth	r3, r3
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b21a      	sxth	r2, r3
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	7b5b      	ldrb	r3, [r3, #13]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21b      	sxth	r3, r3
 8001078:	81fb      	strh	r3, [r7, #14]
    float lux = (float)raw_value / 1.2f; // Chuyển đổi sang float
 800107a:	89fb      	ldrh	r3, [r7, #14]
 800107c:	ee07 3a90 	vmov	s15, r3
 8001080:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001084:	eddf 6a07 	vldr	s13, [pc, #28]	@ 80010a4 <BH1750_get_lumen+0x58>
 8001088:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800108c:	edc7 7a02 	vstr	s15, [r7, #8]
    // Không cần gọi BH1750_convert nữa nếu làm vậy
    // BH1750_convert(dev); // Bỏ dòng này
    return lux; // Trả về giá trị float
 8001090:	68bb      	ldr	r3, [r7, #8]
}
 8001092:	ee07 3a90 	vmov	s15, r3
 8001096:	eeb0 0a67 	vmov.f32	s0, s15
 800109a:	3710      	adds	r7, #16
 800109c:	46bd      	mov	sp, r7
 800109e:	bd80      	pop	{r7, pc}
 80010a0:	bf800000 	.word	0xbf800000
 80010a4:	3f99999a 	.word	0x3f99999a

080010a8 <spi_write>:
/*
 * Writes a byte to SPI without changing chip select (CSX) state.
 * Called by the write_command() and write_data() functions which
 * control these pins as required.
 */
void spi_write(unsigned char data) {
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b082      	sub	sp, #8
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	4603      	mov	r3, r0
 80010b0:	71fb      	strb	r3, [r7, #7]
    //TODO: Update these buffer labels according to your device.

	HAL_SPI_Transmit(&hspi1, &data, 1, 100);
 80010b2:	1df9      	adds	r1, r7, #7
 80010b4:	2364      	movs	r3, #100	@ 0x64
 80010b6:	2201      	movs	r2, #1
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <spi_write+0x20>)
 80010ba:	f005 fe08 	bl	8006cce <HAL_SPI_Transmit>
}
 80010be:	bf00      	nop
 80010c0:	3708      	adds	r7, #8
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	2000026c 	.word	0x2000026c

080010cc <lcd_write_data>:

/*
 * Writes a data byte to the display. Pulls CS low as required.
 */
void lcd_write_data(unsigned char data) {
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	4603      	mov	r3, r0
 80010d4:	71fb      	strb	r3, [r7, #7]
    //CS LOW
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 80010d6:	2200      	movs	r2, #0
 80010d8:	2108      	movs	r1, #8
 80010da:	480a      	ldr	r0, [pc, #40]	@ (8001104 <lcd_write_data+0x38>)
 80010dc:	f003 fb3e 	bl	800475c <HAL_GPIO_WritePin>
    //DC HIGH
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_SET);
 80010e0:	2201      	movs	r2, #1
 80010e2:	2110      	movs	r1, #16
 80010e4:	4807      	ldr	r0, [pc, #28]	@ (8001104 <lcd_write_data+0x38>)
 80010e6:	f003 fb39 	bl	800475c <HAL_GPIO_WritePin>
    //Send data to the SPI register
    spi_write(data);
 80010ea:	79fb      	ldrb	r3, [r7, #7]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f7ff ffdb 	bl	80010a8 <spi_write>
    //CS HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80010f2:	2201      	movs	r2, #1
 80010f4:	2108      	movs	r1, #8
 80010f6:	4803      	ldr	r0, [pc, #12]	@ (8001104 <lcd_write_data+0x38>)
 80010f8:	f003 fb30 	bl	800475c <HAL_GPIO_WritePin>
}
 80010fc:	bf00      	nop
 80010fe:	3708      	adds	r7, #8
 8001100:	46bd      	mov	sp, r7
 8001102:	bd80      	pop	{r7, pc}
 8001104:	40020000 	.word	0x40020000

08001108 <lcd_write_command>:

/*
 * Writes a command byte to the display
 */
void lcd_write_command(unsigned char data) {
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    //Pull the command AND chip select lines LOW
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET);
 8001112:	2200      	movs	r2, #0
 8001114:	2110      	movs	r1, #16
 8001116:	480a      	ldr	r0, [pc, #40]	@ (8001140 <lcd_write_command+0x38>)
 8001118:	f003 fb20 	bl	800475c <HAL_GPIO_WritePin>
    //CSX = 0;
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	2108      	movs	r1, #8
 8001120:	4807      	ldr	r0, [pc, #28]	@ (8001140 <lcd_write_command+0x38>)
 8001122:	f003 fb1b 	bl	800475c <HAL_GPIO_WritePin>
    spi_write(data);
 8001126:	79fb      	ldrb	r3, [r7, #7]
 8001128:	4618      	mov	r0, r3
 800112a:	f7ff ffbd 	bl	80010a8 <spi_write>
    //Return the control lines to HIGH
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 800112e:	2201      	movs	r2, #1
 8001130:	2108      	movs	r1, #8
 8001132:	4803      	ldr	r0, [pc, #12]	@ (8001140 <lcd_write_command+0x38>)
 8001134:	f003 fb12 	bl	800475c <HAL_GPIO_WritePin>
}
 8001138:	bf00      	nop
 800113a:	3708      	adds	r7, #8
 800113c:	46bd      	mov	sp, r7
 800113e:	bd80      	pop	{r7, pc}
 8001140:	40020000 	.word	0x40020000

08001144 <lcd_write_register>:

/*
 * Writes data to a specific register.
 * Accepts a 16-bit register address, and 16-bits of data.
 */
void lcd_write_register(unsigned int reg, unsigned int data) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
    //Write each register byte, and each data byte seperately.
    lcd_write_command(reg >> 8); //regH
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	0a1b      	lsrs	r3, r3, #8
 8001152:	b2db      	uxtb	r3, r3
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff ffd7 	bl	8001108 <lcd_write_command>
    lcd_write_command(reg & 0xFF); //regL
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	b2db      	uxtb	r3, r3
 800115e:	4618      	mov	r0, r3
 8001160:	f7ff ffd2 	bl	8001108 <lcd_write_command>
    lcd_write_data(data >> 8); //dataH
 8001164:	683b      	ldr	r3, [r7, #0]
 8001166:	0a1b      	lsrs	r3, r3, #8
 8001168:	b2db      	uxtb	r3, r3
 800116a:	4618      	mov	r0, r3
 800116c:	f7ff ffae 	bl	80010cc <lcd_write_data>
    lcd_write_data(data & 0xFF); //dataL
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	b2db      	uxtb	r3, r3
 8001174:	4618      	mov	r0, r3
 8001176:	f7ff ffa9 	bl	80010cc <lcd_write_data>
}
 800117a:	bf00      	nop
 800117c:	3708      	adds	r7, #8
 800117e:	46bd      	mov	sp, r7
 8001180:	bd80      	pop	{r7, pc}

08001182 <swap_char>:
}

/*
 * Swaps two 8-bit integers
 */
void swap_char(char *num1, char *num2) {
 8001182:	b480      	push	{r7}
 8001184:	b085      	sub	sp, #20
 8001186:	af00      	add	r7, sp, #0
 8001188:	6078      	str	r0, [r7, #4]
 800118a:	6039      	str	r1, [r7, #0]
    char temp = *num2;
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	781b      	ldrb	r3, [r3, #0]
 8001190:	73fb      	strb	r3, [r7, #15]
    *num2 = *num1;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	781a      	ldrb	r2, [r3, #0]
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	701a      	strb	r2, [r3, #0]
    *num1 = temp;
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	7bfa      	ldrb	r2, [r7, #15]
 800119e:	701a      	strb	r2, [r3, #0]
}
 80011a0:	bf00      	nop
 80011a2:	3714      	adds	r7, #20
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <delay_ms>:

/*
 * Delay calcualted on 32MHz clock.
 * Does NOT adjust to clock setting
 */
void delay_ms(double millis) {
 80011ac:	b580      	push	{r7, lr}
 80011ae:	b082      	sub	sp, #8
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	ed87 0b00 	vstr	d0, [r7]
    HAL_Delay((uint32_t)millis); // Sử dụng hàm delay chuẩn của HAL
 80011b6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011ba:	f7ff fcf5 	bl	8000ba8 <__aeabi_d2uiz>
 80011be:	4603      	mov	r3, r0
 80011c0:	4618      	mov	r0, r3
 80011c2:	f002 ffe1 	bl	8004188 <HAL_Delay>
}
 80011c6:	bf00      	nop
 80011c8:	3708      	adds	r7, #8
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}
	...

080011d0 <lcd_init>:
/*
 * Initialisation routine for the LCD
 * I got this from the one of the ebay sellers which make them.
 * From Open-Smart
 */
void lcd_init() {
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0

    //SET control pins for the LCD HIGH (they are active LOW)
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	2108      	movs	r1, #8
 80011d8:	4813      	ldr	r0, [pc, #76]	@ (8001228 <lcd_init+0x58>)
 80011da:	f003 fabf 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(CMD_PORT, CMD_PIN, GPIO_PIN_RESET); //Data / command select, the datasheet isn't clear on that.
 80011de:	2200      	movs	r2, #0
 80011e0:	2110      	movs	r1, #16
 80011e2:	4811      	ldr	r0, [pc, #68]	@ (8001228 <lcd_init+0x58>)
 80011e4:	f003 faba 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET); //RESET pin HIGH
 80011e8:	2201      	movs	r2, #1
 80011ea:	2104      	movs	r1, #4
 80011ec:	480e      	ldr	r0, [pc, #56]	@ (8001228 <lcd_init+0x58>)
 80011ee:	f003 fab5 	bl	800475c <HAL_GPIO_WritePin>

    //Cycle reset pin
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_RESET);
 80011f2:	2200      	movs	r2, #0
 80011f4:	2104      	movs	r1, #4
 80011f6:	480c      	ldr	r0, [pc, #48]	@ (8001228 <lcd_init+0x58>)
 80011f8:	f003 fab0 	bl	800475c <HAL_GPIO_WritePin>
    delay_ms(10);
 80011fc:	ed9f 0b08 	vldr	d0, [pc, #32]	@ 8001220 <lcd_init+0x50>
 8001200:	f7ff ffd4 	bl	80011ac <delay_ms>
    HAL_GPIO_WritePin(RESX_PORT, RESX_PIN, GPIO_PIN_SET);
 8001204:	2201      	movs	r2, #1
 8001206:	2104      	movs	r1, #4
 8001208:	4807      	ldr	r0, [pc, #28]	@ (8001228 <lcd_init+0x58>)
 800120a:	f003 faa7 	bl	800475c <HAL_GPIO_WritePin>
    delay_ms(10);
 800120e:	ed9f 0b04 	vldr	d0, [pc, #16]	@ 8001220 <lcd_init+0x50>
 8001212:	f7ff ffcb 	bl	80011ac <delay_ms>

    lcd_init_command_list();
 8001216:	f000 f80b 	bl	8001230 <lcd_init_command_list>

}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	00000000 	.word	0x00000000
 8001224:	40240000 	.word	0x40240000
 8001228:	40020000 	.word	0x40020000
 800122c:	00000000 	.word	0x00000000

08001230 <lcd_init_command_list>:
 * This is the magic initialisation routine. Supplied by Open-Smart
 * who sell cheap modules on eBay.
 * This routine works with OTM2201A and ILI9925.
 */
void lcd_init_command_list(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
    // 1. Start Oscillator (Datasheet suggests doing this early)
    lcd_write_register(ILI9225_OSC_CTRL, 0x0F01); // Start OSC (FOSC=0Fh default ~266kHz?)
 8001234:	f640 7101 	movw	r1, #3841	@ 0xf01
 8001238:	200f      	movs	r0, #15
 800123a:	f7ff ff83 	bl	8001144 <lcd_write_register>
    delay_ms(10); // Wait >10ms for oscillator stabilization (Datasheet R00h description) [cite: 264]
 800123e:	ed9f 0b5e 	vldr	d0, [pc, #376]	@ 80013b8 <lcd_init_command_list+0x188>
 8001242:	f7ff ffb3 	bl	80011ac <delay_ms>

    // 2. Power Control Initial Settings (Mostly defaults or safe values before enabling circuits)
    // Datasheet Fig 42 sequence: Set VC, VRH, VCM, VDV, PON=0
    // R11h: Set VC[3:0] (VCI1 voltage), ensure PON=0, APON=0, AON=0, VCI1_EN=1 (to generate VCI1)
    lcd_write_register(ILI9225_POWER_CTRL2, 0x0018 | (0x08 << 0)); // VC[3:0]=1000 (VCI1=2.58V), VCI1_EN=1, AON=0, PONx=0, APON=0
 8001246:	2118      	movs	r1, #24
 8001248:	2011      	movs	r0, #17
 800124a:	f7ff ff7b 	bl	8001144 <lcd_write_register>
    // R14h: Set VCM[6:0] (VCOMH), VML[6:0] (VCOM Amplitude), VCOMG=0 (initially)
    lcd_write_register(ILI9225_POWER_CTRL5, 0x495F); // Example value from original code, check if suitable? VCOMG=0
 800124e:	f644 115f 	movw	r1, #18783	@ 0x495f
 8001252:	2014      	movs	r0, #20
 8001254:	f7ff ff76 	bl	8001144 <lcd_write_register>
    // R13h: Set GVDD[6:0]
    lcd_write_register(ILI9225_POWER_CTRL4, 0x006F); // Example value from original code
 8001258:	216f      	movs	r1, #111	@ 0x6f
 800125a:	2013      	movs	r0, #19
 800125c:	f7ff ff72 	bl	8001144 <lcd_write_register>
    // R10h: Ensure DSTB=0, STB=0 initially
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0000); // DSTB=0, STB=0, SAP=0
 8001260:	2100      	movs	r1, #0
 8001262:	2010      	movs	r0, #16
 8001264:	f7ff ff6e 	bl	8001144 <lcd_write_register>

    // 3. Power Supply Startup Sequence Part 1 (Enable regulators/pumps)
    // Datasheet Fig 42 sequence: Set BT, DC1/2/3, PON=1, Set AP
    // R12h: Set Step-up cycles (DC1/2/3) and initial/safe step-up factor (BT)
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0808); // Example: BT=000 (x4/-3), DC1/2/3 moderate freq? Check datasheet/adjust.
 8001268:	f640 0108 	movw	r1, #2056	@ 0x808
 800126c:	2012      	movs	r0, #18
 800126e:	f7ff ff69 	bl	8001144 <lcd_write_register>
    // R11h: Enable PON (Booster circuit 1), APON (Auto Power ON seq), AON (Amplifier)
    lcd_write_register(ILI9225_POWER_CTRL2, 0x081C | (0x08 << 0)); // Keep VC setting, VCI1_EN=1, AON=1, PON=1, APON=1? (Check APON logic)
 8001272:	f640 011c 	movw	r1, #2076	@ 0x81c
 8001276:	2011      	movs	r0, #17
 8001278:	f7ff ff64 	bl	8001144 <lcd_write_register>

    // 4. Wait for Power stabilization
    delay_ms(40); // Wait >40ms (Datasheet Fig 42)
 800127c:	ed9f 0b50 	vldr	d0, [pc, #320]	@ 80013c0 <lcd_init_command_list+0x190>
 8001280:	f7ff ff94 	bl	80011ac <delay_ms>

    // 5. Power Supply Startup Sequence Part 2 (Final settings)
    // Datasheet Fig 42 sequence: Set final BT, DK=0?, VCOMG=1
    // R12h: Set final Step-up factor (BT) if needed (maybe same as before)
    lcd_write_register(ILI9225_POWER_CTRL3, 0x0808); // Re-assert or set final BT
 8001284:	f640 0108 	movw	r1, #2056	@ 0x808
 8001288:	2012      	movs	r0, #18
 800128a:	f7ff ff5b 	bl	8001144 <lcd_write_register>
    // R14h: Set VCOMG=1 if needed
    lcd_write_register(ILI9225_POWER_CTRL5, 0xC95F); // Same VCM/VML as before, but VCOMG=1
 800128e:	f64c 115f 	movw	r1, #51551	@ 0xc95f
 8001292:	2014      	movs	r0, #20
 8001294:	f7ff ff56 	bl	8001144 <lcd_write_register>

    // Wait briefly after power settings
    delay_ms(10);
 8001298:	ed9f 0b47 	vldr	d0, [pc, #284]	@ 80013b8 <lcd_init_command_list+0x188>
 800129c:	f7ff ff86 	bl	80011ac <delay_ms>

    // 6. Configure Display and Driver settings
    lcd_write_register(ILI9225_DRIVER_OUTPUT_CTRL, 0x011C); // set the display line number and display direction
 80012a0:	f44f 718e 	mov.w	r1, #284	@ 0x11c
 80012a4:	2001      	movs	r0, #1
 80012a6:	f7ff ff4d 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_LCD_AC_DRIVING_CTRL, 0x0100); // set 1 line inversion
 80012aa:	f44f 7180 	mov.w	r1, #256	@ 0x100
 80012ae:	2002      	movs	r0, #2
 80012b0:	f7ff ff48 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_ENTRY_MODE, 0x1030); // set GRAM write direction and BGR=1. (Check BGR, should be 0 if R->B order is Red->Blue?) => Try 0x1030 (BGR=0) if colors are swapped
 80012b4:	f241 0130 	movw	r1, #4144	@ 0x1030
 80012b8:	2003      	movs	r0, #3
 80012ba:	f7ff ff43 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_BLANK_PERIOD_CTRL1, 0x0808); // Set BP/FP (Min 2 lines each, BP+FP <= 16) -> 8+8=16 [cite: 326]
 80012be:	f640 0108 	movw	r1, #2056	@ 0x808
 80012c2:	2008      	movs	r0, #8
 80012c4:	f7ff ff3e 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_FRAME_CYCLE_CTRL, 0x0000); // set the clocks number per line
 80012c8:	2100      	movs	r1, #0
 80012ca:	200b      	movs	r0, #11
 80012cc:	f7ff ff3a 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_INTERFACE_CTRL, 0x0000); // CPU interface
 80012d0:	2100      	movs	r1, #0
 80012d2:	200c      	movs	r0, #12
 80012d4:	f7ff ff36 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VCI_RECYCLING, 0x0000); // Set VCI recycling
 80012d8:	2100      	movs	r1, #0
 80012da:	2015      	movs	r0, #21
 80012dc:	f7ff ff32 	bl	8001144 <lcd_write_register>

    // 7. Set GRAM area / Window
    lcd_write_register(ILI9225_GATE_SCAN_CTRL, 0x0000);
 80012e0:	2100      	movs	r1, #0
 80012e2:	2030      	movs	r0, #48	@ 0x30
 80012e4:	f7ff ff2e 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL1, 0x00DB); // Scroll End = 219
 80012e8:	21db      	movs	r1, #219	@ 0xdb
 80012ea:	2031      	movs	r0, #49	@ 0x31
 80012ec:	f7ff ff2a 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL2, 0x0000); // Scroll Start = 0
 80012f0:	2100      	movs	r1, #0
 80012f2:	2032      	movs	r0, #50	@ 0x32
 80012f4:	f7ff ff26 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_SCROLL_CTRL3, 0x0000); // Scroll Step = 0 (Scroll disabled)
 80012f8:	2100      	movs	r1, #0
 80012fa:	2033      	movs	r0, #51	@ 0x33
 80012fc:	f7ff ff22 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS1, 0x00DB); // Partial End = 219
 8001300:	21db      	movs	r1, #219	@ 0xdb
 8001302:	2034      	movs	r0, #52	@ 0x34
 8001304:	f7ff ff1e 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_PARTIAL_DRIVING_POS2, 0x0000); // Partial Start = 0 (Partial disabled)
 8001308:	2100      	movs	r1, #0
 800130a:	2035      	movs	r0, #53	@ 0x35
 800130c:	f7ff ff1a 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1, 0x00AF); // Horizontal End = 175
 8001310:	21af      	movs	r1, #175	@ 0xaf
 8001312:	2036      	movs	r0, #54	@ 0x36
 8001314:	f7ff ff16 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2, 0x0000); // Horizontal Start = 0
 8001318:	2100      	movs	r1, #0
 800131a:	2037      	movs	r0, #55	@ 0x37
 800131c:	f7ff ff12 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1, 0x00DB); // Vertical End = 219
 8001320:	21db      	movs	r1, #219	@ 0xdb
 8001322:	2038      	movs	r0, #56	@ 0x38
 8001324:	f7ff ff0e 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2, 0x0000); // Vertical Start = 0
 8001328:	2100      	movs	r1, #0
 800132a:	2039      	movs	r0, #57	@ 0x39
 800132c:	f7ff ff0a 	bl	8001144 <lcd_write_register>

    // 8. Set GAMMA curve (Using original values, verify if needed)
    lcd_write_register(ILI9225_GAMMA_CTRL1, 0x0000);
 8001330:	2100      	movs	r1, #0
 8001332:	2050      	movs	r0, #80	@ 0x50
 8001334:	f7ff ff06 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL2, 0x0808);
 8001338:	f640 0108 	movw	r1, #2056	@ 0x808
 800133c:	2051      	movs	r0, #81	@ 0x51
 800133e:	f7ff ff01 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL3, 0x080A);
 8001342:	f640 010a 	movw	r1, #2058	@ 0x80a
 8001346:	2052      	movs	r0, #82	@ 0x52
 8001348:	f7ff fefc 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL4, 0x000A);
 800134c:	210a      	movs	r1, #10
 800134e:	2053      	movs	r0, #83	@ 0x53
 8001350:	f7ff fef8 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL5, 0x0A08);
 8001354:	f640 2108 	movw	r1, #2568	@ 0xa08
 8001358:	2054      	movs	r0, #84	@ 0x54
 800135a:	f7ff fef3 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL6, 0x0808);
 800135e:	f640 0108 	movw	r1, #2056	@ 0x808
 8001362:	2055      	movs	r0, #85	@ 0x55
 8001364:	f7ff feee 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL7, 0x0000);
 8001368:	2100      	movs	r1, #0
 800136a:	2056      	movs	r0, #86	@ 0x56
 800136c:	f7ff feea 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL8, 0x0A00);
 8001370:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001374:	2057      	movs	r0, #87	@ 0x57
 8001376:	f7ff fee5 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL9, 0x0710);
 800137a:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 800137e:	2058      	movs	r0, #88	@ 0x58
 8001380:	f7ff fee0 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_GAMMA_CTRL10, 0x0710);
 8001384:	f44f 61e2 	mov.w	r1, #1808	@ 0x710
 8001388:	2059      	movs	r0, #89	@ 0x59
 800138a:	f7ff fedb 	bl	8001144 <lcd_write_register>

    // 9. Display ON Sequence (Based on Datasheet Fig 40 [cite: 564])
    // Set SAP (Source driving capability)
    lcd_write_register(ILI9225_POWER_CTRL1, 0x0A00); // Example: SAP=1010 (Medium Fast 3), DSTB=0, STB=0 [cite: 350, 352]
 800138e:	f44f 6120 	mov.w	r1, #2560	@ 0xa00
 8001392:	2010      	movs	r0, #16
 8001394:	f7ff fed6 	bl	8001144 <lcd_write_register>
    delay_ms(50); // Wait >2 frames (adjust if needed, 50ms should be enough)
 8001398:	ed9f 0b0b 	vldr	d0, [pc, #44]	@ 80013c8 <lcd_init_command_list+0x198>
 800139c:	f7ff ff06 	bl	80011ac <delay_ms>

    // Turn display ON (D[1:0]=11), GON=1
    lcd_write_register(ILI9225_DISP_CTRL1, 0x1017); // GON=1, D[1:0]=11 [cite: 315]
 80013a0:	f241 0117 	movw	r1, #4119	@ 0x1017
 80013a4:	2007      	movs	r0, #7
 80013a6:	f7ff fecd 	bl	8001144 <lcd_write_register>
    delay_ms(50); // Wait after display on
 80013aa:	ed9f 0b07 	vldr	d0, [pc, #28]	@ 80013c8 <lcd_init_command_list+0x198>
 80013ae:	f7ff fefd 	bl	80011ac <delay_ms>
}
 80013b2:	bf00      	nop
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	00000000 	.word	0x00000000
 80013bc:	40240000 	.word	0x40240000
 80013c0:	00000000 	.word	0x00000000
 80013c4:	40440000 	.word	0x40440000
 80013c8:	00000000 	.word	0x00000000
 80013cc:	40490000 	.word	0x40490000

080013d0 <draw_pixel>:
 * Draws a single pixel to the LCD at position X, Y, with
 * Colour.
 *
 * 28 bytes per pixel. Use it wisely.
 */
void draw_pixel(char x, char y, unsigned int colour) {
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	4603      	mov	r3, r0
 80013d8:	603a      	str	r2, [r7, #0]
 80013da:	71fb      	strb	r3, [r7, #7]
 80013dc:	460b      	mov	r3, r1
 80013de:	71bb      	strb	r3, [r7, #6]
    //If we are in landscape view then translate -90 degrees
    if(LANDSCAPE) {
        swap_char(&x, &y);
 80013e0:	1dba      	adds	r2, r7, #6
 80013e2:	1dfb      	adds	r3, r7, #7
 80013e4:	4611      	mov	r1, r2
 80013e6:	4618      	mov	r0, r3
 80013e8:	f7ff fecb 	bl	8001182 <swap_char>
        y = WIDTH - y;
 80013ec:	79ba      	ldrb	r2, [r7, #6]
 80013ee:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80013f2:	1a9b      	subs	r3, r3, r2
 80013f4:	b2db      	uxtb	r3, r3
 80013f6:	71bb      	strb	r3, [r7, #6]
    }

    //Set the x, y position that we want to write to
    set_draw_window(x, y, x+1, y+1);
 80013f8:	79f8      	ldrb	r0, [r7, #7]
 80013fa:	79b9      	ldrb	r1, [r7, #6]
 80013fc:	79fb      	ldrb	r3, [r7, #7]
 80013fe:	3301      	adds	r3, #1
 8001400:	b2da      	uxtb	r2, r3
 8001402:	79bb      	ldrb	r3, [r7, #6]
 8001404:	3301      	adds	r3, #1
 8001406:	b2db      	uxtb	r3, r3
 8001408:	f000 f87a 	bl	8001500 <set_draw_window>
    lcd_write_data(colour >> 8);
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	0a1b      	lsrs	r3, r3, #8
 8001410:	b2db      	uxtb	r3, r3
 8001412:	4618      	mov	r0, r3
 8001414:	f7ff fe5a 	bl	80010cc <lcd_write_data>
    lcd_write_data(colour & 0xFF);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	4618      	mov	r0, r3
 800141e:	f7ff fe55 	bl	80010cc <lcd_write_data>
}
 8001422:	bf00      	nop
 8001424:	3708      	adds	r7, #8
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
	...

0800142c <fill_rectangle>:

/*
 * Fills a rectangle with a given colour
 */
void fill_rectangle(char x1, char y1, char x2, char y2, unsigned int colour) {
 800142c:	b590      	push	{r4, r7, lr}
 800142e:	b087      	sub	sp, #28
 8001430:	af00      	add	r7, sp, #0
 8001432:	4604      	mov	r4, r0
 8001434:	4608      	mov	r0, r1
 8001436:	4611      	mov	r1, r2
 8001438:	461a      	mov	r2, r3
 800143a:	4623      	mov	r3, r4
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	4603      	mov	r3, r0
 8001440:	71bb      	strb	r3, [r7, #6]
 8001442:	460b      	mov	r3, r1
 8001444:	717b      	strb	r3, [r7, #5]
 8001446:	4613      	mov	r3, r2
 8001448:	713b      	strb	r3, [r7, #4]
    //If landscape view then translate everyting -90 degrees
    if(LANDSCAPE) {
        swap_char(&x1, &y1);
 800144a:	1dba      	adds	r2, r7, #6
 800144c:	1dfb      	adds	r3, r7, #7
 800144e:	4611      	mov	r1, r2
 8001450:	4618      	mov	r0, r3
 8001452:	f7ff fe96 	bl	8001182 <swap_char>
        swap_char(&x2, &y2);
 8001456:	1d3a      	adds	r2, r7, #4
 8001458:	1d7b      	adds	r3, r7, #5
 800145a:	4611      	mov	r1, r2
 800145c:	4618      	mov	r0, r3
 800145e:	f7ff fe90 	bl	8001182 <swap_char>
        y1 = WIDTH - y1;
 8001462:	79ba      	ldrb	r2, [r7, #6]
 8001464:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8001468:	1a9b      	subs	r3, r3, r2
 800146a:	b2db      	uxtb	r3, r3
 800146c:	71bb      	strb	r3, [r7, #6]
        y2 = WIDTH - y2;
 800146e:	793a      	ldrb	r2, [r7, #4]
 8001470:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 8001474:	1a9b      	subs	r3, r3, r2
 8001476:	b2db      	uxtb	r3, r3
 8001478:	713b      	strb	r3, [r7, #4]
        swap_char(&y2, &y1);
 800147a:	1dba      	adds	r2, r7, #6
 800147c:	1d3b      	adds	r3, r7, #4
 800147e:	4611      	mov	r1, r2
 8001480:	4618      	mov	r0, r3
 8001482:	f7ff fe7e 	bl	8001182 <swap_char>
    }

    //Split the colour int in to two bytes
    unsigned char colour_high = colour >> 8;
 8001486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001488:	0a1b      	lsrs	r3, r3, #8
 800148a:	73fb      	strb	r3, [r7, #15]
    unsigned char colour_low = colour & 0xFF;
 800148c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800148e:	73bb      	strb	r3, [r7, #14]

    //Set the drawing region
    set_draw_window(x1, y1, x2, y2);
 8001490:	79f8      	ldrb	r0, [r7, #7]
 8001492:	79b9      	ldrb	r1, [r7, #6]
 8001494:	797a      	ldrb	r2, [r7, #5]
 8001496:	793b      	ldrb	r3, [r7, #4]
 8001498:	f000 f832 	bl	8001500 <set_draw_window>

    //We will do the SPI write manually here for speed
    //( the data sheet says it doesn't matter if CSX changes between
    // data sections but I don't trust it.)
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 800149c:	2200      	movs	r2, #0
 800149e:	2108      	movs	r1, #8
 80014a0:	4816      	ldr	r0, [pc, #88]	@ (80014fc <fill_rectangle+0xd0>)
 80014a2:	f003 f95b 	bl	800475c <HAL_GPIO_WritePin>

    //Write colour to each pixel
    for(int y = 0; y < y2-y1+1 ; y++) {
 80014a6:	2300      	movs	r3, #0
 80014a8:	617b      	str	r3, [r7, #20]
 80014aa:	e017      	b.n	80014dc <fill_rectangle+0xb0>
        for(int x = 0; x < x2-x1+1; x++) {
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
 80014b0:	e00a      	b.n	80014c8 <fill_rectangle+0x9c>
            lcd_write_data(colour_high);
 80014b2:	7bfb      	ldrb	r3, [r7, #15]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f7ff fe09 	bl	80010cc <lcd_write_data>
            lcd_write_data(colour_low);
 80014ba:	7bbb      	ldrb	r3, [r7, #14]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fe05 	bl	80010cc <lcd_write_data>
        for(int x = 0; x < x2-x1+1; x++) {
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	3301      	adds	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
 80014c8:	797b      	ldrb	r3, [r7, #5]
 80014ca:	461a      	mov	r2, r3
 80014cc:	79fb      	ldrb	r3, [r7, #7]
 80014ce:	1ad3      	subs	r3, r2, r3
 80014d0:	693a      	ldr	r2, [r7, #16]
 80014d2:	429a      	cmp	r2, r3
 80014d4:	dded      	ble.n	80014b2 <fill_rectangle+0x86>
    for(int y = 0; y < y2-y1+1 ; y++) {
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	3301      	adds	r3, #1
 80014da:	617b      	str	r3, [r7, #20]
 80014dc:	793b      	ldrb	r3, [r7, #4]
 80014de:	461a      	mov	r2, r3
 80014e0:	79bb      	ldrb	r3, [r7, #6]
 80014e2:	1ad3      	subs	r3, r2, r3
 80014e4:	697a      	ldr	r2, [r7, #20]
 80014e6:	429a      	cmp	r2, r3
 80014e8:	dde0      	ble.n	80014ac <fill_rectangle+0x80>
        }
    }
    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80014ea:	2201      	movs	r2, #1
 80014ec:	2108      	movs	r1, #8
 80014ee:	4803      	ldr	r0, [pc, #12]	@ (80014fc <fill_rectangle+0xd0>)
 80014f0:	f003 f934 	bl	800475c <HAL_GPIO_WritePin>
}
 80014f4:	bf00      	nop
 80014f6:	371c      	adds	r7, #28
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd90      	pop	{r4, r7, pc}
 80014fc:	40020000 	.word	0x40020000

08001500 <set_draw_window>:
 * Should only be called within a function that draws something
 * to the display.
 *
 * NOTE: This is 26 bytes. Use it sparingly (see draw_bitmap())
 */
void set_draw_window(char x1, char y1, char x2, char y2) {
 8001500:	b590      	push	{r4, r7, lr}
 8001502:	b083      	sub	sp, #12
 8001504:	af00      	add	r7, sp, #0
 8001506:	4604      	mov	r4, r0
 8001508:	4608      	mov	r0, r1
 800150a:	4611      	mov	r1, r2
 800150c:	461a      	mov	r2, r3
 800150e:	4623      	mov	r3, r4
 8001510:	71fb      	strb	r3, [r7, #7]
 8001512:	4603      	mov	r3, r0
 8001514:	71bb      	strb	r3, [r7, #6]
 8001516:	460b      	mov	r3, r1
 8001518:	717b      	strb	r3, [r7, #5]
 800151a:	4613      	mov	r3, r2
 800151c:	713b      	strb	r3, [r7, #4]

    //Check that the values are in order
    if(x2 < x1)
 800151e:	797a      	ldrb	r2, [r7, #5]
 8001520:	79fb      	ldrb	r3, [r7, #7]
 8001522:	429a      	cmp	r2, r3
 8001524:	d205      	bcs.n	8001532 <set_draw_window+0x32>
        swap_char(&x2, &x1);
 8001526:	1dfa      	adds	r2, r7, #7
 8001528:	1d7b      	adds	r3, r7, #5
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff fe28 	bl	8001182 <swap_char>
    if(y2 < y1)
 8001532:	793a      	ldrb	r2, [r7, #4]
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	429a      	cmp	r2, r3
 8001538:	d205      	bcs.n	8001546 <set_draw_window+0x46>
        swap_char(&y2, &y1);
 800153a:	1dba      	adds	r2, r7, #6
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff fe1e 	bl	8001182 <swap_char>

    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR1,x2);
 8001546:	797b      	ldrb	r3, [r7, #5]
 8001548:	4619      	mov	r1, r3
 800154a:	2036      	movs	r0, #54	@ 0x36
 800154c:	f7ff fdfa 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_HORIZONTAL_WINDOW_ADDR2,x1);
 8001550:	79fb      	ldrb	r3, [r7, #7]
 8001552:	4619      	mov	r1, r3
 8001554:	2037      	movs	r0, #55	@ 0x37
 8001556:	f7ff fdf5 	bl	8001144 <lcd_write_register>

    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR1,y2);
 800155a:	793b      	ldrb	r3, [r7, #4]
 800155c:	4619      	mov	r1, r3
 800155e:	2038      	movs	r0, #56	@ 0x38
 8001560:	f7ff fdf0 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_VERTICAL_WINDOW_ADDR2,y1);
 8001564:	79bb      	ldrb	r3, [r7, #6]
 8001566:	4619      	mov	r1, r3
 8001568:	2039      	movs	r0, #57	@ 0x39
 800156a:	f7ff fdeb 	bl	8001144 <lcd_write_register>

    lcd_write_register(ILI9225_RAM_ADDR_SET1,x1);
 800156e:	79fb      	ldrb	r3, [r7, #7]
 8001570:	4619      	mov	r1, r3
 8001572:	2020      	movs	r0, #32
 8001574:	f7ff fde6 	bl	8001144 <lcd_write_register>
    lcd_write_register(ILI9225_RAM_ADDR_SET2,y1);
 8001578:	79bb      	ldrb	r3, [r7, #6]
 800157a:	4619      	mov	r1, r3
 800157c:	2021      	movs	r0, #33	@ 0x21
 800157e:	f7ff fde1 	bl	8001144 <lcd_write_register>

    lcd_write_command(0x00);
 8001582:	2000      	movs	r0, #0
 8001584:	f7ff fdc0 	bl	8001108 <lcd_write_command>
    lcd_write_command(0x22);
 8001588:	2022      	movs	r0, #34	@ 0x22
 800158a:	f7ff fdbd 	bl	8001108 <lcd_write_command>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
	...

08001598 <draw_char>:
 *
 * NOTE:
 * This sends approx. 800 bytes per char to the LCD, but it does preserver
 * the background image. Use the draw_fast_char() function where possible.
 */
void draw_char(char x, char y, char c, unsigned int colour, char size) {
 8001598:	b590      	push	{r4, r7, lr}
 800159a:	b089      	sub	sp, #36	@ 0x24
 800159c:	af02      	add	r7, sp, #8
 800159e:	603b      	str	r3, [r7, #0]
 80015a0:	4603      	mov	r3, r0
 80015a2:	71fb      	strb	r3, [r7, #7]
 80015a4:	460b      	mov	r3, r1
 80015a6:	71bb      	strb	r3, [r7, #6]
 80015a8:	4613      	mov	r3, r2
 80015aa:	717b      	strb	r3, [r7, #5]
    int i, j;
    char line;
    unsigned int font_index = (c - 32);
 80015ac:	797b      	ldrb	r3, [r7, #5]
 80015ae:	3b20      	subs	r3, #32
 80015b0:	60fb      	str	r3, [r7, #12]

    //Get the line of pixels from the font file
    for(i=0; i<13; i++ ) {
 80015b2:	2300      	movs	r3, #0
 80015b4:	617b      	str	r3, [r7, #20]
 80015b6:	e070      	b.n	800169a <draw_char+0x102>

        line = FontLarge[font_index][12 - i];
 80015b8:	697b      	ldr	r3, [r7, #20]
 80015ba:	f1c3 010c 	rsb	r1, r3, #12
 80015be:	483b      	ldr	r0, [pc, #236]	@ (80016ac <draw_char+0x114>)
 80015c0:	68fa      	ldr	r2, [r7, #12]
 80015c2:	4613      	mov	r3, r2
 80015c4:	005b      	lsls	r3, r3, #1
 80015c6:	4413      	add	r3, r2
 80015c8:	009b      	lsls	r3, r3, #2
 80015ca:	4413      	add	r3, r2
 80015cc:	4403      	add	r3, r0
 80015ce:	440b      	add	r3, r1
 80015d0:	781b      	ldrb	r3, [r3, #0]
 80015d2:	72fb      	strb	r3, [r7, #11]

        //Draw the pixels to screen
        for(j=0; j<8; j++) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	613b      	str	r3, [r7, #16]
 80015d8:	e059      	b.n	800168e <draw_char+0xf6>
            if(line & (0x01 << j)) {
 80015da:	7afa      	ldrb	r2, [r7, #11]
 80015dc:	693b      	ldr	r3, [r7, #16]
 80015de:	fa42 f303 	asr.w	r3, r2, r3
 80015e2:	f003 0301 	and.w	r3, r3, #1
 80015e6:	2b00      	cmp	r3, #0
 80015e8:	d04e      	beq.n	8001688 <draw_char+0xf0>
                if(size == 1) {
 80015ea:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80015ee:	2b01      	cmp	r3, #1
 80015f0:	d110      	bne.n	8001614 <draw_char+0x7c>
                    //If we are just doing the smallest size font then do a single pixel each
                    draw_pixel(x+(8-j), y+i, colour);
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	b2db      	uxtb	r3, r3
 80015f6:	79fa      	ldrb	r2, [r7, #7]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	b2db      	uxtb	r3, r3
 80015fc:	3308      	adds	r3, #8
 80015fe:	b2d8      	uxtb	r0, r3
 8001600:	697b      	ldr	r3, [r7, #20]
 8001602:	b2da      	uxtb	r2, r3
 8001604:	79bb      	ldrb	r3, [r7, #6]
 8001606:	4413      	add	r3, r2
 8001608:	b2db      	uxtb	r3, r3
 800160a:	683a      	ldr	r2, [r7, #0]
 800160c:	4619      	mov	r1, r3
 800160e:	f7ff fedf 	bl	80013d0 <draw_pixel>
 8001612:	e039      	b.n	8001688 <draw_char+0xf0>
                }
                else {
                    // do a small box to represent each pixel
                    fill_rectangle(x+((8-j)*size), y+((i)*size), x+((8-j)*size)+size, y+((i)*size)+size, colour);
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	f1c3 0308 	rsb	r3, r3, #8
 800161a:	b2db      	uxtb	r3, r3
 800161c:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001620:	fb12 f303 	smulbb	r3, r2, r3
 8001624:	b2da      	uxtb	r2, r3
 8001626:	79fb      	ldrb	r3, [r7, #7]
 8001628:	4413      	add	r3, r2
 800162a:	b2d8      	uxtb	r0, r3
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	b2db      	uxtb	r3, r3
 8001630:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001634:	fb12 f303 	smulbb	r3, r2, r3
 8001638:	b2da      	uxtb	r2, r3
 800163a:	79bb      	ldrb	r3, [r7, #6]
 800163c:	4413      	add	r3, r2
 800163e:	b2d9      	uxtb	r1, r3
 8001640:	693b      	ldr	r3, [r7, #16]
 8001642:	f1c3 0308 	rsb	r3, r3, #8
 8001646:	b2db      	uxtb	r3, r3
 8001648:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 800164c:	fb12 f303 	smulbb	r3, r2, r3
 8001650:	b2da      	uxtb	r2, r3
 8001652:	79fb      	ldrb	r3, [r7, #7]
 8001654:	4413      	add	r3, r2
 8001656:	b2da      	uxtb	r2, r3
 8001658:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800165c:	4413      	add	r3, r2
 800165e:	b2dc      	uxtb	r4, r3
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	b2db      	uxtb	r3, r3
 8001664:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8001668:	fb12 f303 	smulbb	r3, r2, r3
 800166c:	b2da      	uxtb	r2, r3
 800166e:	79bb      	ldrb	r3, [r7, #6]
 8001670:	4413      	add	r3, r2
 8001672:	b2da      	uxtb	r2, r3
 8001674:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001678:	4413      	add	r3, r2
 800167a:	b2da      	uxtb	r2, r3
 800167c:	683b      	ldr	r3, [r7, #0]
 800167e:	9300      	str	r3, [sp, #0]
 8001680:	4613      	mov	r3, r2
 8001682:	4622      	mov	r2, r4
 8001684:	f7ff fed2 	bl	800142c <fill_rectangle>
        for(j=0; j<8; j++) {
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	3301      	adds	r3, #1
 800168c:	613b      	str	r3, [r7, #16]
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	2b07      	cmp	r3, #7
 8001692:	dda2      	ble.n	80015da <draw_char+0x42>
    for(i=0; i<13; i++ ) {
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	3301      	adds	r3, #1
 8001698:	617b      	str	r3, [r7, #20]
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	2b0c      	cmp	r3, #12
 800169e:	dd8b      	ble.n	80015b8 <draw_char+0x20>
                }
            }
        }
    }
}
 80016a0:	bf00      	nop
 80016a2:	bf00      	nop
 80016a4:	371c      	adds	r7, #28
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd90      	pop	{r4, r7, pc}
 80016aa:	bf00      	nop
 80016ac:	0800b800 	.word	0x0800b800

080016b0 <draw_fast_char>:
 * than drawing individual pixels.
 * This will draw over any background image though.
 *
 * NOTE: This sends 130 bytes for a regular sized char
 */
void draw_fast_char(char x, char y, char c, unsigned int colour, unsigned int bg_colour) {
 80016b0:	b590      	push	{r4, r7, lr}
 80016b2:	b089      	sub	sp, #36	@ 0x24
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	603b      	str	r3, [r7, #0]
 80016b8:	4603      	mov	r3, r0
 80016ba:	71fb      	strb	r3, [r7, #7]
 80016bc:	460b      	mov	r3, r1
 80016be:	71bb      	strb	r3, [r7, #6]
 80016c0:	4613      	mov	r3, r2
 80016c2:	717b      	strb	r3, [r7, #5]
    char line;
    char width = 8;
 80016c4:	2308      	movs	r3, #8
 80016c6:	73bb      	strb	r3, [r7, #14]
    char height = 13;
 80016c8:	230d      	movs	r3, #13
 80016ca:	737b      	strb	r3, [r7, #13]
    unsigned int font_index = (c - 32);
 80016cc:	797b      	ldrb	r3, [r7, #5]
 80016ce:	3b20      	subs	r3, #32
 80016d0:	613b      	str	r3, [r7, #16]
    unsigned int this_px = bg_colour;
 80016d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80016d4:	61fb      	str	r3, [r7, #28]

    //Adjust for portrait / landscape orientation
    if(LANDSCAPE) {
        swap_char(&x, &y);
 80016d6:	1dba      	adds	r2, r7, #6
 80016d8:	1dfb      	adds	r3, r7, #7
 80016da:	4611      	mov	r1, r2
 80016dc:	4618      	mov	r0, r3
 80016de:	f7ff fd50 	bl	8001182 <swap_char>
        swap_char(&width, &height);
 80016e2:	f107 020d 	add.w	r2, r7, #13
 80016e6:	f107 030e 	add.w	r3, r7, #14
 80016ea:	4611      	mov	r1, r2
 80016ec:	4618      	mov	r0, r3
 80016ee:	f7ff fd48 	bl	8001182 <swap_char>
        y = WIDTH - y - height; //I don't know why this offset works. :/
 80016f2:	79ba      	ldrb	r2, [r7, #6]
 80016f4:	7b7b      	ldrb	r3, [r7, #13]
 80016f6:	4413      	add	r3, r2
 80016f8:	b2da      	uxtb	r2, r3
 80016fa:	f06f 0323 	mvn.w	r3, #35	@ 0x23
 80016fe:	1a9b      	subs	r3, r3, r2
 8001700:	b2db      	uxtb	r3, r3
 8001702:	71bb      	strb	r3, [r7, #6]
    }

    //Set the drawing region
    set_draw_window(x, y, x + width - 1, y + height-1);
 8001704:	79f8      	ldrb	r0, [r7, #7]
 8001706:	79b9      	ldrb	r1, [r7, #6]
 8001708:	79fa      	ldrb	r2, [r7, #7]
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	4413      	add	r3, r2
 800170e:	b2db      	uxtb	r3, r3
 8001710:	3b01      	subs	r3, #1
 8001712:	b2dc      	uxtb	r4, r3
 8001714:	79ba      	ldrb	r2, [r7, #6]
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	4413      	add	r3, r2
 800171a:	b2db      	uxtb	r3, r3
 800171c:	3b01      	subs	r3, #1
 800171e:	b2db      	uxtb	r3, r3
 8001720:	4622      	mov	r2, r4
 8001722:	f7ff feed 	bl	8001500 <set_draw_window>

    //We will do the SPI write manually here for speed
    //CSX low to begin data
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_RESET);
 8001726:	2200      	movs	r2, #0
 8001728:	2108      	movs	r1, #8
 800172a:	4829      	ldr	r0, [pc, #164]	@ (80017d0 <draw_fast_char+0x120>)
 800172c:	f003 f816 	bl	800475c <HAL_GPIO_WritePin>

    //Get the line of pixels from the font file
    for(int i=0; i < height; i++ ) {
 8001730:	2300      	movs	r3, #0
 8001732:	61bb      	str	r3, [r7, #24]
 8001734:	e03d      	b.n	80017b2 <draw_fast_char+0x102>
        line = FontLarge[font_index][12 - i];
 8001736:	69bb      	ldr	r3, [r7, #24]
 8001738:	f1c3 010c 	rsb	r1, r3, #12
 800173c:	4825      	ldr	r0, [pc, #148]	@ (80017d4 <draw_fast_char+0x124>)
 800173e:	693a      	ldr	r2, [r7, #16]
 8001740:	4613      	mov	r3, r2
 8001742:	005b      	lsls	r3, r3, #1
 8001744:	4413      	add	r3, r2
 8001746:	009b      	lsls	r3, r3, #2
 8001748:	4413      	add	r3, r2
 800174a:	4403      	add	r3, r0
 800174c:	440b      	add	r3, r1
 800174e:	781b      	ldrb	r3, [r3, #0]
 8001750:	73fb      	strb	r3, [r7, #15]

        //Draw the pixels to screen
        for(int j = width-1; j >= 0; j--) {
 8001752:	7bbb      	ldrb	r3, [r7, #14]
 8001754:	3b01      	subs	r3, #1
 8001756:	617b      	str	r3, [r7, #20]
 8001758:	e025      	b.n	80017a6 <draw_fast_char+0xf6>
            //Default pixel colour is the background colour, unless changed below
            this_px = bg_colour;
 800175a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800175c:	61fb      	str	r3, [r7, #28]

            if(LANDSCAPE) {
                line = FontLarge[font_index][j];
 800175e:	491d      	ldr	r1, [pc, #116]	@ (80017d4 <draw_fast_char+0x124>)
 8001760:	693a      	ldr	r2, [r7, #16]
 8001762:	4613      	mov	r3, r2
 8001764:	005b      	lsls	r3, r3, #1
 8001766:	4413      	add	r3, r2
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	4413      	add	r3, r2
 800176c:	18ca      	adds	r2, r1, r3
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	4413      	add	r3, r2
 8001772:	781b      	ldrb	r3, [r3, #0]
 8001774:	73fb      	strb	r3, [r7, #15]
                if((line >> i) & 0x01)
 8001776:	7bfa      	ldrb	r2, [r7, #15]
 8001778:	69bb      	ldr	r3, [r7, #24]
 800177a:	fa42 f303 	asr.w	r3, r2, r3
 800177e:	f003 0301 	and.w	r3, r3, #1
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <draw_fast_char+0xda>
                    this_px = colour;
 8001786:	683b      	ldr	r3, [r7, #0]
 8001788:	61fb      	str	r3, [r7, #28]
            }



            //Draw this pixel
            lcd_write_data(this_px >> 8);
 800178a:	69fb      	ldr	r3, [r7, #28]
 800178c:	0a1b      	lsrs	r3, r3, #8
 800178e:	b2db      	uxtb	r3, r3
 8001790:	4618      	mov	r0, r3
 8001792:	f7ff fc9b 	bl	80010cc <lcd_write_data>
            lcd_write_data(this_px & 0xFF);
 8001796:	69fb      	ldr	r3, [r7, #28]
 8001798:	b2db      	uxtb	r3, r3
 800179a:	4618      	mov	r0, r3
 800179c:	f7ff fc96 	bl	80010cc <lcd_write_data>
        for(int j = width-1; j >= 0; j--) {
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	3b01      	subs	r3, #1
 80017a4:	617b      	str	r3, [r7, #20]
 80017a6:	697b      	ldr	r3, [r7, #20]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	dad6      	bge.n	800175a <draw_fast_char+0xaa>
    for(int i=0; i < height; i++ ) {
 80017ac:	69bb      	ldr	r3, [r7, #24]
 80017ae:	3301      	adds	r3, #1
 80017b0:	61bb      	str	r3, [r7, #24]
 80017b2:	7b7b      	ldrb	r3, [r7, #13]
 80017b4:	461a      	mov	r2, r3
 80017b6:	69bb      	ldr	r3, [r7, #24]
 80017b8:	4293      	cmp	r3, r2
 80017ba:	dbbc      	blt.n	8001736 <draw_fast_char+0x86>
        }
    }


    //Return CSX to high
    HAL_GPIO_WritePin(CSX_PORT, CSX_PIN, GPIO_PIN_SET);
 80017bc:	2201      	movs	r2, #1
 80017be:	2108      	movs	r1, #8
 80017c0:	4803      	ldr	r0, [pc, #12]	@ (80017d0 <draw_fast_char+0x120>)
 80017c2:	f002 ffcb 	bl	800475c <HAL_GPIO_WritePin>
}
 80017c6:	bf00      	nop
 80017c8:	3724      	adds	r7, #36	@ 0x24
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd90      	pop	{r4, r7, pc}
 80017ce:	bf00      	nop
 80017d0:	40020000 	.word	0x40020000
 80017d4:	0800b800 	.word	0x0800b800

080017d8 <draw_string>:

/*
 * Writes a string to the display as an array of chars at position x, y with
 * a given colour and size.
 */
void draw_string(char x, char y, unsigned int colour, char size, char *str) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b088      	sub	sp, #32
 80017dc:	af02      	add	r7, sp, #8
 80017de:	603a      	str	r2, [r7, #0]
 80017e0:	461a      	mov	r2, r3
 80017e2:	4603      	mov	r3, r0
 80017e4:	71fb      	strb	r3, [r7, #7]
 80017e6:	460b      	mov	r3, r1
 80017e8:	71bb      	strb	r3, [r7, #6]
 80017ea:	4613      	mov	r3, r2
 80017ec:	717b      	strb	r3, [r7, #5]

    //Work out the size of each character
    int char_width = size * 9;
 80017ee:	797a      	ldrb	r2, [r7, #5]
 80017f0:	4613      	mov	r3, r2
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	4413      	add	r3, r2
 80017f6:	613b      	str	r3, [r7, #16]
    //Iterate through each character in the string
    int counter = 0;
 80017f8:	2300      	movs	r3, #0
 80017fa:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 80017fc:	e015      	b.n	800182a <draw_string+0x52>
        //Calculate character position
        int char_pos = x + (counter * char_width);
 80017fe:	79fa      	ldrb	r2, [r7, #7]
 8001800:	697b      	ldr	r3, [r7, #20]
 8001802:	6939      	ldr	r1, [r7, #16]
 8001804:	fb01 f303 	mul.w	r3, r1, r3
 8001808:	4413      	add	r3, r2
 800180a:	60fb      	str	r3, [r7, #12]
        //Write char to the display
        draw_char(char_pos, y, str[counter], colour, size);
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	b2d8      	uxtb	r0, r3
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	6a3a      	ldr	r2, [r7, #32]
 8001814:	4413      	add	r3, r2
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	79b9      	ldrb	r1, [r7, #6]
 800181a:	797b      	ldrb	r3, [r7, #5]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	f7ff feba 	bl	8001598 <draw_char>
        //Next character
        counter++;
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	3301      	adds	r3, #1
 8001828:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	6a3a      	ldr	r2, [r7, #32]
 800182e:	4413      	add	r3, r2
 8001830:	781b      	ldrb	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	d1e3      	bne.n	80017fe <draw_string+0x26>
    }
}
 8001836:	bf00      	nop
 8001838:	bf00      	nop
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}

08001840 <draw_fast_string>:
 * Draws a string using the draw_fast_char() function.
 * This will not preserve any background image and so a custom background
 * colour should be provided.
 * NOTE: Can only be the regular sized font. No scaling.
 */
void draw_fast_string(char x, char y, unsigned int colour, unsigned int bg_colour, char *str) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b088      	sub	sp, #32
 8001844:	af02      	add	r7, sp, #8
 8001846:	60ba      	str	r2, [r7, #8]
 8001848:	607b      	str	r3, [r7, #4]
 800184a:	4603      	mov	r3, r0
 800184c:	73fb      	strb	r3, [r7, #15]
 800184e:	460b      	mov	r3, r1
 8001850:	73bb      	strb	r3, [r7, #14]
    //Iterate through each character in the string
    int counter = 0;
 8001852:	2300      	movs	r3, #0
 8001854:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8001856:	e015      	b.n	8001884 <draw_fast_string+0x44>
        //Write char to the display
        draw_fast_char(x + (counter * 9), y, str[counter], colour, bg_colour);
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	b2db      	uxtb	r3, r3
 800185c:	461a      	mov	r2, r3
 800185e:	00d2      	lsls	r2, r2, #3
 8001860:	4413      	add	r3, r2
 8001862:	b2da      	uxtb	r2, r3
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	4413      	add	r3, r2
 8001868:	b2d8      	uxtb	r0, r3
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	6a3a      	ldr	r2, [r7, #32]
 800186e:	4413      	add	r3, r2
 8001870:	781a      	ldrb	r2, [r3, #0]
 8001872:	7bb9      	ldrb	r1, [r7, #14]
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	9300      	str	r3, [sp, #0]
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	f7ff ff19 	bl	80016b0 <draw_fast_char>
        //Next character
        counter++;
 800187e:	697b      	ldr	r3, [r7, #20]
 8001880:	3301      	adds	r3, #1
 8001882:	617b      	str	r3, [r7, #20]
    while(str[counter] != '\0') {
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	6a3a      	ldr	r2, [r7, #32]
 8001888:	4413      	add	r3, r2
 800188a:	781b      	ldrb	r3, [r3, #0]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d1e3      	bne.n	8001858 <draw_fast_string+0x18>
    }
}
 8001890:	bf00      	nop
 8001892:	bf00      	nop
 8001894:	3718      	adds	r7, #24
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}

0800189a <Read16>:
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @param:		register address in hexadecimal
 * @retval:		16 bit unsigned integer that represents the register's contents.
 */
uint16_t Read16(INA219_t *ina219, uint8_t Register)
{
 800189a:	b580      	push	{r7, lr}
 800189c:	b088      	sub	sp, #32
 800189e:	af04      	add	r7, sp, #16
 80018a0:	6078      	str	r0, [r7, #4]
 80018a2:	460b      	mov	r3, r1
 80018a4:	70fb      	strb	r3, [r7, #3]
    uint8_t Value[2] = {0}; // Khởi tạo để tránh giá trị rác nếu đọc lỗi
 80018a6:	2300      	movs	r3, #0
 80018a8:	81bb      	strh	r3, [r7, #12]
    HAL_StatusTypeDef status;
    status = HAL_I2C_Mem_Read(ina219->ina219_i2c, (INA219_ADDRESS << 1), Register, 1, Value, 2, 100); // Timeout ngắn hơn để debug
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6818      	ldr	r0, [r3, #0]
 80018ae:	78fb      	ldrb	r3, [r7, #3]
 80018b0:	b29a      	uxth	r2, r3
 80018b2:	2364      	movs	r3, #100	@ 0x64
 80018b4:	9302      	str	r3, [sp, #8]
 80018b6:	2302      	movs	r3, #2
 80018b8:	9301      	str	r3, [sp, #4]
 80018ba:	f107 030c 	add.w	r3, r7, #12
 80018be:	9300      	str	r3, [sp, #0]
 80018c0:	2301      	movs	r3, #1
 80018c2:	2180      	movs	r1, #128	@ 0x80
 80018c4:	f003 fcd2 	bl	800526c <HAL_I2C_Mem_Read>
 80018c8:	4603      	mov	r3, r0
 80018ca:	73fb      	strb	r3, [r7, #15]

    if (status != HAL_OK) {
 80018cc:	7bfb      	ldrb	r3, [r7, #15]
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d002      	beq.n	80018d8 <Read16+0x3e>
        // Có thể in lỗi ra UART ở đây để debug
        // printf("I2C Read Error from reg 0x%02X, status: %d\n", Register, status);
        return 0xFFFF; // Trả về giá trị đặc biệt báo lỗi
 80018d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80018d6:	e008      	b.n	80018ea <Read16+0x50>
    }
    return ((Value[0] << 8) | Value[1]);
 80018d8:	7b3b      	ldrb	r3, [r7, #12]
 80018da:	b21b      	sxth	r3, r3
 80018dc:	021b      	lsls	r3, r3, #8
 80018de:	b21a      	sxth	r2, r3
 80018e0:	7b7b      	ldrb	r3, [r7, #13]
 80018e2:	b21b      	sxth	r3, r3
 80018e4:	4313      	orrs	r3, r2
 80018e6:	b21b      	sxth	r3, r3
 80018e8:	b29b      	uxth	r3, r3
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3710      	adds	r7, #16
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}

080018f2 <Write16>:
				  HAL_BUSY     = 0x02U,
				  HAL_TIMEOUT  = 0x03U
				} HAL_StatusTypeDef;
 */
HAL_StatusTypeDef Write16(INA219_t *ina219, uint8_t Register, uint16_t Value)
{
 80018f2:	b580      	push	{r7, lr}
 80018f4:	b088      	sub	sp, #32
 80018f6:	af04      	add	r7, sp, #16
 80018f8:	6078      	str	r0, [r7, #4]
 80018fa:	460b      	mov	r3, r1
 80018fc:	70fb      	strb	r3, [r7, #3]
 80018fe:	4613      	mov	r3, r2
 8001900:	803b      	strh	r3, [r7, #0]
	uint8_t addr[2];
	addr[0] = (Value >> 8) & 0xff;  // upper byte
 8001902:	883b      	ldrh	r3, [r7, #0]
 8001904:	0a1b      	lsrs	r3, r3, #8
 8001906:	b29b      	uxth	r3, r3
 8001908:	b2db      	uxtb	r3, r3
 800190a:	733b      	strb	r3, [r7, #12]
	addr[1] = (Value >> 0) & 0xff; // lower byte
 800190c:	883b      	ldrh	r3, [r7, #0]
 800190e:	b2db      	uxtb	r3, r3
 8001910:	737b      	strb	r3, [r7, #13]
	return HAL_I2C_Mem_Write(ina219->ina219_i2c, (INA219_ADDRESS<<1), Register, 1, (uint8_t*)addr, 2, 1000);
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6818      	ldr	r0, [r3, #0]
 8001916:	78fb      	ldrb	r3, [r7, #3]
 8001918:	b29a      	uxth	r2, r3
 800191a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800191e:	9302      	str	r3, [sp, #8]
 8001920:	2302      	movs	r3, #2
 8001922:	9301      	str	r3, [sp, #4]
 8001924:	f107 030c 	add.w	r3, r7, #12
 8001928:	9300      	str	r3, [sp, #0]
 800192a:	2301      	movs	r3, #1
 800192c:	2180      	movs	r1, #128	@ 0x80
 800192e:	f003 fba3 	bl	8005078 <HAL_I2C_Mem_Write>
 8001932:	4603      	mov	r3, r0
}
 8001934:	4618      	mov	r0, r3
 8001936:	3710      	adds	r7, #16
 8001938:	46bd      	mov	sp, r7
 800193a:	bd80      	pop	{r7, pc}

0800193c <INA219_ReadBusVoltage>:
 * @brief: 		This function will read the battery voltage level being read.
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:		Returns voltage level in mili-volts
 */
uint16_t INA219_ReadBusVoltage(INA219_t *ina219)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b084      	sub	sp, #16
 8001940:	af00      	add	r7, sp, #0
 8001942:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_BUSVOLTAGE);
 8001944:	2102      	movs	r1, #2
 8001946:	6878      	ldr	r0, [r7, #4]
 8001948:	f7ff ffa7 	bl	800189a <Read16>
 800194c:	4603      	mov	r3, r0
 800194e:	81fb      	strh	r3, [r7, #14]

	return ((result >> 3  ) * 4);
 8001950:	89fb      	ldrh	r3, [r7, #14]
 8001952:	08db      	lsrs	r3, r3, #3
 8001954:	b29b      	uxth	r3, r3
 8001956:	009b      	lsls	r3, r3, #2
 8001958:	b29b      	uxth	r3, r3

}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}

08001962 <INA219_ReadCurrent_raw>:
 *  @brief:	  	Gets the raw current value (16-bit signed integer, so +-32767)
 *  @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 *  @retval:	The raw current reading
 */
int16_t INA219_ReadCurrent_raw(INA219_t *ina219)
{
 8001962:	b580      	push	{r7, lr}
 8001964:	b084      	sub	sp, #16
 8001966:	af00      	add	r7, sp, #0
 8001968:	6078      	str	r0, [r7, #4]
	int16_t result = Read16(ina219, INA219_REG_CURRENT);
 800196a:	2104      	movs	r1, #4
 800196c:	6878      	ldr	r0, [r7, #4]
 800196e:	f7ff ff94 	bl	800189a <Read16>
 8001972:	4603      	mov	r3, r0
 8001974:	81fb      	strh	r3, [r7, #14]

	return (result );
 8001976:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
}
 800197a:	4618      	mov	r0, r3
 800197c:	3710      	adds	r7, #16
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <INA219_ReadCurrent>:
 *          	config settings and current LSB
 * @param:		Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @return: 	The current reading convereted to milliamps
 */
int16_t INA219_ReadCurrent(INA219_t *ina219)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b084      	sub	sp, #16
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
	int16_t result = INA219_ReadCurrent_raw(ina219);
 800198c:	6878      	ldr	r0, [r7, #4]
 800198e:	f7ff ffe8 	bl	8001962 <INA219_ReadCurrent_raw>
 8001992:	4603      	mov	r3, r0
 8001994:	81fb      	strh	r3, [r7, #14]

	return (result / ina219_currentDivider_mA );
 8001996:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800199a:	4a05      	ldr	r2, [pc, #20]	@ (80019b0 <INA219_ReadCurrent+0x2c>)
 800199c:	f9b2 2000 	ldrsh.w	r2, [r2]
 80019a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80019a4:	b21b      	sxth	r3, r3
}
 80019a6:	4618      	mov	r0, r3
 80019a8:	3710      	adds	r7, #16
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000210 	.word	0x20000210

080019b4 <INA219_ReadPower>:
 * 			Power multiplier is initialize in the calibration function.
 * @param:	Pointer to the device object that was made from the struct. EX:  (&ina219)
 * @retval:	Returns power level in mili-watts
 */
uint16_t INA219_ReadPower(INA219_t *ina219)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b084      	sub	sp, #16
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	6078      	str	r0, [r7, #4]
	uint16_t result = Read16(ina219, INA219_REG_POWER );
 80019bc:	2103      	movs	r1, #3
 80019be:	6878      	ldr	r0, [r7, #4]
 80019c0:	f7ff ff6b 	bl	800189a <Read16>
 80019c4:	4603      	mov	r3, r0
 80019c6:	81fb      	strh	r3, [r7, #14]
	result = result * ina219_powerMultiplier_mW; // power is the power register times the power_LSB (power multiplier)
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <INA219_ReadPower+0x30>)
 80019ca:	f9b3 3000 	ldrsh.w	r3, [r3]
 80019ce:	b29b      	uxth	r3, r3
 80019d0:	89fa      	ldrh	r2, [r7, #14]
 80019d2:	fb12 f303 	smulbb	r3, r2, r3
 80019d6:	81fb      	strh	r3, [r7, #14]
	return (result);
 80019d8:	89fb      	ldrh	r3, [r7, #14]
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	20000212 	.word	0x20000212

080019e8 <INA219_HealthCheck>:
 * 				the program that called the health check function what state our battery is
 * 				at and whether we have entered a "LOW" state. This way the program can take
 * 				appropriate action.
 */
enum BatteryState INA219_HealthCheck(INA219_t *ina219,float batteryPercentageThreshold,float batteryPercentage)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	60f8      	str	r0, [r7, #12]
 80019f0:	ed87 0a02 	vstr	s0, [r7, #8]
 80019f4:	edc7 0a01 	vstr	s1, [r7, #4]
	switch(batteryState)
 80019f8:	4b1e      	ldr	r3, [pc, #120]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 80019fa:	781b      	ldrb	r3, [r3, #0]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d01b      	beq.n	8001a38 <INA219_HealthCheck+0x50>
 8001a00:	2b02      	cmp	r3, #2
 8001a02:	dc2a      	bgt.n	8001a5a <INA219_HealthCheck+0x72>
 8001a04:	2b00      	cmp	r3, #0
 8001a06:	d002      	beq.n	8001a0e <INA219_HealthCheck+0x26>
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d004      	beq.n	8001a16 <INA219_HealthCheck+0x2e>
 8001a0c:	e025      	b.n	8001a5a <INA219_HealthCheck+0x72>
	{
		case (Battery_START):
			/* Enter your start up functionality here */
			batteryState = Battery_OK;
 8001a0e:	4b19      	ldr	r3, [pc, #100]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a10:	2201      	movs	r2, #1
 8001a12:	701a      	strb	r2, [r3, #0]
			break;
 8001a14:	e025      	b.n	8001a62 <INA219_HealthCheck+0x7a>
		case (Battery_OK):
			/* Enter your battery OK state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001a16:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a1a:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a1e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a26:	dd03      	ble.n	8001a30 <INA219_HealthCheck+0x48>
			{
				batteryState = Battery_OK;
 8001a28:	4b12      	ldr	r3, [pc, #72]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001a2e:	e018      	b.n	8001a62 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001a30:	4b10      	ldr	r3, [pc, #64]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a32:	2202      	movs	r2, #2
 8001a34:	701a      	strb	r2, [r3, #0]
			break;
 8001a36:	e014      	b.n	8001a62 <INA219_HealthCheck+0x7a>
		case (Battery_LOW):
			/* Enter your battery LOW state functionality here */
			if(batteryPercentage > batteryPercentageThreshold) // is battery life below given threshold?
 8001a38:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a3c:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a48:	dd03      	ble.n	8001a52 <INA219_HealthCheck+0x6a>
			{
				batteryState = Battery_OK;
 8001a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a4c:	2201      	movs	r2, #1
 8001a4e:	701a      	strb	r2, [r3, #0]
			}
			else
			{
				 batteryState = Battery_LOW;
			}
			break;
 8001a50:	e007      	b.n	8001a62 <INA219_HealthCheck+0x7a>
				 batteryState = Battery_LOW;
 8001a52:	4b08      	ldr	r3, [pc, #32]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a54:	2202      	movs	r2, #2
 8001a56:	701a      	strb	r2, [r3, #0]
			break;
 8001a58:	e003      	b.n	8001a62 <INA219_HealthCheck+0x7a>
		default:
			/*
			 * If program encounters a bug or a value outside what is expected we go here.
			 * Feel free to add functionality if needed.
			*/
			batteryState = Battery_START;
 8001a5a:	4b06      	ldr	r3, [pc, #24]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	701a      	strb	r2, [r3, #0]
			break;
 8001a60:	bf00      	nop
	}
	return batteryState;
 8001a62:	4b04      	ldr	r3, [pc, #16]	@ (8001a74 <INA219_HealthCheck+0x8c>)
 8001a64:	781b      	ldrb	r3, [r3, #0]

}
 8001a66:	4618      	mov	r0, r3
 8001a68:	3714      	adds	r7, #20
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a70:	4770      	bx	lr
 8001a72:	bf00      	nop
 8001a74:	20000214 	.word	0x20000214

08001a78 <INA219_Reset>:

void INA219_Reset(INA219_t *ina219)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
	Write16(ina219, INA219_REG_CONFIG, INA219_CONFIG_RESET);
 8001a80:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001a84:	2100      	movs	r1, #0
 8001a86:	6878      	ldr	r0, [r7, #4]
 8001a88:	f7ff ff33 	bl	80018f2 <Write16>
	HAL_Delay(1);
 8001a8c:	2001      	movs	r0, #1
 8001a8e:	f002 fb7b 	bl	8004188 <HAL_Delay>
}
 8001a92:	bf00      	nop
 8001a94:	3708      	adds	r7, #8
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd80      	pop	{r7, pc}

08001a9a <INA219_setCalibration>:

void INA219_setCalibration(INA219_t *ina219, uint16_t CalibrationData)
{
 8001a9a:	b580      	push	{r7, lr}
 8001a9c:	b082      	sub	sp, #8
 8001a9e:	af00      	add	r7, sp, #0
 8001aa0:	6078      	str	r0, [r7, #4]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CALIBRATION, CalibrationData);
 8001aa6:	887b      	ldrh	r3, [r7, #2]
 8001aa8:	461a      	mov	r2, r3
 8001aaa:	2105      	movs	r1, #5
 8001aac:	6878      	ldr	r0, [r7, #4]
 8001aae:	f7ff ff20 	bl	80018f2 <Write16>
}
 8001ab2:	bf00      	nop
 8001ab4:	3708      	adds	r7, #8
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <INA219_setConfig>:
	uint16_t result = Read16(ina219, INA219_REG_CONFIG);
	return result;
}

void INA219_setConfig(INA219_t *ina219, uint16_t Config)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	807b      	strh	r3, [r7, #2]
	Write16(ina219, INA219_REG_CONFIG, Config);
 8001ac6:	887b      	ldrh	r3, [r7, #2]
 8001ac8:	461a      	mov	r2, r3
 8001aca:	2100      	movs	r1, #0
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff10 	bl	80018f2 <Write16>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
	...

08001adc <INA219_setCalibration_32V_2A>:

void INA219_setCalibration_32V_2A(INA219_t *ina219)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
	uint16_t config = INA219_CONFIG_BVOLTAGERANGE_32V |
 8001ae4:	f643 139f 	movw	r3, #14751	@ 0x399f
 8001ae8:	81fb      	strh	r3, [r7, #14]
	             INA219_CONFIG_GAIN_8_320MV | INA219_CONFIG_BADCRES_12BIT |
	             INA219_CONFIG_SADCRES_12BIT_1S_532US |
	             INA219_CONFIG_MODE_SANDBVOLT_CONTINUOUS;

	ina219_calibrationValue = 4096;
 8001aea:	4b0c      	ldr	r3, [pc, #48]	@ (8001b1c <INA219_setCalibration_32V_2A+0x40>)
 8001aec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001af0:	801a      	strh	r2, [r3, #0]
	ina219_currentDivider_mA = 10; // Current LSB = 100uA per bit (1000/100 = 10)
 8001af2:	4b0b      	ldr	r3, [pc, #44]	@ (8001b20 <INA219_setCalibration_32V_2A+0x44>)
 8001af4:	220a      	movs	r2, #10
 8001af6:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 2; // Power LSB = 1mW per bit (2/1)
 8001af8:	4b0a      	ldr	r3, [pc, #40]	@ (8001b24 <INA219_setCalibration_32V_2A+0x48>)
 8001afa:	2202      	movs	r2, #2
 8001afc:	801a      	strh	r2, [r3, #0]

	INA219_setCalibration(ina219, ina219_calibrationValue);
 8001afe:	4b07      	ldr	r3, [pc, #28]	@ (8001b1c <INA219_setCalibration_32V_2A+0x40>)
 8001b00:	881b      	ldrh	r3, [r3, #0]
 8001b02:	4619      	mov	r1, r3
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7ff ffc8 	bl	8001a9a <INA219_setCalibration>
	INA219_setConfig(ina219, config);
 8001b0a:	89fb      	ldrh	r3, [r7, #14]
 8001b0c:	4619      	mov	r1, r3
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f7ff ffd3 	bl	8001aba <INA219_setConfig>
}
 8001b14:	bf00      	nop
 8001b16:	3710      	adds	r7, #16
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	bd80      	pop	{r7, pc}
 8001b1c:	2000020e 	.word	0x2000020e
 8001b20:	20000210 	.word	0x20000210
 8001b24:	20000212 	.word	0x20000212

08001b28 <INA219_Init>:
			break;
	}
}

uint8_t INA219_Init(INA219_t *ina219, I2C_HandleTypeDef *i2c, uint8_t Address)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	b086      	sub	sp, #24
 8001b2c:	af00      	add	r7, sp, #0
 8001b2e:	60f8      	str	r0, [r7, #12]
 8001b30:	60b9      	str	r1, [r7, #8]
 8001b32:	4613      	mov	r3, r2
 8001b34:	71fb      	strb	r3, [r7, #7]
	isFirst = false; // set global var used by INA219_GetMiliWattMinutes
 8001b36:	4b1a      	ldr	r3, [pc, #104]	@ (8001ba0 <INA219_Init+0x78>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]
	ina219->ina219_i2c = i2c;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	68ba      	ldr	r2, [r7, #8]
 8001b40:	601a      	str	r2, [r3, #0]
	ina219->Address = Address;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	79fa      	ldrb	r2, [r7, #7]
 8001b46:	711a      	strb	r2, [r3, #4]

	ina219_currentDivider_mA = 0;
 8001b48:	4b16      	ldr	r3, [pc, #88]	@ (8001ba4 <INA219_Init+0x7c>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	801a      	strh	r2, [r3, #0]
	ina219_powerMultiplier_mW = 0;
 8001b4e:	4b16      	ldr	r3, [pc, #88]	@ (8001ba8 <INA219_Init+0x80>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	801a      	strh	r2, [r3, #0]

	uint8_t ina219_isReady = HAL_I2C_IsDeviceReady(i2c, (Address << 1), 3, 2);
 8001b54:	79fb      	ldrb	r3, [r7, #7]
 8001b56:	b29b      	uxth	r3, r3
 8001b58:	005b      	lsls	r3, r3, #1
 8001b5a:	b299      	uxth	r1, r3
 8001b5c:	2302      	movs	r3, #2
 8001b5e:	2203      	movs	r2, #3
 8001b60:	68b8      	ldr	r0, [r7, #8]
 8001b62:	f003 fdb5 	bl	80056d0 <HAL_I2C_IsDeviceReady>
 8001b66:	4603      	mov	r3, r0
 8001b68:	75fb      	strb	r3, [r7, #23]

	if(ina219_isReady == HAL_OK)
 8001b6a:	7dfb      	ldrb	r3, [r7, #23]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d111      	bne.n	8001b94 <INA219_Init+0x6c>
	{
		// just to initialize our state machine.
		//The numbers 0.0f and 1.0f is just to call the healthcheck function.
		//Feel free to change this if you want. This function should be called in your main function to be polled.
		batteryState = Battery_START; // go to starting position.
 8001b70:	4b0e      	ldr	r3, [pc, #56]	@ (8001bac <INA219_Init+0x84>)
 8001b72:	2200      	movs	r2, #0
 8001b74:	701a      	strb	r2, [r3, #0]
		INA219_HealthCheck(ina219,0.0f,1.0f );
 8001b76:	eef7 0a00 	vmov.f32	s1, #112	@ 0x3f800000  1.0
 8001b7a:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8001bb0 <INA219_Init+0x88>
 8001b7e:	68f8      	ldr	r0, [r7, #12]
 8001b80:	f7ff ff32 	bl	80019e8 <INA219_HealthCheck>
		INA219_Reset(ina219);
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff ff77 	bl	8001a78 <INA219_Reset>
		INA219_setCalibration_32V_2A(ina219);
 8001b8a:	68f8      	ldr	r0, [r7, #12]
 8001b8c:	f7ff ffa6 	bl	8001adc <INA219_setCalibration_32V_2A>

		return 1;
 8001b90:	2301      	movs	r3, #1
 8001b92:	e000      	b.n	8001b96 <INA219_Init+0x6e>
	}

	else
	{
		return 0;
 8001b94:	2300      	movs	r3, #0
	}
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	2000020c 	.word	0x2000020c
 8001ba4:	20000210 	.word	0x20000210
 8001ba8:	20000212 	.word	0x20000212
 8001bac:	20000214 	.word	0x20000214
 8001bb0:	00000000 	.word	0x00000000

08001bb4 <Write_MFRC522>:
 * Function Nameï¼šWrite_MFRC5200
 * Function Description: To a certain MFRC522 register to write a byte of data
 * Input Parametersï¼šaddr - register address; val - the value to be written
 * Return value: None
 */
void Write_MFRC522(uint8_t addr, uint8_t val) {
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	4603      	mov	r3, r0
 8001bbc:	460a      	mov	r2, r1
 8001bbe:	71fb      	strb	r3, [r7, #7]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	71bb      	strb	r3, [r7, #6]
  //uint32_t rx_bits;
	uint8_t addr_bits = (((addr<<1) & 0x7E));
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	005b      	lsls	r3, r3, #1
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001bce:	b2db      	uxtb	r3, r3
 8001bd0:	73fb      	strb	r3, [r7, #15]
  //u_char rx_bits;
  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(MFRC522_SDA_GPIO_Port, MFRC522_SDA_Pin, GPIO_PIN_RESET);
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001bd8:	480d      	ldr	r0, [pc, #52]	@ (8001c10 <Write_MFRC522+0x5c>)
 8001bda:	f002 fdbf 	bl	800475c <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and clear the MSb to indicate a write
  // - bottom 8 bits are the data bits being sent for that address, we send
  //   them as is
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, (((addr << 1) & 0x7E) << 8) |  val );
  //HAL_SPI_TransmitReceive(&hspi2, (((addr << 1) & 0x7E) << 8) |  val , rx_bits, 1, 500);
  HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001bde:	f107 010f 	add.w	r1, r7, #15
 8001be2:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001be6:	2201      	movs	r2, #1
 8001be8:	480a      	ldr	r0, [pc, #40]	@ (8001c14 <Write_MFRC522+0x60>)
 8001bea:	f005 f870 	bl	8006cce <HAL_SPI_Transmit>
  HAL_SPI_Transmit(&hspi2, &val, 1, 500);
 8001bee:	1db9      	adds	r1, r7, #6
 8001bf0:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	4807      	ldr	r0, [pc, #28]	@ (8001c14 <Write_MFRC522+0x60>)
 8001bf8:	f005 f869 	bl	8006cce <HAL_SPI_Transmit>
  // clear the select line-- we are done here
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(MFRC522_SDA_GPIO_Port, MFRC522_SDA_Pin, GPIO_PIN_SET);
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c02:	4803      	ldr	r0, [pc, #12]	@ (8001c10 <Write_MFRC522+0x5c>)
 8001c04:	f002 fdaa 	bl	800475c <HAL_GPIO_WritePin>

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
}
 8001c08:	bf00      	nop
 8001c0a:	3710      	adds	r7, #16
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	bd80      	pop	{r7, pc}
 8001c10:	40020400 	.word	0x40020400
 8001c14:	200002c4 	.word	0x200002c4

08001c18 <Read_MFRC522>:
 * Function Name: Read_MFRC522
 * Description: From a certain MFRC522 read a byte of data register
 * Input Parameters: addr - register address
 * Returns: a byte of data read from the
 */
uint8_t Read_MFRC522(uint8_t addr) {
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b084      	sub	sp, #16
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	4603      	mov	r3, r0
 8001c20:	71fb      	strb	r3, [r7, #7]
  //uint32_t rx_bits;
	uint8_t rx_bits;
	uint8_t addr_bits = (((addr<<1) & 0x7E) | 0x80);
 8001c22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c26:	005b      	lsls	r3, r3, #1
 8001c28:	b25b      	sxtb	r3, r3
 8001c2a:	f003 037e 	and.w	r3, r3, #126	@ 0x7e
 8001c2e:	b25b      	sxtb	r3, r3
 8001c30:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	b2db      	uxtb	r3, r3
 8001c38:	73bb      	strb	r3, [r7, #14]

  // set the select line so we can start transferring
//  MSS_SPI_set_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );
  HAL_GPIO_WritePin(MFRC522_SDA_GPIO_Port, MFRC522_SDA_Pin, GPIO_PIN_RESET);
 8001c3a:	2200      	movs	r2, #0
 8001c3c:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c40:	480e      	ldr	r0, [pc, #56]	@ (8001c7c <Read_MFRC522+0x64>)
 8001c42:	f002 fd8b 	bl	800475c <HAL_GPIO_WritePin>
  //   1 bit, clear the LSb, and set the MSb to indicate a read
  // - bottom 8 bits are all 0s on a read per 8.1.2.1 Table 6
//  rx_bits = MSS_SPI_transfer_frame( &g_mss_spi1, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 );
  //HAL_SPI_TransmitReceive(&hspi2, ((((addr << 1) & 0x7E) | 0x80) << 8) | 0x00 , rx_bits, 1, 500);
//HAL_SPI_Transmit(&hspi2, (unsigned char*) ((((addr<<1) & 0x7E) | 0x80)), 1, 500);
HAL_SPI_Transmit(&hspi2, &addr_bits, 1, 500);
 8001c46:	f107 010e 	add.w	r1, r7, #14
 8001c4a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c4e:	2201      	movs	r2, #1
 8001c50:	480b      	ldr	r0, [pc, #44]	@ (8001c80 <Read_MFRC522+0x68>)
 8001c52:	f005 f83c 	bl	8006cce <HAL_SPI_Transmit>

  HAL_SPI_Receive(&hspi2, &rx_bits, 1, 500);
 8001c56:	f107 010f 	add.w	r1, r7, #15
 8001c5a:	f44f 73fa 	mov.w	r3, #500	@ 0x1f4
 8001c5e:	2201      	movs	r2, #1
 8001c60:	4807      	ldr	r0, [pc, #28]	@ (8001c80 <Read_MFRC522+0x68>)
 8001c62:	f005 f978 	bl	8006f56 <HAL_SPI_Receive>
//  MSS_SPI_clear_slave_select( &g_mss_spi1, MSS_SPI_SLAVE_0 );

  // burn some time
  // volatile uint32_t ticks;
  // for(ticks=0; ticks < 5000; ++ticks);
  HAL_GPIO_WritePin(MFRC522_SDA_GPIO_Port, MFRC522_SDA_Pin, GPIO_PIN_SET);
 8001c66:	2201      	movs	r2, #1
 8001c68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001c6c:	4803      	ldr	r0, [pc, #12]	@ (8001c7c <Read_MFRC522+0x64>)
 8001c6e:	f002 fd75 	bl	800475c <HAL_GPIO_WritePin>

	return (uint8_t) rx_bits; // return the rx bits, casting to an 8 bit int and chopping off the upper 24 bits
 8001c72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3710      	adds	r7, #16
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}
 8001c7c:	40020400 	.word	0x40020400
 8001c80:	200002c4 	.word	0x200002c4

08001c84 <SetBitMask>:
 * Description: Set RC522 register bit
 * Input parameters: reg - register address; mask - set value
 * Return value: None
 */
void SetBitMask(uint8_t reg, uint8_t mask)
{
 8001c84:	b580      	push	{r7, lr}
 8001c86:	b084      	sub	sp, #16
 8001c88:	af00      	add	r7, sp, #0
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	460a      	mov	r2, r1
 8001c8e:	71fb      	strb	r3, [r7, #7]
 8001c90:	4613      	mov	r3, r2
 8001c92:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001c94:	79fb      	ldrb	r3, [r7, #7]
 8001c96:	4618      	mov	r0, r3
 8001c98:	f7ff ffbe 	bl	8001c18 <Read_MFRC522>
 8001c9c:	4603      	mov	r3, r0
 8001c9e:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp | mask);  // set bit mask
 8001ca0:	7bfa      	ldrb	r2, [r7, #15]
 8001ca2:	79bb      	ldrb	r3, [r7, #6]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	b2da      	uxtb	r2, r3
 8001ca8:	79fb      	ldrb	r3, [r7, #7]
 8001caa:	4611      	mov	r1, r2
 8001cac:	4618      	mov	r0, r3
 8001cae:	f7ff ff81 	bl	8001bb4 <Write_MFRC522>
}
 8001cb2:	bf00      	nop
 8001cb4:	3710      	adds	r7, #16
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bd80      	pop	{r7, pc}

08001cba <ClearBitMask>:
 * Description: clear RC522 register bit
 * Input parameters: reg - register address; mask - clear bit value
 * Return value: None
*/
void ClearBitMask(uint8_t reg, uint8_t mask)
{
 8001cba:	b580      	push	{r7, lr}
 8001cbc:	b084      	sub	sp, #16
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	460a      	mov	r2, r1
 8001cc4:	71fb      	strb	r3, [r7, #7]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	71bb      	strb	r3, [r7, #6]
	uint8_t tmp;
    tmp = Read_MFRC522(reg);
 8001cca:	79fb      	ldrb	r3, [r7, #7]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff ffa3 	bl	8001c18 <Read_MFRC522>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	73fb      	strb	r3, [r7, #15]
    Write_MFRC522(reg, tmp & (~mask));  // clear bit mask
 8001cd6:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001cda:	43db      	mvns	r3, r3
 8001cdc:	b25a      	sxtb	r2, r3
 8001cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	b25b      	sxtb	r3, r3
 8001ce6:	b2da      	uxtb	r2, r3
 8001ce8:	79fb      	ldrb	r3, [r7, #7]
 8001cea:	4611      	mov	r1, r2
 8001cec:	4618      	mov	r0, r3
 8001cee:	f7ff ff61 	bl	8001bb4 <Write_MFRC522>
}
 8001cf2:	bf00      	nop
 8001cf4:	3710      	adds	r7, #16
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	bd80      	pop	{r7, pc}

08001cfa <AntennaOn>:
 * Description: Open antennas, each time you start or shut down the natural barrier between the transmitter should be at least 1ms interval
 * Input: None
 * Return value: None
 */
void AntennaOn(void)
{
 8001cfa:	b580      	push	{r7, lr}
 8001cfc:	af00      	add	r7, sp, #0
  SetBitMask(TxControlReg, 0x03);
 8001cfe:	2103      	movs	r1, #3
 8001d00:	2014      	movs	r0, #20
 8001d02:	f7ff ffbf 	bl	8001c84 <SetBitMask>
}
 8001d06:	bf00      	nop
 8001d08:	bd80      	pop	{r7, pc}

08001d0a <MFRC522_Reset>:
 * Description: Reset RC522
 * Input: None
 * Return value: None
 */
void MFRC522_Reset(void)
{
 8001d0a:	b580      	push	{r7, lr}
 8001d0c:	af00      	add	r7, sp, #0
  Write_MFRC522(CommandReg, PCD_RESETPHASE);
 8001d0e:	210f      	movs	r1, #15
 8001d10:	2001      	movs	r0, #1
 8001d12:	f7ff ff4f 	bl	8001bb4 <Write_MFRC522>
}
 8001d16:	bf00      	nop
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <MFRC522_Init>:
 * Description: Initialize RC522
 * Input: None
 * Return value: None
*/
void MFRC522_Init(void)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	af00      	add	r7, sp, #0
//  MSS_GPIO_set_output( MSS_GPIO_1, 1 );
  MFRC522_Reset();
 8001d1e:	f7ff fff4 	bl	8001d0a <MFRC522_Reset>

  // Timer: TPrescaler*TreloadVal/6.78MHz = 24ms
  Write_MFRC522(TModeReg, 0x80); // 0x8D);      // Tauto=1; f(Timer) = 6.78MHz/TPreScaler
 8001d22:	2180      	movs	r1, #128	@ 0x80
 8001d24:	202a      	movs	r0, #42	@ 0x2a
 8001d26:	f7ff ff45 	bl	8001bb4 <Write_MFRC522>
  Write_MFRC522(TPrescalerReg, 0xA9); //0x34); // TModeReg[3..0] + TPrescalerReg
 8001d2a:	21a9      	movs	r1, #169	@ 0xa9
 8001d2c:	202b      	movs	r0, #43	@ 0x2b
 8001d2e:	f7ff ff41 	bl	8001bb4 <Write_MFRC522>
  Write_MFRC522(TReloadRegL, 0x03); //30);
 8001d32:	2103      	movs	r1, #3
 8001d34:	202d      	movs	r0, #45	@ 0x2d
 8001d36:	f7ff ff3d 	bl	8001bb4 <Write_MFRC522>
  Write_MFRC522(TReloadRegH, 0xE8); //0);
 8001d3a:	21e8      	movs	r1, #232	@ 0xe8
 8001d3c:	202c      	movs	r0, #44	@ 0x2c
 8001d3e:	f7ff ff39 	bl	8001bb4 <Write_MFRC522>
  Write_MFRC522(TxAutoReg, 0x40);     // force 100% ASK modulation
 8001d42:	2140      	movs	r1, #64	@ 0x40
 8001d44:	2015      	movs	r0, #21
 8001d46:	f7ff ff35 	bl	8001bb4 <Write_MFRC522>
  Write_MFRC522(ModeReg, 0x3D);       // CRC Initial value 0x6363
 8001d4a:	213d      	movs	r1, #61	@ 0x3d
 8001d4c:	2011      	movs	r0, #17
 8001d4e:	f7ff ff31 	bl	8001bb4 <Write_MFRC522>
  // interrupts, still playing with these
  // Write_MFRC522(CommIEnReg, 0xFF);
  // Write_MFRC522(DivlEnReg, 0xFF);

  // turn antenna on
  AntennaOn();
 8001d52:	f7ff ffd2 	bl	8001cfa <AntennaOn>
}
 8001d56:	bf00      	nop
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <MFRC522_Request>:
 *    0x0800 = Mifare_Pro(X)
 *    0x4403 = Mifare_DESFire
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Request(uint8_t reqMode, uint8_t *TagType)
{
 8001d5a:	b580      	push	{r7, lr}
 8001d5c:	b086      	sub	sp, #24
 8001d5e:	af02      	add	r7, sp, #8
 8001d60:	4603      	mov	r3, r0
 8001d62:	6039      	str	r1, [r7, #0]
 8001d64:	71fb      	strb	r3, [r7, #7]
	uint8_t status;
	uint16_t backBits; // The received data bits

  Write_MFRC522(BitFramingReg, 0x07);   // TxLastBists = BitFramingReg[2..0]
 8001d66:	2107      	movs	r1, #7
 8001d68:	200d      	movs	r0, #13
 8001d6a:	f7ff ff23 	bl	8001bb4 <Write_MFRC522>

  TagType[0] = reqMode;
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	79fa      	ldrb	r2, [r7, #7]
 8001d72:	701a      	strb	r2, [r3, #0]

  status = MFRC522_ToCard(PCD_TRANSCEIVE, TagType, 1, TagType, &backBits);
 8001d74:	f107 030c 	add.w	r3, r7, #12
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	2201      	movs	r2, #1
 8001d7e:	6839      	ldr	r1, [r7, #0]
 8001d80:	200c      	movs	r0, #12
 8001d82:	f000 f80f 	bl	8001da4 <MFRC522_ToCard>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]
  if ((status != MI_OK) || (backBits != 0x10)) {
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d102      	bne.n	8001d96 <MFRC522_Request+0x3c>
 8001d90:	89bb      	ldrh	r3, [r7, #12]
 8001d92:	2b10      	cmp	r3, #16
 8001d94:	d001      	beq.n	8001d9a <MFRC522_Request+0x40>
    status = MI_ERR;
 8001d96:	2302      	movs	r3, #2
 8001d98:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8001d9a:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3710      	adds	r7, #16
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}

08001da4 <MFRC522_ToCard>:
 *			 backData--Received the card returns data,
 *			 backLen--Return data bit length
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_ToCard(uint8_t command, uint8_t *sendData, uint8_t sendLen, uint8_t *backData, uint16_t *backLen)
{
 8001da4:	b590      	push	{r4, r7, lr}
 8001da6:	b08b      	sub	sp, #44	@ 0x2c
 8001da8:	af00      	add	r7, sp, #0
 8001daa:	60b9      	str	r1, [r7, #8]
 8001dac:	607b      	str	r3, [r7, #4]
 8001dae:	4603      	mov	r3, r0
 8001db0:	73fb      	strb	r3, [r7, #15]
 8001db2:	4613      	mov	r3, r2
 8001db4:	73bb      	strb	r3, [r7, #14]
	uint8_t status = MI_ERR;
 8001db6:	2302      	movs	r3, #2
 8001db8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	uint8_t irqEn = 0x00;
 8001dbc:	2300      	movs	r3, #0
 8001dbe:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
	uint8_t waitIRq = 0x00;
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
	uint8_t lastBits;
	uint8_t n;
	uint16_t i;

  switch (command)
 8001dc8:	7bfb      	ldrb	r3, [r7, #15]
 8001dca:	2b0c      	cmp	r3, #12
 8001dcc:	d008      	beq.n	8001de0 <MFRC522_ToCard+0x3c>
 8001dce:	2b0e      	cmp	r3, #14
 8001dd0:	d10d      	bne.n	8001dee <MFRC522_ToCard+0x4a>
  {
    case PCD_AUTHENT:     // Certification cards close
      {
        irqEn = 0x12;
 8001dd2:	2312      	movs	r3, #18
 8001dd4:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        waitIRq = 0x10;
 8001dd8:	2310      	movs	r3, #16
 8001dda:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        break;
 8001dde:	e007      	b.n	8001df0 <MFRC522_ToCard+0x4c>
      }
    case PCD_TRANSCEIVE:  // Transmit FIFO data
      {
        irqEn = 0x77;
 8001de0:	2377      	movs	r3, #119	@ 0x77
 8001de2:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        waitIRq = 0x30;
 8001de6:	2330      	movs	r3, #48	@ 0x30
 8001de8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        break;
 8001dec:	e000      	b.n	8001df0 <MFRC522_ToCard+0x4c>
      }
    default:
      break;
 8001dee:	bf00      	nop
  }

  Write_MFRC522(CommIEnReg, irqEn|0x80);  // Interrupt request
 8001df0:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8001df4:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001df8:	b2db      	uxtb	r3, r3
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	2002      	movs	r0, #2
 8001dfe:	f7ff fed9 	bl	8001bb4 <Write_MFRC522>
  ClearBitMask(CommIrqReg, 0x80);         // Clear all interrupt request bit
 8001e02:	2180      	movs	r1, #128	@ 0x80
 8001e04:	2004      	movs	r0, #4
 8001e06:	f7ff ff58 	bl	8001cba <ClearBitMask>
  SetBitMask(FIFOLevelReg, 0x80);         // FlushBuffer=1, FIFO Initialization
 8001e0a:	2180      	movs	r1, #128	@ 0x80
 8001e0c:	200a      	movs	r0, #10
 8001e0e:	f7ff ff39 	bl	8001c84 <SetBitMask>

  Write_MFRC522(CommandReg, PCD_IDLE);    // NO action; Cancel the current command
 8001e12:	2100      	movs	r1, #0
 8001e14:	2001      	movs	r0, #1
 8001e16:	f7ff fecd 	bl	8001bb4 <Write_MFRC522>

  // Writing data to the FIFO
  for (i=0; i<sendLen; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001e1e:	e00a      	b.n	8001e36 <MFRC522_ToCard+0x92>
  {
    Write_MFRC522(FIFODataReg, sendData[i]);
 8001e20:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001e22:	68ba      	ldr	r2, [r7, #8]
 8001e24:	4413      	add	r3, r2
 8001e26:	781b      	ldrb	r3, [r3, #0]
 8001e28:	4619      	mov	r1, r3
 8001e2a:	2009      	movs	r0, #9
 8001e2c:	f7ff fec2 	bl	8001bb4 <Write_MFRC522>
  for (i=0; i<sendLen; i++)
 8001e30:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001e32:	3301      	adds	r3, #1
 8001e34:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001e36:	7bbb      	ldrb	r3, [r7, #14]
 8001e38:	b29b      	uxth	r3, r3
 8001e3a:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	d3ef      	bcc.n	8001e20 <MFRC522_ToCard+0x7c>
  }

  // Execute the command
  Write_MFRC522(CommandReg, command);
 8001e40:	7bfb      	ldrb	r3, [r7, #15]
 8001e42:	4619      	mov	r1, r3
 8001e44:	2001      	movs	r0, #1
 8001e46:	f7ff feb5 	bl	8001bb4 <Write_MFRC522>
  if (command == PCD_TRANSCEIVE)
 8001e4a:	7bfb      	ldrb	r3, [r7, #15]
 8001e4c:	2b0c      	cmp	r3, #12
 8001e4e:	d103      	bne.n	8001e58 <MFRC522_ToCard+0xb4>
  {
    SetBitMask(BitFramingReg, 0x80);      // StartSend=1,transmission of data starts
 8001e50:	2180      	movs	r1, #128	@ 0x80
 8001e52:	200d      	movs	r0, #13
 8001e54:	f7ff ff16 	bl	8001c84 <SetBitMask>
  }

  uint32_t startTime = HAL_GetTick();
 8001e58:	f002 f98a 	bl	8004170 <HAL_GetTick>
 8001e5c:	61f8      	str	r0, [r7, #28]
  uint32_t timeout_ms = 30;
 8001e5e:	231e      	movs	r3, #30
 8001e60:	61bb      	str	r3, [r7, #24]
  // Waiting to receive data to complete
  i = 20000;	// i according to the clock frequency adjustment, the operator M1 card maximum waiting time 25ms
 8001e62:	f644 6320 	movw	r3, #20000	@ 0x4e20
 8001e66:	847b      	strh	r3, [r7, #34]	@ 0x22
  do
  {
    // CommIrqReg[7..0]
    // Set1 TxIRq RxIRq IdleIRq HiAlerIRq LoAlertIRq ErrIRq TimerIRq
    n = Read_MFRC522(CommIrqReg);
 8001e68:	2004      	movs	r0, #4
 8001e6a:	f7ff fed5 	bl	8001c18 <Read_MFRC522>
 8001e6e:	4603      	mov	r3, r0
 8001e70:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    if ((HAL_GetTick() - startTime) > timeout_ms) {
 8001e74:	f002 f97c 	bl	8004170 <HAL_GetTick>
 8001e78:	4602      	mov	r2, r0
 8001e7a:	69fb      	ldr	r3, [r7, #28]
 8001e7c:	1ad3      	subs	r3, r2, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	d202      	bcs.n	8001e8a <MFRC522_ToCard+0xe6>
            i = 0; // Đánh dấu timeout
 8001e84:	2300      	movs	r3, #0
 8001e86:	847b      	strh	r3, [r7, #34]	@ 0x22
            break;
 8001e88:	e010      	b.n	8001eac <MFRC522_ToCard+0x108>
    }
  }
  while ((i!=0) && !(n&0x01) && !(n&waitIRq));
 8001e8a:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <MFRC522_ToCard+0x108>
 8001e90:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001e94:	f003 0301 	and.w	r3, r3, #1
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d107      	bne.n	8001eac <MFRC522_ToCard+0x108>
 8001e9c:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8001ea0:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001ea4:	4013      	ands	r3, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0dd      	beq.n	8001e68 <MFRC522_ToCard+0xc4>

  ClearBitMask(BitFramingReg, 0x80);      // StartSend=0
 8001eac:	2180      	movs	r1, #128	@ 0x80
 8001eae:	200d      	movs	r0, #13
 8001eb0:	f7ff ff03 	bl	8001cba <ClearBitMask>

  if (i != 0)
 8001eb4:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d057      	beq.n	8001f6a <MFRC522_ToCard+0x1c6>
  {
    if(!(Read_MFRC522(ErrorReg) & 0x1B))  // BufferOvfl Collerr CRCErr ProtecolErr
 8001eba:	2006      	movs	r0, #6
 8001ebc:	f7ff feac 	bl	8001c18 <Read_MFRC522>
 8001ec0:	4603      	mov	r3, r0
 8001ec2:	f003 031b 	and.w	r3, r3, #27
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d14c      	bne.n	8001f64 <MFRC522_ToCard+0x1c0>
    {
      status = MI_OK;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      if (n & irqEn & 0x01)
      {
        //status = MI_NOTAGERR;             // ??
      }

      if (command == PCD_TRANSCEIVE)
 8001ed0:	7bfb      	ldrb	r3, [r7, #15]
 8001ed2:	2b0c      	cmp	r3, #12
 8001ed4:	d149      	bne.n	8001f6a <MFRC522_ToCard+0x1c6>
      {
        n = Read_MFRC522(FIFOLevelReg);
 8001ed6:	200a      	movs	r0, #10
 8001ed8:	f7ff fe9e 	bl	8001c18 <Read_MFRC522>
 8001edc:	4603      	mov	r3, r0
 8001ede:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        lastBits = Read_MFRC522(ControlReg) & 0x07;
 8001ee2:	200c      	movs	r0, #12
 8001ee4:	f7ff fe98 	bl	8001c18 <Read_MFRC522>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	f003 0307 	and.w	r3, r3, #7
 8001eee:	75fb      	strb	r3, [r7, #23]
        if (lastBits)
 8001ef0:	7dfb      	ldrb	r3, [r7, #23]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d00c      	beq.n	8001f10 <MFRC522_ToCard+0x16c>
        {
          *backLen = (n-1)*8 + lastBits;
 8001ef6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001efa:	3b01      	subs	r3, #1
 8001efc:	b29b      	uxth	r3, r3
 8001efe:	00db      	lsls	r3, r3, #3
 8001f00:	b29a      	uxth	r2, r3
 8001f02:	7dfb      	ldrb	r3, [r7, #23]
 8001f04:	b29b      	uxth	r3, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	b29a      	uxth	r2, r3
 8001f0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f0c:	801a      	strh	r2, [r3, #0]
 8001f0e:	e006      	b.n	8001f1e <MFRC522_ToCard+0x17a>
        }
        else
        {
          *backLen = n*8;
 8001f10:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f14:	b29b      	uxth	r3, r3
 8001f16:	00db      	lsls	r3, r3, #3
 8001f18:	b29a      	uxth	r2, r3
 8001f1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001f1c:	801a      	strh	r2, [r3, #0]
        }

        if (n == 0)
 8001f1e:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d102      	bne.n	8001f2c <MFRC522_ToCard+0x188>
        {
          n = 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }
        if (n > MAX_LEN)
 8001f2c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f30:	2b10      	cmp	r3, #16
 8001f32:	d902      	bls.n	8001f3a <MFRC522_ToCard+0x196>
        {
          n = MAX_LEN;
 8001f34:	2310      	movs	r3, #16
 8001f36:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        }

        // Reading the received data in FIFO
        for (i=0; i<n; i++)
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f3e:	e00a      	b.n	8001f56 <MFRC522_ToCard+0x1b2>
        {
          backData[i] = Read_MFRC522(FIFODataReg);
 8001f40:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f42:	687a      	ldr	r2, [r7, #4]
 8001f44:	18d4      	adds	r4, r2, r3
 8001f46:	2009      	movs	r0, #9
 8001f48:	f7ff fe66 	bl	8001c18 <Read_MFRC522>
 8001f4c:	4603      	mov	r3, r0
 8001f4e:	7023      	strb	r3, [r4, #0]
        for (i=0; i<n; i++)
 8001f50:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8001f52:	3301      	adds	r3, #1
 8001f54:	847b      	strh	r3, [r7, #34]	@ 0x22
 8001f56:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	8c7a      	ldrh	r2, [r7, #34]	@ 0x22
 8001f5e:	429a      	cmp	r2, r3
 8001f60:	d3ee      	bcc.n	8001f40 <MFRC522_ToCard+0x19c>
 8001f62:	e002      	b.n	8001f6a <MFRC522_ToCard+0x1c6>
        }
      }
    }
    else {
      //printf("~~~ buffer overflow, collerr, crcerr, or protecolerr\r\n");
      status = MI_ERR;
 8001f64:	2302      	movs	r3, #2
 8001f66:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }
  else {
    //printf("~~~ request timed out\r\n");
  }

  return status;
 8001f6a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8001f6e:	4618      	mov	r0, r3
 8001f70:	372c      	adds	r7, #44	@ 0x2c
 8001f72:	46bd      	mov	sp, r7
 8001f74:	bd90      	pop	{r4, r7, pc}

08001f76 <MFRC522_Anticoll>:
 * Description: Anti-collision detection, reading selected card serial number card
 * Input parameters: serNum - returns 4 bytes card serial number, the first 5 bytes for the checksum byte
 * Return value: the successful return MI_OK
 */
uint8_t MFRC522_Anticoll(uint8_t *serNum)
{
 8001f76:	b580      	push	{r7, lr}
 8001f78:	b086      	sub	sp, #24
 8001f7a:	af02      	add	r7, sp, #8
 8001f7c:	6078      	str	r0, [r7, #4]
	uint8_t status;
	uint8_t i;
	uint8_t serNumCheck=0;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	737b      	strb	r3, [r7, #13]
	uint16_t unLen;


  //ClearBitMask(Status2Reg, 0x08);		//TempSensclear
  //ClearBitMask(CollReg,0x80);			//ValuesAfterColl
  Write_MFRC522(BitFramingReg, 0x00);		//TxLastBists = BitFramingReg[2..0]
 8001f82:	2100      	movs	r1, #0
 8001f84:	200d      	movs	r0, #13
 8001f86:	f7ff fe15 	bl	8001bb4 <Write_MFRC522>

  serNum[0] = PICC_ANTICOLL;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	2293      	movs	r2, #147	@ 0x93
 8001f8e:	701a      	strb	r2, [r3, #0]
  serNum[1] = 0x20;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	3301      	adds	r3, #1
 8001f94:	2220      	movs	r2, #32
 8001f96:	701a      	strb	r2, [r3, #0]
  status = MFRC522_ToCard(PCD_TRANSCEIVE, serNum, 2, serNum, &unLen);
 8001f98:	f107 030a 	add.w	r3, r7, #10
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2202      	movs	r2, #2
 8001fa2:	6879      	ldr	r1, [r7, #4]
 8001fa4:	200c      	movs	r0, #12
 8001fa6:	f7ff fefd 	bl	8001da4 <MFRC522_ToCard>
 8001faa:	4603      	mov	r3, r0
 8001fac:	73fb      	strb	r3, [r7, #15]

  if (status == MI_OK)
 8001fae:	7bfb      	ldrb	r3, [r7, #15]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d118      	bne.n	8001fe6 <MFRC522_Anticoll+0x70>
  {
    //Check card serial number
    for (i=0; i<4; i++)
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	73bb      	strb	r3, [r7, #14]
 8001fb8:	e009      	b.n	8001fce <MFRC522_Anticoll+0x58>
    {
      serNumCheck ^= serNum[i];
 8001fba:	7bbb      	ldrb	r3, [r7, #14]
 8001fbc:	687a      	ldr	r2, [r7, #4]
 8001fbe:	4413      	add	r3, r2
 8001fc0:	781a      	ldrb	r2, [r3, #0]
 8001fc2:	7b7b      	ldrb	r3, [r7, #13]
 8001fc4:	4053      	eors	r3, r2
 8001fc6:	737b      	strb	r3, [r7, #13]
    for (i=0; i<4; i++)
 8001fc8:	7bbb      	ldrb	r3, [r7, #14]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	73bb      	strb	r3, [r7, #14]
 8001fce:	7bbb      	ldrb	r3, [r7, #14]
 8001fd0:	2b03      	cmp	r3, #3
 8001fd2:	d9f2      	bls.n	8001fba <MFRC522_Anticoll+0x44>
    }
    if (serNumCheck != serNum[i])
 8001fd4:	7bbb      	ldrb	r3, [r7, #14]
 8001fd6:	687a      	ldr	r2, [r7, #4]
 8001fd8:	4413      	add	r3, r2
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	7b7a      	ldrb	r2, [r7, #13]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	d001      	beq.n	8001fe6 <MFRC522_Anticoll+0x70>
    {
      status = MI_ERR;
 8001fe2:	2302      	movs	r3, #2
 8001fe4:	73fb      	strb	r3, [r7, #15]
    }
  }

  //SetBitMask(CollReg, 0x80);		//ValuesAfterColl=1

  return status;
 8001fe6:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe8:	4618      	mov	r0, r3
 8001fea:	3710      	adds	r7, #16
 8001fec:	46bd      	mov	sp, r7
 8001fee:	bd80      	pop	{r7, pc}

08001ff0 <DHT_Delay_Init>:
static void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin);
static uint8_t DHT22_Start(void);
static uint8_t DHT22_Read_Response(void);

// --- Timer Initialization ---
void DHT_Delay_Init(void) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
    HAL_TIM_Base_Start(DHT_TIMER); // Khởi động timer đã cấu hình trong CubeMX
 8001ff4:	4802      	ldr	r0, [pc, #8]	@ (8002000 <DHT_Delay_Init+0x10>)
 8001ff6:	f005 fc03 	bl	8007800 <HAL_TIM_Base_Start>
}
 8001ffa:	bf00      	nop
 8001ffc:	bd80      	pop	{r7, pc}
 8001ffe:	bf00      	nop
 8002000:	200003ac 	.word	0x200003ac

08002004 <DHT_Delay_us>:

// --- Microsecond Delay ---
void DHT_Delay_us(uint16_t us) {
 8002004:	b480      	push	{r7}
 8002006:	b083      	sub	sp, #12
 8002008:	af00      	add	r7, sp, #0
 800200a:	4603      	mov	r3, r0
 800200c:	80fb      	strh	r3, [r7, #6]
    __HAL_TIM_SET_COUNTER(DHT_TIMER, 0); // Reset bộ đếm timer
 800200e:	4b09      	ldr	r3, [pc, #36]	@ (8002034 <DHT_Delay_us+0x30>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	2200      	movs	r2, #0
 8002014:	625a      	str	r2, [r3, #36]	@ 0x24
    while (__HAL_TIM_GET_COUNTER(DHT_TIMER) < us); // Chờ đủ số us
 8002016:	bf00      	nop
 8002018:	4b06      	ldr	r3, [pc, #24]	@ (8002034 <DHT_Delay_us+0x30>)
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	429a      	cmp	r2, r3
 8002022:	d3f9      	bcc.n	8002018 <DHT_Delay_us+0x14>
}
 8002024:	bf00      	nop
 8002026:	bf00      	nop
 8002028:	370c      	adds	r7, #12
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	200003ac 	.word	0x200003ac

08002038 <Set_Pin_Output>:

// --- Pin Mode Functions ---
static void Set_Pin_Output(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002038:	b580      	push	{r7, lr}
 800203a:	b088      	sub	sp, #32
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002044:	f107 030c 	add.w	r3, r7, #12
 8002048:	2200      	movs	r2, #0
 800204a:	601a      	str	r2, [r3, #0]
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	609a      	str	r2, [r3, #8]
 8002050:	60da      	str	r2, [r3, #12]
 8002052:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8002054:	887b      	ldrh	r3, [r7, #2]
 8002056:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP; // Output Push Pull
 8002058:	2301      	movs	r3, #1
 800205a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002060:	2302      	movs	r3, #2
 8002062:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8002064:	f107 030c 	add.w	r3, r7, #12
 8002068:	4619      	mov	r1, r3
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	f002 f9c2 	bl	80043f4 <HAL_GPIO_Init>
}
 8002070:	bf00      	nop
 8002072:	3720      	adds	r7, #32
 8002074:	46bd      	mov	sp, r7
 8002076:	bd80      	pop	{r7, pc}

08002078 <Set_Pin_Input>:

static void Set_Pin_Input(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin) {
 8002078:	b580      	push	{r7, lr}
 800207a:	b088      	sub	sp, #32
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
 8002080:	460b      	mov	r3, r1
 8002082:	807b      	strh	r3, [r7, #2]
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002084:	f107 030c 	add.w	r3, r7, #12
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]
 800208c:	605a      	str	r2, [r3, #4]
 800208e:	609a      	str	r2, [r3, #8]
 8002090:	60da      	str	r2, [r3, #12]
 8002092:	611a      	str	r2, [r3, #16]
    GPIO_InitStruct.Pin = GPIO_Pin;
 8002094:	887b      	ldrh	r3, [r7, #2]
 8002096:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002098:	2300      	movs	r3, #0
 800209a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP; // Kéo lên nội bộ (hoặc NOPULL nếu có trở ngoài)
 800209c:	2301      	movs	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80020a0:	f107 030c 	add.w	r3, r7, #12
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f002 f9a4 	bl	80043f4 <HAL_GPIO_Init>
}
 80020ac:	bf00      	nop
 80020ae:	3720      	adds	r7, #32
 80020b0:	46bd      	mov	sp, r7
 80020b2:	bd80      	pop	{r7, pc}

080020b4 <DHT22_Start>:

// --- DHT22 Start Signal ---
static uint8_t DHT22_Start(void) {
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
    Set_Pin_Output(DHT22_PORT, DHT22_PIN); // Set pin là output
 80020b8:	2101      	movs	r1, #1
 80020ba:	480d      	ldr	r0, [pc, #52]	@ (80020f0 <DHT22_Start+0x3c>)
 80020bc:	f7ff ffbc 	bl	8002038 <Set_Pin_Output>

    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_RESET); // Kéo xuống LOW
 80020c0:	2200      	movs	r2, #0
 80020c2:	2101      	movs	r1, #1
 80020c4:	480a      	ldr	r0, [pc, #40]	@ (80020f0 <DHT22_Start+0x3c>)
 80020c6:	f002 fb49 	bl	800475c <HAL_GPIO_WritePin>
    DHT_Delay_us(1100); // Delay > 1ms (datasheet yêu cầu ít nhất 1ms)
 80020ca:	f240 404c 	movw	r0, #1100	@ 0x44c
 80020ce:	f7ff ff99 	bl	8002004 <DHT_Delay_us>

    HAL_GPIO_WritePin(DHT22_PORT, DHT22_PIN, GPIO_PIN_SET); // Kéo lên HIGH
 80020d2:	2201      	movs	r2, #1
 80020d4:	2101      	movs	r1, #1
 80020d6:	4806      	ldr	r0, [pc, #24]	@ (80020f0 <DHT22_Start+0x3c>)
 80020d8:	f002 fb40 	bl	800475c <HAL_GPIO_WritePin>
    DHT_Delay_us(30); // Delay 20-40us (datasheet yêu cầu)
 80020dc:	201e      	movs	r0, #30
 80020de:	f7ff ff91 	bl	8002004 <DHT_Delay_us>

    Set_Pin_Input(DHT22_PORT, DHT22_PIN); // Set pin là input để đọc response
 80020e2:	2101      	movs	r1, #1
 80020e4:	4802      	ldr	r0, [pc, #8]	@ (80020f0 <DHT22_Start+0x3c>)
 80020e6:	f7ff ffc7 	bl	8002078 <Set_Pin_Input>
    return 1; // Giả sử thành công, việc kiểm tra response sẽ ở hàm khác
 80020ea:	2301      	movs	r3, #1
}
 80020ec:	4618      	mov	r0, r3
 80020ee:	bd80      	pop	{r7, pc}
 80020f0:	40020000 	.word	0x40020000

080020f4 <DHT22_Read_Response>:

// --- DHT22 Check Response ---
static uint8_t DHT22_Read_Response(void) {
 80020f4:	b580      	push	{r7, lr}
 80020f6:	b082      	sub	sp, #8
 80020f8:	af00      	add	r7, sp, #0
    uint8_t Response = 0;
 80020fa:	2300      	movs	r3, #0
 80020fc:	71fb      	strb	r3, [r7, #7]
    DHT_Delay_us(40); // Chờ khoảng 40us để DHT kéo xuống LOW
 80020fe:	2028      	movs	r0, #40	@ 0x28
 8002100:	f7ff ff80 	bl	8002004 <DHT_Delay_us>

    // Kiểm tra xem pin có được kéo xuống LOW không (khoảng 80us)
    if (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 8002104:	2101      	movs	r1, #1
 8002106:	480f      	ldr	r0, [pc, #60]	@ (8002144 <DHT22_Read_Response+0x50>)
 8002108:	f002 fb10 	bl	800472c <HAL_GPIO_ReadPin>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	d113      	bne.n	800213a <DHT22_Read_Response+0x46>
        DHT_Delay_us(80); // Chờ hết pha LOW
 8002112:	2050      	movs	r0, #80	@ 0x50
 8002114:	f7ff ff76 	bl	8002004 <DHT_Delay_us>
        // Kiểm tra xem pin có được kéo lên HIGH không (khoảng 80us)
        if ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 8002118:	2101      	movs	r1, #1
 800211a:	480a      	ldr	r0, [pc, #40]	@ (8002144 <DHT22_Read_Response+0x50>)
 800211c:	f002 fb06 	bl	800472c <HAL_GPIO_ReadPin>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d001      	beq.n	800212a <DHT22_Read_Response+0x36>
            Response = 1; // Có phản hồi
 8002126:	2301      	movs	r3, #1
 8002128:	71fb      	strb	r3, [r7, #7]
        }
        // Chờ hết pha HIGH (chờ đến khi pin xuống LOW sẵn sàng gửi data)
        while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN)));
 800212a:	bf00      	nop
 800212c:	2101      	movs	r1, #1
 800212e:	4805      	ldr	r0, [pc, #20]	@ (8002144 <DHT22_Read_Response+0x50>)
 8002130:	f002 fafc 	bl	800472c <HAL_GPIO_ReadPin>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d1f8      	bne.n	800212c <DHT22_Read_Response+0x38>
    }
     // Nếu không có phản hồi đúng -> timeout (có thể thêm bộ đếm timeout ở đây)
    return Response;
 800213a:	79fb      	ldrb	r3, [r7, #7]
}
 800213c:	4618      	mov	r0, r3
 800213e:	3708      	adds	r7, #8
 8002140:	46bd      	mov	sp, r7
 8002142:	bd80      	pop	{r7, pc}
 8002144:	40020000 	.word	0x40020000

08002148 <DHT22_Read_Data>:

// --- Read Data Function ---
uint8_t DHT22_Read_Data(float *Temperature, float *Humidity) {
 8002148:	b580      	push	{r7, lr}
 800214a:	b088      	sub	sp, #32
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
    uint8_t data[5] = {0, 0, 0, 0, 0}; // 5 byte data (RH high, RH low, Temp high, Temp low, Checksum)
 8002152:	f107 030c 	add.w	r3, r7, #12
 8002156:	2200      	movs	r2, #0
 8002158:	601a      	str	r2, [r3, #0]
 800215a:	711a      	strb	r2, [r3, #4]
    uint8_t i, j;
    uint32_t timeout_counter;

    DHT22_Start(); // Gửi tín hiệu start
 800215c:	f7ff ffaa 	bl	80020b4 <DHT22_Start>

    if (!DHT22_Read_Response()) { // Kiểm tra phản hồi từ DHT22
 8002160:	f7ff ffc8 	bl	80020f4 <DHT22_Read_Response>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d107      	bne.n	800217a <DHT22_Read_Data+0x32>
         *Temperature = -999.0f; // Giá trị lỗi
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	4a54      	ldr	r2, [pc, #336]	@ (80022c0 <DHT22_Read_Data+0x178>)
 800216e:	601a      	str	r2, [r3, #0]
         *Humidity = -999.0f;    // Giá trị lỗi
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	4a53      	ldr	r2, [pc, #332]	@ (80022c0 <DHT22_Read_Data+0x178>)
 8002174:	601a      	str	r2, [r3, #0]
        return 0; // Không có phản hồi
 8002176:	2300      	movs	r3, #0
 8002178:	e09d      	b.n	80022b6 <DHT22_Read_Data+0x16e>
    }

    // Đọc 40 bit (5 byte) data
    for (i = 0; i < 5; i++) {
 800217a:	2300      	movs	r3, #0
 800217c:	77fb      	strb	r3, [r7, #31]
 800217e:	e04d      	b.n	800221c <DHT22_Read_Data+0xd4>
        for (j = 0; j < 8; j++) {
 8002180:	2300      	movs	r3, #0
 8002182:	77bb      	strb	r3, [r7, #30]
 8002184:	e044      	b.n	8002210 <DHT22_Read_Data+0xc8>
            // Chờ pin xuống LOW (bắt đầu bit, ~50us)
            timeout_counter = 0;
 8002186:	2300      	movs	r3, #0
 8002188:	61bb      	str	r3, [r7, #24]
            while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 800218a:	e00a      	b.n	80021a2 <DHT22_Read_Data+0x5a>
                 DHT_Delay_us(1); // Delay nhỏ để tránh treo
 800218c:	2001      	movs	r0, #1
 800218e:	f7ff ff39 	bl	8002004 <DHT_Delay_us>
                 timeout_counter++;
 8002192:	69bb      	ldr	r3, [r7, #24]
 8002194:	3301      	adds	r3, #1
 8002196:	61bb      	str	r3, [r7, #24]
                 if (timeout_counter > 100) return 0; // Timeout chờ LOW
 8002198:	69bb      	ldr	r3, [r7, #24]
 800219a:	2b64      	cmp	r3, #100	@ 0x64
 800219c:	d901      	bls.n	80021a2 <DHT22_Read_Data+0x5a>
 800219e:	2300      	movs	r3, #0
 80021a0:	e089      	b.n	80022b6 <DHT22_Read_Data+0x16e>
            while (!(HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 80021a2:	2101      	movs	r1, #1
 80021a4:	4847      	ldr	r0, [pc, #284]	@ (80022c4 <DHT22_Read_Data+0x17c>)
 80021a6:	f002 fac1 	bl	800472c <HAL_GPIO_ReadPin>
 80021aa:	4603      	mov	r3, r0
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0ed      	beq.n	800218c <DHT22_Read_Data+0x44>
            }


            // Chờ pin lên HIGH và đo thời gian HIGH
            timeout_counter = 0;
 80021b0:	2300      	movs	r3, #0
 80021b2:	61bb      	str	r3, [r7, #24]
             while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 80021b4:	e00a      	b.n	80021cc <DHT22_Read_Data+0x84>
                DHT_Delay_us(1); // Delay nhỏ để đếm thời gian
 80021b6:	2001      	movs	r0, #1
 80021b8:	f7ff ff24 	bl	8002004 <DHT_Delay_us>
                timeout_counter++;
 80021bc:	69bb      	ldr	r3, [r7, #24]
 80021be:	3301      	adds	r3, #1
 80021c0:	61bb      	str	r3, [r7, #24]
                if (timeout_counter > 100) return 0; // Timeout chờ HIGH
 80021c2:	69bb      	ldr	r3, [r7, #24]
 80021c4:	2b64      	cmp	r3, #100	@ 0x64
 80021c6:	d901      	bls.n	80021cc <DHT22_Read_Data+0x84>
 80021c8:	2300      	movs	r3, #0
 80021ca:	e074      	b.n	80022b6 <DHT22_Read_Data+0x16e>
             while ((HAL_GPIO_ReadPin(DHT22_PORT, DHT22_PIN))) {
 80021cc:	2101      	movs	r1, #1
 80021ce:	483d      	ldr	r0, [pc, #244]	@ (80022c4 <DHT22_Read_Data+0x17c>)
 80021d0:	f002 faac 	bl	800472c <HAL_GPIO_ReadPin>
 80021d4:	4603      	mov	r3, r0
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d1ed      	bne.n	80021b6 <DHT22_Read_Data+0x6e>
            }

            // Nếu thời gian HIGH > 40us (thực tế thường ~70us) -> bit 1
            // Nếu thời gian HIGH < 40us (thực tế thường ~28us) -> bit 0
            if (timeout_counter > 40) {
 80021da:	69bb      	ldr	r3, [r7, #24]
 80021dc:	2b28      	cmp	r3, #40	@ 0x28
 80021de:	d914      	bls.n	800220a <DHT22_Read_Data+0xc2>
                data[i] |= (1 << (7 - j)); // Ghi bit 1 vào byte data tương ứng
 80021e0:	7ffb      	ldrb	r3, [r7, #31]
 80021e2:	3320      	adds	r3, #32
 80021e4:	443b      	add	r3, r7
 80021e6:	f813 3c14 	ldrb.w	r3, [r3, #-20]
 80021ea:	b25a      	sxtb	r2, r3
 80021ec:	7fbb      	ldrb	r3, [r7, #30]
 80021ee:	f1c3 0307 	rsb	r3, r3, #7
 80021f2:	2101      	movs	r1, #1
 80021f4:	fa01 f303 	lsl.w	r3, r1, r3
 80021f8:	b25b      	sxtb	r3, r3
 80021fa:	4313      	orrs	r3, r2
 80021fc:	b25a      	sxtb	r2, r3
 80021fe:	7ffb      	ldrb	r3, [r7, #31]
 8002200:	b2d2      	uxtb	r2, r2
 8002202:	3320      	adds	r3, #32
 8002204:	443b      	add	r3, r7
 8002206:	f803 2c14 	strb.w	r2, [r3, #-20]
        for (j = 0; j < 8; j++) {
 800220a:	7fbb      	ldrb	r3, [r7, #30]
 800220c:	3301      	adds	r3, #1
 800220e:	77bb      	strb	r3, [r7, #30]
 8002210:	7fbb      	ldrb	r3, [r7, #30]
 8002212:	2b07      	cmp	r3, #7
 8002214:	d9b7      	bls.n	8002186 <DHT22_Read_Data+0x3e>
    for (i = 0; i < 5; i++) {
 8002216:	7ffb      	ldrb	r3, [r7, #31]
 8002218:	3301      	adds	r3, #1
 800221a:	77fb      	strb	r3, [r7, #31]
 800221c:	7ffb      	ldrb	r3, [r7, #31]
 800221e:	2b04      	cmp	r3, #4
 8002220:	d9ae      	bls.n	8002180 <DHT22_Read_Data+0x38>
             // Nếu là bit 0 thì không cần làm gì vì data[i] đã khởi tạo là 0
        }
    }

    // --- Checksum ---
    uint8_t checksum = data[0] + data[1] + data[2] + data[3];
 8002222:	7b3a      	ldrb	r2, [r7, #12]
 8002224:	7b7b      	ldrb	r3, [r7, #13]
 8002226:	4413      	add	r3, r2
 8002228:	b2da      	uxtb	r2, r3
 800222a:	7bbb      	ldrb	r3, [r7, #14]
 800222c:	4413      	add	r3, r2
 800222e:	b2da      	uxtb	r2, r3
 8002230:	7bfb      	ldrb	r3, [r7, #15]
 8002232:	4413      	add	r3, r2
 8002234:	75fb      	strb	r3, [r7, #23]
    if (checksum == data[4]) {
 8002236:	7c3b      	ldrb	r3, [r7, #16]
 8002238:	7dfa      	ldrb	r2, [r7, #23]
 800223a:	429a      	cmp	r2, r3
 800223c:	d134      	bne.n	80022a8 <DHT22_Read_Data+0x160>
        // --- Tính toán Nhiệt độ và Độ ẩm ---
        // Độ ẩm: (Byte RH_High << 8 | Byte RH_Low) / 10.0
        *Humidity = (float)(((uint16_t)data[0] << 8) | data[1]) / 10.0f;
 800223e:	7b3b      	ldrb	r3, [r7, #12]
 8002240:	021b      	lsls	r3, r3, #8
 8002242:	7b7a      	ldrb	r2, [r7, #13]
 8002244:	4313      	orrs	r3, r2
 8002246:	ee07 3a90 	vmov	s15, r3
 800224a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800224e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002252:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	edc3 7a00 	vstr	s15, [r3]

        // Nhiệt độ:
        // Lấy 15 bit giá trị nhiệt độ (bỏ bit dấu)
        uint16_t temp_val = ((uint16_t)(data[2] & 0x7F) << 8) | data[3];
 800225c:	7bbb      	ldrb	r3, [r7, #14]
 800225e:	b21b      	sxth	r3, r3
 8002260:	021b      	lsls	r3, r3, #8
 8002262:	b21b      	sxth	r3, r3
 8002264:	f403 43fe 	and.w	r3, r3, #32512	@ 0x7f00
 8002268:	b21a      	sxth	r2, r3
 800226a:	7bfb      	ldrb	r3, [r7, #15]
 800226c:	b21b      	sxth	r3, r3
 800226e:	4313      	orrs	r3, r2
 8002270:	b21b      	sxth	r3, r3
 8002272:	82bb      	strh	r3, [r7, #20]
        *Temperature = (float)temp_val / 10.0f;
 8002274:	8abb      	ldrh	r3, [r7, #20]
 8002276:	ee07 3a90 	vmov	s15, r3
 800227a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800227e:	eef2 6a04 	vmov.f32	s13, #36	@ 0x41200000  10.0
 8002282:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	edc3 7a00 	vstr	s15, [r3]

        // Kiểm tra bit dấu (bit 7 của byte Temp_High)
        if (data[2] & 0x80) {
 800228c:	7bbb      	ldrb	r3, [r7, #14]
 800228e:	b25b      	sxtb	r3, r3
 8002290:	2b00      	cmp	r3, #0
 8002292:	da07      	bge.n	80022a4 <DHT22_Read_Data+0x15c>
            *Temperature = -(*Temperature); // Nhiệt độ âm
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	edd3 7a00 	vldr	s15, [r3]
 800229a:	eef1 7a67 	vneg.f32	s15, s15
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	edc3 7a00 	vstr	s15, [r3]
        }
        return 1; // Đọc thành công
 80022a4:	2301      	movs	r3, #1
 80022a6:	e006      	b.n	80022b6 <DHT22_Read_Data+0x16e>
    } else {
        // Checksum sai
         *Temperature = -998.0f; // Giá trị lỗi checksum
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	4a07      	ldr	r2, [pc, #28]	@ (80022c8 <DHT22_Read_Data+0x180>)
 80022ac:	601a      	str	r2, [r3, #0]
         *Humidity = -998.0f;    // Giá trị lỗi checksum
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	4a05      	ldr	r2, [pc, #20]	@ (80022c8 <DHT22_Read_Data+0x180>)
 80022b2:	601a      	str	r2, [r3, #0]
        return 0; // Checksum Error
 80022b4:	2300      	movs	r3, #0
    }
}
 80022b6:	4618      	mov	r0, r3
 80022b8:	3720      	adds	r7, #32
 80022ba:	46bd      	mov	sp, r7
 80022bc:	bd80      	pop	{r7, pc}
 80022be:	bf00      	nop
 80022c0:	c479c000 	.word	0xc479c000
 80022c4:	40020000 	.word	0x40020000
 80022c8:	c4798000 	.word	0xc4798000

080022cc <Handle_LCD_Init>:
void Handle_Motor(void);
void Handle_LED(uint32_t current_time);
void Handle_Servo(uint8_t open_command); // 1 to open, 0 to close


void Handle_LCD_Init(uint32_t current_time) {
 80022cc:	b580      	push	{r7, lr}
 80022ce:	b084      	sub	sp, #16
 80022d0:	af02      	add	r7, sp, #8
 80022d2:	6078      	str	r0, [r7, #4]
    if (lcd_init_delay_active) {
 80022d4:	4b15      	ldr	r3, [pc, #84]	@ (800232c <Handle_LCD_Init+0x60>)
 80022d6:	781b      	ldrb	r3, [r3, #0]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d023      	beq.n	8002324 <Handle_LCD_Init+0x58>
        if (current_time - lcd_init_delay_start_time >= LCD_INIT_STABILIZE_DELAY_MS) {
 80022dc:	4b14      	ldr	r3, [pc, #80]	@ (8002330 <Handle_LCD_Init+0x64>)
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	687a      	ldr	r2, [r7, #4]
 80022e2:	1ad3      	subs	r3, r2, r3
 80022e4:	2264      	movs	r2, #100	@ 0x64
 80022e6:	4293      	cmp	r3, r2
 80022e8:	d31c      	bcc.n	8002324 <Handle_LCD_Init+0x58>
            if (!bh1750_ok) {
 80022ea:	4b12      	ldr	r3, [pc, #72]	@ (8002334 <Handle_LCD_Init+0x68>)
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	d108      	bne.n	8002304 <Handle_LCD_Init+0x38>
                draw_string(5, 140, COLOR_ORANGE, 1, "BH1750 Fail!");
 80022f2:	4b11      	ldr	r3, [pc, #68]	@ (8002338 <Handle_LCD_Init+0x6c>)
 80022f4:	9300      	str	r3, [sp, #0]
 80022f6:	2301      	movs	r3, #1
 80022f8:	f240 22bf 	movw	r2, #703	@ 0x2bf
 80022fc:	218c      	movs	r1, #140	@ 0x8c
 80022fe:	2005      	movs	r0, #5
 8002300:	f7ff fa6a 	bl	80017d8 <draw_string>
            }
            if (!ina219_ok) {
 8002304:	4b0d      	ldr	r3, [pc, #52]	@ (800233c <Handle_LCD_Init+0x70>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d108      	bne.n	800231e <Handle_LCD_Init+0x52>
                draw_string(5, 155, COLOR_ORANGE, 1, "INA219 Fail!");
 800230c:	4b0c      	ldr	r3, [pc, #48]	@ (8002340 <Handle_LCD_Init+0x74>)
 800230e:	9300      	str	r3, [sp, #0]
 8002310:	2301      	movs	r3, #1
 8002312:	f240 22bf 	movw	r2, #703	@ 0x2bf
 8002316:	219b      	movs	r1, #155	@ 0x9b
 8002318:	2005      	movs	r0, #5
 800231a:	f7ff fa5d 	bl	80017d8 <draw_string>
            }
            lcd_init_delay_active = 0; // Delay finished
 800231e:	4b03      	ldr	r3, [pc, #12]	@ (800232c <Handle_LCD_Init+0x60>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
        }
    }
}
 8002324:	bf00      	nop
 8002326:	3708      	adds	r7, #8
 8002328:	46bd      	mov	sp, r7
 800232a:	bd80      	pop	{r7, pc}
 800232c:	20000018 	.word	0x20000018
 8002330:	200004dc 	.word	0x200004dc
 8002334:	2000044d 	.word	0x2000044d
 8002338:	0800b628 	.word	0x0800b628
 800233c:	20000458 	.word	0x20000458
 8002340:	0800b638 	.word	0x0800b638

08002344 <Handle_RCWL0516>:

void Handle_RCWL0516(void) {
 8002344:	b580      	push	{r7, lr}
 8002346:	b084      	sub	sp, #16
 8002348:	af02      	add	r7, sp, #8
    if (rcwl_update_flag) {
 800234a:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <Handle_RCWL0516+0x70>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	b2db      	uxtb	r3, r3
 8002350:	2b00      	cmp	r3, #0
 8002352:	d02a      	beq.n	80023aa <Handle_RCWL0516+0x66>
        rcwl_update_flag = 0;
 8002354:	4b17      	ldr	r3, [pc, #92]	@ (80023b4 <Handle_RCWL0516+0x70>)
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
        if (motion_detected != prev_motion_detected) {
 800235a:	4b17      	ldr	r3, [pc, #92]	@ (80023b8 <Handle_RCWL0516+0x74>)
 800235c:	781a      	ldrb	r2, [r3, #0]
 800235e:	4b17      	ldr	r3, [pc, #92]	@ (80023bc <Handle_RCWL0516+0x78>)
 8002360:	781b      	ldrb	r3, [r3, #0]
 8002362:	429a      	cmp	r2, r3
 8002364:	d021      	beq.n	80023aa <Handle_RCWL0516+0x66>
            if (motion_detected == GPIO_PIN_SET) {
 8002366:	4b14      	ldr	r3, [pc, #80]	@ (80023b8 <Handle_RCWL0516+0x74>)
 8002368:	781b      	ldrb	r3, [r3, #0]
 800236a:	2b01      	cmp	r3, #1
 800236c:	d104      	bne.n	8002378 <Handle_RCWL0516+0x34>
                sprintf(lcd_line_buffer, "Motion: YES ");
 800236e:	4914      	ldr	r1, [pc, #80]	@ (80023c0 <Handle_RCWL0516+0x7c>)
 8002370:	4814      	ldr	r0, [pc, #80]	@ (80023c4 <Handle_RCWL0516+0x80>)
 8002372:	f007 f8c9 	bl	8009508 <siprintf>
 8002376:	e003      	b.n	8002380 <Handle_RCWL0516+0x3c>
            } else {
                sprintf(lcd_line_buffer, "Motion: NO  "); // Ensure same length for overwrite
 8002378:	4913      	ldr	r1, [pc, #76]	@ (80023c8 <Handle_RCWL0516+0x84>)
 800237a:	4812      	ldr	r0, [pc, #72]	@ (80023c4 <Handle_RCWL0516+0x80>)
 800237c:	f007 f8c4 	bl	8009508 <siprintf>
            }
            uint16_t motion_color = (motion_detected == GPIO_PIN_SET) ? COLOR_GREEN : COLOR_RED;
 8002380:	4b0d      	ldr	r3, [pc, #52]	@ (80023b8 <Handle_RCWL0516+0x74>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	2b01      	cmp	r3, #1
 8002386:	d102      	bne.n	800238e <Handle_RCWL0516+0x4a>
 8002388:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 800238c:	e000      	b.n	8002390 <Handle_RCWL0516+0x4c>
 800238e:	231f      	movs	r3, #31
 8002390:	80fb      	strh	r3, [r7, #6]
            draw_fast_string(5, 40, motion_color, COLOR_BLACK, lcd_line_buffer);
 8002392:	88fa      	ldrh	r2, [r7, #6]
 8002394:	4b0b      	ldr	r3, [pc, #44]	@ (80023c4 <Handle_RCWL0516+0x80>)
 8002396:	9300      	str	r3, [sp, #0]
 8002398:	2300      	movs	r3, #0
 800239a:	2128      	movs	r1, #40	@ 0x28
 800239c:	2005      	movs	r0, #5
 800239e:	f7ff fa4f 	bl	8001840 <draw_fast_string>
            prev_motion_detected = motion_detected;
 80023a2:	4b05      	ldr	r3, [pc, #20]	@ (80023b8 <Handle_RCWL0516+0x74>)
 80023a4:	781a      	ldrb	r2, [r3, #0]
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <Handle_RCWL0516+0x78>)
 80023a8:	701a      	strb	r2, [r3, #0]
        }
    }
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	200004d8 	.word	0x200004d8
 80023b8:	2000044c 	.word	0x2000044c
 80023bc:	20000004 	.word	0x20000004
 80023c0:	0800b648 	.word	0x0800b648
 80023c4:	200004ac 	.word	0x200004ac
 80023c8:	0800b658 	.word	0x0800b658

080023cc <Handle_Servo>:

void Handle_Servo(uint8_t open_command) {
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	4603      	mov	r3, r0
 80023d4:	71fb      	strb	r3, [r7, #7]
    if (open_command) {
 80023d6:	79fb      	ldrb	r3, [r7, #7]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d005      	beq.n	80023e8 <Handle_Servo+0x1c>
        __HAL_TIM_SET_COMPARE(&SERVO_TIMER, SERVO_CHANNEL, SERVO_PULSE_OPEN); // Mở cửa
 80023dc:	4b08      	ldr	r3, [pc, #32]	@ (8002400 <Handle_Servo+0x34>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f640 723c 	movw	r2, #3900	@ 0xf3c
 80023e4:	63da      	str	r2, [r3, #60]	@ 0x3c
    } else {
        __HAL_TIM_SET_COMPARE(&SERVO_TIMER, SERVO_CHANNEL, SERVO_PULSE_CLOSED); // Đóng cửa
    }
}
 80023e6:	e004      	b.n	80023f2 <Handle_Servo+0x26>
        __HAL_TIM_SET_COMPARE(&SERVO_TIMER, SERVO_CHANNEL, SERVO_PULSE_CLOSED); // Đóng cửa
 80023e8:	4b05      	ldr	r3, [pc, #20]	@ (8002400 <Handle_Servo+0x34>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f240 726c 	movw	r2, #1900	@ 0x76c
 80023f0:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 80023f2:	bf00      	nop
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr
 80023fe:	bf00      	nop
 8002400:	2000031c 	.word	0x2000031c

08002404 <Handle_RFID>:

void Handle_RFID(uint32_t current_time) {
 8002404:	b580      	push	{r7, lr}
 8002406:	b08a      	sub	sp, #40	@ 0x28
 8002408:	af02      	add	r7, sp, #8
 800240a:	6078      	str	r0, [r7, #4]
    switch (mfrc522_state) {
 800240c:	4b95      	ldr	r3, [pc, #596]	@ (8002664 <Handle_RFID+0x260>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	2b07      	cmp	r3, #7
 8002412:	f200 835b 	bhi.w	8002acc <Handle_RFID+0x6c8>
 8002416:	a201      	add	r2, pc, #4	@ (adr r2, 800241c <Handle_RFID+0x18>)
 8002418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241c:	0800243d 	.word	0x0800243d
 8002420:	08002579 	.word	0x08002579
 8002424:	080025af 	.word	0x080025af
 8002428:	080026a1 	.word	0x080026a1
 800242c:	08002807 	.word	0x08002807
 8002430:	08002837 	.word	0x08002837
 8002434:	08002851 	.word	0x08002851
 8002438:	0800291d 	.word	0x0800291d
        case MFRC522_STATE_IDLE:
            mfrc_tag_present = 0;
 800243c:	4b8a      	ldr	r3, [pc, #552]	@ (8002668 <Handle_RFID+0x264>)
 800243e:	2200      	movs	r2, #0
 8002440:	701a      	strb	r2, [r3, #0]
            memset(mfrc_uid, 0, MFRC522_UID_SIZE);
 8002442:	2205      	movs	r2, #5
 8002444:	2100      	movs	r1, #0
 8002446:	4889      	ldr	r0, [pc, #548]	@ (800266c <Handle_RFID+0x268>)
 8002448:	f007 f8d3 	bl	80095f2 <memset>
            mfrc_status = MFRC522_Request(PICC_REQIDL, mfrc_uid);
 800244c:	4987      	ldr	r1, [pc, #540]	@ (800266c <Handle_RFID+0x268>)
 800244e:	2026      	movs	r0, #38	@ 0x26
 8002450:	f7ff fc83 	bl	8001d5a <MFRC522_Request>
 8002454:	4603      	mov	r3, r0
 8002456:	461a      	mov	r2, r3
 8002458:	4b85      	ldr	r3, [pc, #532]	@ (8002670 <Handle_RFID+0x26c>)
 800245a:	701a      	strb	r2, [r3, #0]
            if (mfrc_status == MI_OK) {
 800245c:	4b84      	ldr	r3, [pc, #528]	@ (8002670 <Handle_RFID+0x26c>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	2b00      	cmp	r3, #0
 8002462:	d10d      	bne.n	8002480 <Handle_RFID+0x7c>
                mfrc_status = MFRC522_Anticoll(mfrc_uid);
 8002464:	4881      	ldr	r0, [pc, #516]	@ (800266c <Handle_RFID+0x268>)
 8002466:	f7ff fd86 	bl	8001f76 <MFRC522_Anticoll>
 800246a:	4603      	mov	r3, r0
 800246c:	461a      	mov	r2, r3
 800246e:	4b80      	ldr	r3, [pc, #512]	@ (8002670 <Handle_RFID+0x26c>)
 8002470:	701a      	strb	r2, [r3, #0]
                if (mfrc_status == MI_OK) {
 8002472:	4b7f      	ldr	r3, [pc, #508]	@ (8002670 <Handle_RFID+0x26c>)
 8002474:	781b      	ldrb	r3, [r3, #0]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d102      	bne.n	8002480 <Handle_RFID+0x7c>
                    mfrc_tag_present = 1;
 800247a:	4b7b      	ldr	r3, [pc, #492]	@ (8002668 <Handle_RFID+0x264>)
 800247c:	2201      	movs	r2, #1
 800247e:	701a      	strb	r2, [r3, #0]
                }
            }

            if (mfrc_tag_present) {
 8002480:	4b79      	ldr	r3, [pc, #484]	@ (8002668 <Handle_RFID+0x264>)
 8002482:	781b      	ldrb	r3, [r3, #0]
 8002484:	2b00      	cmp	r3, #0
 8002486:	f000 8312 	beq.w	8002aae <Handle_RFID+0x6aa>
                uint8_t access_granted = 0;
 800248a:	2300      	movs	r3, #0
 800248c:	77fb      	strb	r3, [r7, #31]
                int secondary_card_scanned_index = -1;
 800248e:	f04f 33ff 	mov.w	r3, #4294967295
 8002492:	61bb      	str	r3, [r7, #24]
                if (memcmp(mfrc_uid, authorized_uid_primary, 4) == 0) {
 8002494:	2204      	movs	r2, #4
 8002496:	4977      	ldr	r1, [pc, #476]	@ (8002674 <Handle_RFID+0x270>)
 8002498:	4874      	ldr	r0, [pc, #464]	@ (800266c <Handle_RFID+0x268>)
 800249a:	f007 f89a 	bl	80095d2 <memcmp>
 800249e:	4603      	mov	r3, r0
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d102      	bne.n	80024aa <Handle_RFID+0xa6>
                    access_granted = 1;
 80024a4:	2301      	movs	r3, #1
 80024a6:	77fb      	strb	r3, [r7, #31]
 80024a8:	e01a      	b.n	80024e0 <Handle_RFID+0xdc>
                } else {
                    for (int i = 0; i < num_secondary_cards_registered; i++) {
 80024aa:	2300      	movs	r3, #0
 80024ac:	617b      	str	r3, [r7, #20]
 80024ae:	e011      	b.n	80024d4 <Handle_RFID+0xd0>
                        if (memcmp(mfrc_uid, authorized_uids_secondary[i], 4) == 0) {
 80024b0:	697b      	ldr	r3, [r7, #20]
 80024b2:	009b      	lsls	r3, r3, #2
 80024b4:	4a70      	ldr	r2, [pc, #448]	@ (8002678 <Handle_RFID+0x274>)
 80024b6:	4413      	add	r3, r2
 80024b8:	2204      	movs	r2, #4
 80024ba:	4619      	mov	r1, r3
 80024bc:	486b      	ldr	r0, [pc, #428]	@ (800266c <Handle_RFID+0x268>)
 80024be:	f007 f888 	bl	80095d2 <memcmp>
 80024c2:	4603      	mov	r3, r0
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d102      	bne.n	80024ce <Handle_RFID+0xca>
                            secondary_card_scanned_index = i;
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	61bb      	str	r3, [r7, #24]
                            break;
 80024cc:	e008      	b.n	80024e0 <Handle_RFID+0xdc>
                    for (int i = 0; i < num_secondary_cards_registered; i++) {
 80024ce:	697b      	ldr	r3, [r7, #20]
 80024d0:	3301      	adds	r3, #1
 80024d2:	617b      	str	r3, [r7, #20]
 80024d4:	4b69      	ldr	r3, [pc, #420]	@ (800267c <Handle_RFID+0x278>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	461a      	mov	r2, r3
 80024da:	697b      	ldr	r3, [r7, #20]
 80024dc:	4293      	cmp	r3, r2
 80024de:	dbe7      	blt.n	80024b0 <Handle_RFID+0xac>
                        }
                    }
                }

                if (access_granted) {
 80024e0:	7ffb      	ldrb	r3, [r7, #31]
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d012      	beq.n	800250c <Handle_RFID+0x108>
                    draw_fast_string(30, 100, COLOR_GREEN, COLOR_BLACK, "OPEN SUCCESSFULLY ");
 80024e6:	4b66      	ldr	r3, [pc, #408]	@ (8002680 <Handle_RFID+0x27c>)
 80024e8:	9300      	str	r3, [sp, #0]
 80024ea:	2300      	movs	r3, #0
 80024ec:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80024f0:	2164      	movs	r1, #100	@ 0x64
 80024f2:	201e      	movs	r0, #30
 80024f4:	f7ff f9a4 	bl	8001840 <draw_fast_string>
                    Handle_Servo(1); // Mở cửa
 80024f8:	2001      	movs	r0, #1
 80024fa:	f7ff ff67 	bl	80023cc <Handle_Servo>
                    mfrc522_delay_start_time = current_time;
 80024fe:	4a61      	ldr	r2, [pc, #388]	@ (8002684 <Handle_RFID+0x280>)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6013      	str	r3, [r2, #0]
                    mfrc522_state = MFRC522_STATE_OPEN_DELAY;
 8002504:	4b57      	ldr	r3, [pc, #348]	@ (8002664 <Handle_RFID+0x260>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
                    draw_fast_string(50, 100, COLOR_RED, COLOR_BLACK, "  WRONG CARD   ");
                    mfrc522_delay_start_time = current_time;
                    mfrc522_state = MFRC522_STATE_AWAITING_PRIMARY_FOR_REGISTRATION;
                }
            }
            break;
 800250a:	e2d0      	b.n	8002aae <Handle_RFID+0x6aa>
                } else if (secondary_card_scanned_index != -1) {
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002512:	d01a      	beq.n	800254a <Handle_RFID+0x146>
                    draw_fast_string(10, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 8002514:	4b5c      	ldr	r3, [pc, #368]	@ (8002688 <Handle_RFID+0x284>)
 8002516:	9300      	str	r3, [sp, #0]
 8002518:	2300      	movs	r3, #0
 800251a:	2200      	movs	r2, #0
 800251c:	2164      	movs	r1, #100	@ 0x64
 800251e:	200a      	movs	r0, #10
 8002520:	f7ff f98e 	bl	8001840 <draw_fast_string>
                    draw_fast_string(50, 100, COLOR_YELLOW, COLOR_BLACK, "SUB CARD");
 8002524:	4b59      	ldr	r3, [pc, #356]	@ (800268c <Handle_RFID+0x288>)
 8002526:	9300      	str	r3, [sp, #0]
 8002528:	2300      	movs	r3, #0
 800252a:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800252e:	2164      	movs	r1, #100	@ 0x64
 8002530:	2032      	movs	r0, #50	@ 0x32
 8002532:	f7ff f985 	bl	8001840 <draw_fast_string>
                    card_to_delete_index = secondary_card_scanned_index;
 8002536:	4a56      	ldr	r2, [pc, #344]	@ (8002690 <Handle_RFID+0x28c>)
 8002538:	69bb      	ldr	r3, [r7, #24]
 800253a:	6013      	str	r3, [r2, #0]
                    mfrc522_delay_start_time = current_time;
 800253c:	4a51      	ldr	r2, [pc, #324]	@ (8002684 <Handle_RFID+0x280>)
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6013      	str	r3, [r2, #0]
                    mfrc522_state = MFRC522_STATE_AWAITING_DELETE_CONFIRM1;
 8002542:	4b48      	ldr	r3, [pc, #288]	@ (8002664 <Handle_RFID+0x260>)
 8002544:	2206      	movs	r2, #6
 8002546:	701a      	strb	r2, [r3, #0]
            break;
 8002548:	e2b1      	b.n	8002aae <Handle_RFID+0x6aa>
                    draw_fast_string(10, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 800254a:	4b4f      	ldr	r3, [pc, #316]	@ (8002688 <Handle_RFID+0x284>)
 800254c:	9300      	str	r3, [sp, #0]
 800254e:	2300      	movs	r3, #0
 8002550:	2200      	movs	r2, #0
 8002552:	2164      	movs	r1, #100	@ 0x64
 8002554:	200a      	movs	r0, #10
 8002556:	f7ff f973 	bl	8001840 <draw_fast_string>
                    draw_fast_string(50, 100, COLOR_RED, COLOR_BLACK, "  WRONG CARD   ");
 800255a:	4b4e      	ldr	r3, [pc, #312]	@ (8002694 <Handle_RFID+0x290>)
 800255c:	9300      	str	r3, [sp, #0]
 800255e:	2300      	movs	r3, #0
 8002560:	221f      	movs	r2, #31
 8002562:	2164      	movs	r1, #100	@ 0x64
 8002564:	2032      	movs	r0, #50	@ 0x32
 8002566:	f7ff f96b 	bl	8001840 <draw_fast_string>
                    mfrc522_delay_start_time = current_time;
 800256a:	4a46      	ldr	r2, [pc, #280]	@ (8002684 <Handle_RFID+0x280>)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6013      	str	r3, [r2, #0]
                    mfrc522_state = MFRC522_STATE_AWAITING_PRIMARY_FOR_REGISTRATION;
 8002570:	4b3c      	ldr	r3, [pc, #240]	@ (8002664 <Handle_RFID+0x260>)
 8002572:	2202      	movs	r2, #2
 8002574:	701a      	strb	r2, [r3, #0]
            break;
 8002576:	e29a      	b.n	8002aae <Handle_RFID+0x6aa>

        case MFRC522_STATE_OPEN_DELAY:
            if (current_time - mfrc522_delay_start_time >= MFRC522_OPEN_DELAY_MS) {
 8002578:	4b42      	ldr	r3, [pc, #264]	@ (8002684 <Handle_RFID+0x280>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	687a      	ldr	r2, [r7, #4]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002584:	4293      	cmp	r3, r2
 8002586:	f0c0 8294 	bcc.w	8002ab2 <Handle_RFID+0x6ae>
                Handle_Servo(0); // Đóng cửa
 800258a:	2000      	movs	r0, #0
 800258c:	f7ff ff1e 	bl	80023cc <Handle_Servo>
                draw_fast_string(30, 100, COLOR_BLACK, COLOR_BLACK, "                                                ");
 8002590:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <Handle_RFID+0x294>)
 8002592:	9300      	str	r3, [sp, #0]
 8002594:	2300      	movs	r3, #0
 8002596:	2200      	movs	r2, #0
 8002598:	2164      	movs	r1, #100	@ 0x64
 800259a:	201e      	movs	r0, #30
 800259c:	f7ff f950 	bl	8001840 <draw_fast_string>
                mfrc522_delay_start_time = current_time;
 80025a0:	4a38      	ldr	r2, [pc, #224]	@ (8002684 <Handle_RFID+0x280>)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6013      	str	r3, [r2, #0]
                mfrc522_state = MFRC522_STATE_POST_OPERATION_DELAY;
 80025a6:	4b2f      	ldr	r3, [pc, #188]	@ (8002664 <Handle_RFID+0x260>)
 80025a8:	2205      	movs	r2, #5
 80025aa:	701a      	strb	r2, [r3, #0]
            }
            break;
 80025ac:	e281      	b.n	8002ab2 <Handle_RFID+0x6ae>

        case MFRC522_STATE_AWAITING_PRIMARY_FOR_REGISTRATION:
            if (current_time - mfrc522_delay_start_time >= MFRC522_AWAIT_PRIMARY_DELAY_MS) {
 80025ae:	4b35      	ldr	r3, [pc, #212]	@ (8002684 <Handle_RFID+0x280>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	687a      	ldr	r2, [r7, #4]
 80025b4:	1ad3      	subs	r3, r2, r3
 80025b6:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 80025ba:	4293      	cmp	r3, r2
 80025bc:	d30e      	bcc.n	80025dc <Handle_RFID+0x1d8>
                draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 80025be:	4b32      	ldr	r3, [pc, #200]	@ (8002688 <Handle_RFID+0x284>)
 80025c0:	9300      	str	r3, [sp, #0]
 80025c2:	2300      	movs	r3, #0
 80025c4:	2200      	movs	r2, #0
 80025c6:	2164      	movs	r1, #100	@ 0x64
 80025c8:	2032      	movs	r0, #50	@ 0x32
 80025ca:	f7ff f939 	bl	8001840 <draw_fast_string>
                mfrc522_delay_start_time = current_time;
 80025ce:	4a2d      	ldr	r2, [pc, #180]	@ (8002684 <Handle_RFID+0x280>)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	6013      	str	r3, [r2, #0]
                mfrc522_state = MFRC522_STATE_POST_OPERATION_DELAY;
 80025d4:	4b23      	ldr	r3, [pc, #140]	@ (8002664 <Handle_RFID+0x260>)
 80025d6:	2205      	movs	r2, #5
 80025d8:	701a      	strb	r2, [r3, #0]
                        mfrc522_state = MFRC522_STATE_REGISTRATION_MODE;
                    }
                    HAL_Delay(300);
                }
            }
            break;
 80025da:	e26c      	b.n	8002ab6 <Handle_RFID+0x6b2>
                mfrc_tag_present = 0;
 80025dc:	4b22      	ldr	r3, [pc, #136]	@ (8002668 <Handle_RFID+0x264>)
 80025de:	2200      	movs	r2, #0
 80025e0:	701a      	strb	r2, [r3, #0]
                mfrc_status = MFRC522_Request(PICC_REQIDL, mfrc_uid);
 80025e2:	4922      	ldr	r1, [pc, #136]	@ (800266c <Handle_RFID+0x268>)
 80025e4:	2026      	movs	r0, #38	@ 0x26
 80025e6:	f7ff fbb8 	bl	8001d5a <MFRC522_Request>
 80025ea:	4603      	mov	r3, r0
 80025ec:	461a      	mov	r2, r3
 80025ee:	4b20      	ldr	r3, [pc, #128]	@ (8002670 <Handle_RFID+0x26c>)
 80025f0:	701a      	strb	r2, [r3, #0]
                if (mfrc_status == MI_OK) {
 80025f2:	4b1f      	ldr	r3, [pc, #124]	@ (8002670 <Handle_RFID+0x26c>)
 80025f4:	781b      	ldrb	r3, [r3, #0]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d10d      	bne.n	8002616 <Handle_RFID+0x212>
                    mfrc_status = MFRC522_Anticoll(mfrc_uid);
 80025fa:	481c      	ldr	r0, [pc, #112]	@ (800266c <Handle_RFID+0x268>)
 80025fc:	f7ff fcbb 	bl	8001f76 <MFRC522_Anticoll>
 8002600:	4603      	mov	r3, r0
 8002602:	461a      	mov	r2, r3
 8002604:	4b1a      	ldr	r3, [pc, #104]	@ (8002670 <Handle_RFID+0x26c>)
 8002606:	701a      	strb	r2, [r3, #0]
                    if (mfrc_status == MI_OK) {
 8002608:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <Handle_RFID+0x26c>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <Handle_RFID+0x212>
                        mfrc_tag_present = 1;
 8002610:	4b15      	ldr	r3, [pc, #84]	@ (8002668 <Handle_RFID+0x264>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
                if (mfrc_tag_present) {
 8002616:	4b14      	ldr	r3, [pc, #80]	@ (8002668 <Handle_RFID+0x264>)
 8002618:	781b      	ldrb	r3, [r3, #0]
 800261a:	2b00      	cmp	r3, #0
 800261c:	f000 824b 	beq.w	8002ab6 <Handle_RFID+0x6b2>
                    if (memcmp(mfrc_uid, authorized_uid_primary, 4) == 0) {
 8002620:	2204      	movs	r2, #4
 8002622:	4914      	ldr	r1, [pc, #80]	@ (8002674 <Handle_RFID+0x270>)
 8002624:	4811      	ldr	r0, [pc, #68]	@ (800266c <Handle_RFID+0x268>)
 8002626:	f006 ffd4 	bl	80095d2 <memcmp>
 800262a:	4603      	mov	r3, r0
 800262c:	2b00      	cmp	r3, #0
 800262e:	d113      	bne.n	8002658 <Handle_RFID+0x254>
                        draw_fast_string(10, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 8002630:	4b15      	ldr	r3, [pc, #84]	@ (8002688 <Handle_RFID+0x284>)
 8002632:	9300      	str	r3, [sp, #0]
 8002634:	2300      	movs	r3, #0
 8002636:	2200      	movs	r2, #0
 8002638:	2164      	movs	r1, #100	@ 0x64
 800263a:	200a      	movs	r0, #10
 800263c:	f7ff f900 	bl	8001840 <draw_fast_string>
                        draw_fast_string(50, 100, COLOR_BLUE, COLOR_BLACK, "REGISTER CARD");
 8002640:	4b16      	ldr	r3, [pc, #88]	@ (800269c <Handle_RFID+0x298>)
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2300      	movs	r3, #0
 8002646:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 800264a:	2164      	movs	r1, #100	@ 0x64
 800264c:	2032      	movs	r0, #50	@ 0x32
 800264e:	f7ff f8f7 	bl	8001840 <draw_fast_string>
                        mfrc522_state = MFRC522_STATE_REGISTRATION_MODE;
 8002652:	4b04      	ldr	r3, [pc, #16]	@ (8002664 <Handle_RFID+0x260>)
 8002654:	2203      	movs	r2, #3
 8002656:	701a      	strb	r2, [r3, #0]
                    HAL_Delay(300);
 8002658:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 800265c:	f001 fd94 	bl	8004188 <HAL_Delay>
            break;
 8002660:	e229      	b.n	8002ab6 <Handle_RFID+0x6b2>
 8002662:	bf00      	nop
 8002664:	2000047d 	.word	0x2000047d
 8002668:	20000471 	.word	0x20000471
 800266c:	2000046c 	.word	0x2000046c
 8002670:	20000468 	.word	0x20000468
 8002674:	0800bcd4 	.word	0x0800bcd4
 8002678:	20000474 	.word	0x20000474
 800267c:	2000047c 	.word	0x2000047c
 8002680:	0800b668 	.word	0x0800b668
 8002684:	20000480 	.word	0x20000480
 8002688:	0800b67c 	.word	0x0800b67c
 800268c:	0800b698 	.word	0x0800b698
 8002690:	20000014 	.word	0x20000014
 8002694:	0800b6a4 	.word	0x0800b6a4
 8002698:	0800b6b4 	.word	0x0800b6b4
 800269c:	0800b6e8 	.word	0x0800b6e8

        case MFRC522_STATE_REGISTRATION_MODE:
            mfrc_tag_present = 0;
 80026a0:	4baa      	ldr	r3, [pc, #680]	@ (800294c <Handle_RFID+0x548>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
            mfrc_status = MFRC522_Request(PICC_REQIDL, mfrc_uid);
 80026a6:	49aa      	ldr	r1, [pc, #680]	@ (8002950 <Handle_RFID+0x54c>)
 80026a8:	2026      	movs	r0, #38	@ 0x26
 80026aa:	f7ff fb56 	bl	8001d5a <MFRC522_Request>
 80026ae:	4603      	mov	r3, r0
 80026b0:	461a      	mov	r2, r3
 80026b2:	4ba8      	ldr	r3, [pc, #672]	@ (8002954 <Handle_RFID+0x550>)
 80026b4:	701a      	strb	r2, [r3, #0]
            if (mfrc_status == MI_OK) {
 80026b6:	4ba7      	ldr	r3, [pc, #668]	@ (8002954 <Handle_RFID+0x550>)
 80026b8:	781b      	ldrb	r3, [r3, #0]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d10d      	bne.n	80026da <Handle_RFID+0x2d6>
                mfrc_status = MFRC522_Anticoll(mfrc_uid);
 80026be:	48a4      	ldr	r0, [pc, #656]	@ (8002950 <Handle_RFID+0x54c>)
 80026c0:	f7ff fc59 	bl	8001f76 <MFRC522_Anticoll>
 80026c4:	4603      	mov	r3, r0
 80026c6:	461a      	mov	r2, r3
 80026c8:	4ba2      	ldr	r3, [pc, #648]	@ (8002954 <Handle_RFID+0x550>)
 80026ca:	701a      	strb	r2, [r3, #0]
                if (mfrc_status == MI_OK) {
 80026cc:	4ba1      	ldr	r3, [pc, #644]	@ (8002954 <Handle_RFID+0x550>)
 80026ce:	781b      	ldrb	r3, [r3, #0]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d102      	bne.n	80026da <Handle_RFID+0x2d6>
                    mfrc_tag_present = 1;
 80026d4:	4b9d      	ldr	r3, [pc, #628]	@ (800294c <Handle_RFID+0x548>)
 80026d6:	2201      	movs	r2, #1
 80026d8:	701a      	strb	r2, [r3, #0]
                }
            }
            if (mfrc_tag_present) {
 80026da:	4b9c      	ldr	r3, [pc, #624]	@ (800294c <Handle_RFID+0x548>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	f000 81eb 	beq.w	8002aba <Handle_RFID+0x6b6>
                if (memcmp(mfrc_uid, authorized_uid_primary, 4) == 0) {
 80026e4:	2204      	movs	r2, #4
 80026e6:	499c      	ldr	r1, [pc, #624]	@ (8002958 <Handle_RFID+0x554>)
 80026e8:	4899      	ldr	r0, [pc, #612]	@ (8002950 <Handle_RFID+0x54c>)
 80026ea:	f006 ff72 	bl	80095d2 <memcmp>
 80026ee:	4603      	mov	r3, r0
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d10e      	bne.n	8002712 <Handle_RFID+0x30e>
                    draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 80026f4:	4b99      	ldr	r3, [pc, #612]	@ (800295c <Handle_RFID+0x558>)
 80026f6:	9300      	str	r3, [sp, #0]
 80026f8:	2300      	movs	r3, #0
 80026fa:	2200      	movs	r2, #0
 80026fc:	2164      	movs	r1, #100	@ 0x64
 80026fe:	2032      	movs	r0, #50	@ 0x32
 8002700:	f7ff f89e 	bl	8001840 <draw_fast_string>
                    mfrc522_delay_start_time = current_time;
 8002704:	4a96      	ldr	r2, [pc, #600]	@ (8002960 <Handle_RFID+0x55c>)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6013      	str	r3, [r2, #0]
                    mfrc522_state = MFRC522_STATE_POST_OPERATION_DELAY;
 800270a:	4b96      	ldr	r3, [pc, #600]	@ (8002964 <Handle_RFID+0x560>)
 800270c:	2205      	movs	r2, #5
 800270e:	701a      	strb	r2, [r3, #0]
                            mfrc522_state = MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY;
                        }
                    }
                }
            }
            break;
 8002710:	e1d3      	b.n	8002aba <Handle_RFID+0x6b6>
                    uint8_t already_registered_as_secondary = 0;
 8002712:	2300      	movs	r3, #0
 8002714:	74fb      	strb	r3, [r7, #19]
                    for (int i = 0; i < num_secondary_cards_registered; i++) {
 8002716:	2300      	movs	r3, #0
 8002718:	60fb      	str	r3, [r7, #12]
 800271a:	e011      	b.n	8002740 <Handle_RFID+0x33c>
                        if (memcmp(mfrc_uid, authorized_uids_secondary[i], 4) == 0) {
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	009b      	lsls	r3, r3, #2
 8002720:	4a91      	ldr	r2, [pc, #580]	@ (8002968 <Handle_RFID+0x564>)
 8002722:	4413      	add	r3, r2
 8002724:	2204      	movs	r2, #4
 8002726:	4619      	mov	r1, r3
 8002728:	4889      	ldr	r0, [pc, #548]	@ (8002950 <Handle_RFID+0x54c>)
 800272a:	f006 ff52 	bl	80095d2 <memcmp>
 800272e:	4603      	mov	r3, r0
 8002730:	2b00      	cmp	r3, #0
 8002732:	d102      	bne.n	800273a <Handle_RFID+0x336>
                            already_registered_as_secondary = 1;
 8002734:	2301      	movs	r3, #1
 8002736:	74fb      	strb	r3, [r7, #19]
                            break;
 8002738:	e008      	b.n	800274c <Handle_RFID+0x348>
                    for (int i = 0; i < num_secondary_cards_registered; i++) {
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	3301      	adds	r3, #1
 800273e:	60fb      	str	r3, [r7, #12]
 8002740:	4b8a      	ldr	r3, [pc, #552]	@ (800296c <Handle_RFID+0x568>)
 8002742:	781b      	ldrb	r3, [r3, #0]
 8002744:	461a      	mov	r2, r3
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	4293      	cmp	r3, r2
 800274a:	dbe7      	blt.n	800271c <Handle_RFID+0x318>
                    if (already_registered_as_secondary) {
 800274c:	7cfb      	ldrb	r3, [r7, #19]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d017      	beq.n	8002782 <Handle_RFID+0x37e>
                        draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 8002752:	4b82      	ldr	r3, [pc, #520]	@ (800295c <Handle_RFID+0x558>)
 8002754:	9300      	str	r3, [sp, #0]
 8002756:	2300      	movs	r3, #0
 8002758:	2200      	movs	r2, #0
 800275a:	2164      	movs	r1, #100	@ 0x64
 800275c:	2032      	movs	r0, #50	@ 0x32
 800275e:	f7ff f86f 	bl	8001840 <draw_fast_string>
                        draw_fast_string(50, 100, COLOR_ORANGE, COLOR_BLACK, "CARD EXISTENCE");
 8002762:	4b83      	ldr	r3, [pc, #524]	@ (8002970 <Handle_RFID+0x56c>)
 8002764:	9300      	str	r3, [sp, #0]
 8002766:	2300      	movs	r3, #0
 8002768:	f240 22bf 	movw	r2, #703	@ 0x2bf
 800276c:	2164      	movs	r1, #100	@ 0x64
 800276e:	2032      	movs	r0, #50	@ 0x32
 8002770:	f7ff f866 	bl	8001840 <draw_fast_string>
                        mfrc522_delay_start_time = current_time;
 8002774:	4a7a      	ldr	r2, [pc, #488]	@ (8002960 <Handle_RFID+0x55c>)
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	6013      	str	r3, [r2, #0]
                        mfrc522_state = MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY;
 800277a:	4b7a      	ldr	r3, [pc, #488]	@ (8002964 <Handle_RFID+0x560>)
 800277c:	2204      	movs	r2, #4
 800277e:	701a      	strb	r2, [r3, #0]
            break;
 8002780:	e19b      	b.n	8002aba <Handle_RFID+0x6b6>
                        if (num_secondary_cards_registered < MAX_SECONDARY_CARDS) {
 8002782:	4b7a      	ldr	r3, [pc, #488]	@ (800296c <Handle_RFID+0x568>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	2b01      	cmp	r3, #1
 8002788:	d825      	bhi.n	80027d6 <Handle_RFID+0x3d2>
                            memcpy(authorized_uids_secondary[num_secondary_cards_registered], mfrc_uid, 4);
 800278a:	4b78      	ldr	r3, [pc, #480]	@ (800296c <Handle_RFID+0x568>)
 800278c:	781b      	ldrb	r3, [r3, #0]
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	4a75      	ldr	r2, [pc, #468]	@ (8002968 <Handle_RFID+0x564>)
 8002792:	4413      	add	r3, r2
 8002794:	4a6e      	ldr	r2, [pc, #440]	@ (8002950 <Handle_RFID+0x54c>)
 8002796:	6812      	ldr	r2, [r2, #0]
 8002798:	601a      	str	r2, [r3, #0]
                            num_secondary_cards_registered++;
 800279a:	4b74      	ldr	r3, [pc, #464]	@ (800296c <Handle_RFID+0x568>)
 800279c:	781b      	ldrb	r3, [r3, #0]
 800279e:	3301      	adds	r3, #1
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b72      	ldr	r3, [pc, #456]	@ (800296c <Handle_RFID+0x568>)
 80027a4:	701a      	strb	r2, [r3, #0]
                            draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 80027a6:	4b6d      	ldr	r3, [pc, #436]	@ (800295c <Handle_RFID+0x558>)
 80027a8:	9300      	str	r3, [sp, #0]
 80027aa:	2300      	movs	r3, #0
 80027ac:	2200      	movs	r2, #0
 80027ae:	2164      	movs	r1, #100	@ 0x64
 80027b0:	2032      	movs	r0, #50	@ 0x32
 80027b2:	f7ff f845 	bl	8001840 <draw_fast_string>
                            draw_fast_string(50, 100, COLOR_GREEN, COLOR_BLACK, "ADD SUCCESSFULL");
 80027b6:	4b6f      	ldr	r3, [pc, #444]	@ (8002974 <Handle_RFID+0x570>)
 80027b8:	9300      	str	r3, [sp, #0]
 80027ba:	2300      	movs	r3, #0
 80027bc:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 80027c0:	2164      	movs	r1, #100	@ 0x64
 80027c2:	2032      	movs	r0, #50	@ 0x32
 80027c4:	f7ff f83c 	bl	8001840 <draw_fast_string>
                            mfrc522_delay_start_time = current_time;
 80027c8:	4a65      	ldr	r2, [pc, #404]	@ (8002960 <Handle_RFID+0x55c>)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6013      	str	r3, [r2, #0]
                            mfrc522_state = MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY;
 80027ce:	4b65      	ldr	r3, [pc, #404]	@ (8002964 <Handle_RFID+0x560>)
 80027d0:	2204      	movs	r2, #4
 80027d2:	701a      	strb	r2, [r3, #0]
            break;
 80027d4:	e171      	b.n	8002aba <Handle_RFID+0x6b6>
                            draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 80027d6:	4b61      	ldr	r3, [pc, #388]	@ (800295c <Handle_RFID+0x558>)
 80027d8:	9300      	str	r3, [sp, #0]
 80027da:	2300      	movs	r3, #0
 80027dc:	2200      	movs	r2, #0
 80027de:	2164      	movs	r1, #100	@ 0x64
 80027e0:	2032      	movs	r0, #50	@ 0x32
 80027e2:	f7ff f82d 	bl	8001840 <draw_fast_string>
                            draw_fast_string(50, 100, COLOR_ORANGE, COLOR_BLACK, "ENOUGH CARDS");
 80027e6:	4b64      	ldr	r3, [pc, #400]	@ (8002978 <Handle_RFID+0x574>)
 80027e8:	9300      	str	r3, [sp, #0]
 80027ea:	2300      	movs	r3, #0
 80027ec:	f240 22bf 	movw	r2, #703	@ 0x2bf
 80027f0:	2164      	movs	r1, #100	@ 0x64
 80027f2:	2032      	movs	r0, #50	@ 0x32
 80027f4:	f7ff f824 	bl	8001840 <draw_fast_string>
                            mfrc522_delay_start_time = current_time;
 80027f8:	4a59      	ldr	r2, [pc, #356]	@ (8002960 <Handle_RFID+0x55c>)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	6013      	str	r3, [r2, #0]
                            mfrc522_state = MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY;
 80027fe:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <Handle_RFID+0x560>)
 8002800:	2204      	movs	r2, #4
 8002802:	701a      	strb	r2, [r3, #0]
            break;
 8002804:	e159      	b.n	8002aba <Handle_RFID+0x6b6>

        case MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY:
            if (current_time - mfrc522_delay_start_time >= MFRC522_REGISTRATION_SUCCESS_DELAY_MS) {
 8002806:	4b56      	ldr	r3, [pc, #344]	@ (8002960 <Handle_RFID+0x55c>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	687a      	ldr	r2, [r7, #4]
 800280c:	1ad3      	subs	r3, r2, r3
 800280e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002812:	4293      	cmp	r3, r2
 8002814:	f0c0 8153 	bcc.w	8002abe <Handle_RFID+0x6ba>
                draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 8002818:	4b50      	ldr	r3, [pc, #320]	@ (800295c <Handle_RFID+0x558>)
 800281a:	9300      	str	r3, [sp, #0]
 800281c:	2300      	movs	r3, #0
 800281e:	2200      	movs	r2, #0
 8002820:	2164      	movs	r1, #100	@ 0x64
 8002822:	2032      	movs	r0, #50	@ 0x32
 8002824:	f7ff f80c 	bl	8001840 <draw_fast_string>
                mfrc522_delay_start_time = current_time;
 8002828:	4a4d      	ldr	r2, [pc, #308]	@ (8002960 <Handle_RFID+0x55c>)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	6013      	str	r3, [r2, #0]
                mfrc522_state = MFRC522_STATE_POST_OPERATION_DELAY;
 800282e:	4b4d      	ldr	r3, [pc, #308]	@ (8002964 <Handle_RFID+0x560>)
 8002830:	2205      	movs	r2, #5
 8002832:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002834:	e143      	b.n	8002abe <Handle_RFID+0x6ba>

        case MFRC522_STATE_POST_OPERATION_DELAY:
            if (current_time - mfrc522_delay_start_time >= MFRC522_POST_OP_DELAY_MS) {
 8002836:	4b4a      	ldr	r3, [pc, #296]	@ (8002960 <Handle_RFID+0x55c>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	1ad3      	subs	r3, r2, r3
 800283e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8002842:	4293      	cmp	r3, r2
 8002844:	f0c0 813d 	bcc.w	8002ac2 <Handle_RFID+0x6be>
                mfrc522_state = MFRC522_STATE_IDLE;
 8002848:	4b46      	ldr	r3, [pc, #280]	@ (8002964 <Handle_RFID+0x560>)
 800284a:	2200      	movs	r2, #0
 800284c:	701a      	strb	r2, [r3, #0]
            }
            break;
 800284e:	e138      	b.n	8002ac2 <Handle_RFID+0x6be>

        case MFRC522_STATE_AWAITING_DELETE_CONFIRM1:
            if (current_time - mfrc522_delay_start_time >= MFRC522_DELETE_WINDOW1_MS) {
 8002850:	4b43      	ldr	r3, [pc, #268]	@ (8002960 <Handle_RFID+0x55c>)
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	1ad3      	subs	r3, r2, r3
 8002858:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800285c:	4293      	cmp	r3, r2
 800285e:	d316      	bcc.n	800288e <Handle_RFID+0x48a>
                draw_fast_string(30, 100, COLOR_GREEN, COLOR_BLACK, "OPEN SUCCESSFULLY ");
 8002860:	4b46      	ldr	r3, [pc, #280]	@ (800297c <Handle_RFID+0x578>)
 8002862:	9300      	str	r3, [sp, #0]
 8002864:	2300      	movs	r3, #0
 8002866:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 800286a:	2164      	movs	r1, #100	@ 0x64
 800286c:	201e      	movs	r0, #30
 800286e:	f7fe ffe7 	bl	8001840 <draw_fast_string>
                Handle_Servo(1); // Mở cửa
 8002872:	2001      	movs	r0, #1
 8002874:	f7ff fdaa 	bl	80023cc <Handle_Servo>
                mfrc522_delay_start_time = current_time;
 8002878:	4a39      	ldr	r2, [pc, #228]	@ (8002960 <Handle_RFID+0x55c>)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6013      	str	r3, [r2, #0]
                mfrc522_state = MFRC522_STATE_OPEN_DELAY;
 800287e:	4b39      	ldr	r3, [pc, #228]	@ (8002964 <Handle_RFID+0x560>)
 8002880:	2201      	movs	r2, #1
 8002882:	701a      	strb	r2, [r3, #0]
                card_to_delete_index = -1;
 8002884:	4b3e      	ldr	r3, [pc, #248]	@ (8002980 <Handle_RFID+0x57c>)
 8002886:	f04f 32ff 	mov.w	r2, #4294967295
 800288a:	601a      	str	r2, [r3, #0]
                    mfrc522_delay_start_time = current_time;
                    HAL_Delay(300);
                    mfrc522_state = MFRC522_STATE_AWAITING_DELETE_CONFIRM2;
                }
            }
            break;
 800288c:	e11b      	b.n	8002ac6 <Handle_RFID+0x6c2>
                mfrc_tag_present = 0;
 800288e:	4b2f      	ldr	r3, [pc, #188]	@ (800294c <Handle_RFID+0x548>)
 8002890:	2200      	movs	r2, #0
 8002892:	701a      	strb	r2, [r3, #0]
                mfrc_status = MFRC522_Request(PICC_REQIDL, mfrc_uid);
 8002894:	492e      	ldr	r1, [pc, #184]	@ (8002950 <Handle_RFID+0x54c>)
 8002896:	2026      	movs	r0, #38	@ 0x26
 8002898:	f7ff fa5f 	bl	8001d5a <MFRC522_Request>
 800289c:	4603      	mov	r3, r0
 800289e:	461a      	mov	r2, r3
 80028a0:	4b2c      	ldr	r3, [pc, #176]	@ (8002954 <Handle_RFID+0x550>)
 80028a2:	701a      	strb	r2, [r3, #0]
                if (mfrc_status == MI_OK) {
 80028a4:	4b2b      	ldr	r3, [pc, #172]	@ (8002954 <Handle_RFID+0x550>)
 80028a6:	781b      	ldrb	r3, [r3, #0]
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10d      	bne.n	80028c8 <Handle_RFID+0x4c4>
                    mfrc_status = MFRC522_Anticoll(mfrc_uid);
 80028ac:	4828      	ldr	r0, [pc, #160]	@ (8002950 <Handle_RFID+0x54c>)
 80028ae:	f7ff fb62 	bl	8001f76 <MFRC522_Anticoll>
 80028b2:	4603      	mov	r3, r0
 80028b4:	461a      	mov	r2, r3
 80028b6:	4b27      	ldr	r3, [pc, #156]	@ (8002954 <Handle_RFID+0x550>)
 80028b8:	701a      	strb	r2, [r3, #0]
                    if (mfrc_status == MI_OK) {
 80028ba:	4b26      	ldr	r3, [pc, #152]	@ (8002954 <Handle_RFID+0x550>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d102      	bne.n	80028c8 <Handle_RFID+0x4c4>
                        mfrc_tag_present = 1;
 80028c2:	4b22      	ldr	r3, [pc, #136]	@ (800294c <Handle_RFID+0x548>)
 80028c4:	2201      	movs	r2, #1
 80028c6:	701a      	strb	r2, [r3, #0]
                if (mfrc_tag_present && memcmp(mfrc_uid, authorized_uid_primary, 4) == 0) {
 80028c8:	4b20      	ldr	r3, [pc, #128]	@ (800294c <Handle_RFID+0x548>)
 80028ca:	781b      	ldrb	r3, [r3, #0]
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	f000 80fa 	beq.w	8002ac6 <Handle_RFID+0x6c2>
 80028d2:	2204      	movs	r2, #4
 80028d4:	4920      	ldr	r1, [pc, #128]	@ (8002958 <Handle_RFID+0x554>)
 80028d6:	481e      	ldr	r0, [pc, #120]	@ (8002950 <Handle_RFID+0x54c>)
 80028d8:	f006 fe7b 	bl	80095d2 <memcmp>
 80028dc:	4603      	mov	r3, r0
 80028de:	2b00      	cmp	r3, #0
 80028e0:	f040 80f1 	bne.w	8002ac6 <Handle_RFID+0x6c2>
                    draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 80028e4:	4b1d      	ldr	r3, [pc, #116]	@ (800295c <Handle_RFID+0x558>)
 80028e6:	9300      	str	r3, [sp, #0]
 80028e8:	2300      	movs	r3, #0
 80028ea:	2200      	movs	r2, #0
 80028ec:	2164      	movs	r1, #100	@ 0x64
 80028ee:	2032      	movs	r0, #50	@ 0x32
 80028f0:	f7fe ffa6 	bl	8001840 <draw_fast_string>
                    draw_fast_string(50, 100, COLOR_YELLOW, COLOR_BLACK, "DELETE SUB CARD?");
 80028f4:	4b23      	ldr	r3, [pc, #140]	@ (8002984 <Handle_RFID+0x580>)
 80028f6:	9300      	str	r3, [sp, #0]
 80028f8:	2300      	movs	r3, #0
 80028fa:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 80028fe:	2164      	movs	r1, #100	@ 0x64
 8002900:	2032      	movs	r0, #50	@ 0x32
 8002902:	f7fe ff9d 	bl	8001840 <draw_fast_string>
                    mfrc522_delay_start_time = current_time;
 8002906:	4a16      	ldr	r2, [pc, #88]	@ (8002960 <Handle_RFID+0x55c>)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	6013      	str	r3, [r2, #0]
                    HAL_Delay(300);
 800290c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002910:	f001 fc3a 	bl	8004188 <HAL_Delay>
                    mfrc522_state = MFRC522_STATE_AWAITING_DELETE_CONFIRM2;
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <Handle_RFID+0x560>)
 8002916:	2207      	movs	r2, #7
 8002918:	701a      	strb	r2, [r3, #0]
            break;
 800291a:	e0d4      	b.n	8002ac6 <Handle_RFID+0x6c2>

        case MFRC522_STATE_AWAITING_DELETE_CONFIRM2:
            if (current_time - mfrc522_delay_start_time >= MFRC522_DELETE_WINDOW2_MS) {
 800291c:	4b10      	ldr	r3, [pc, #64]	@ (8002960 <Handle_RFID+0x55c>)
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	687a      	ldr	r2, [r7, #4]
 8002922:	1ad3      	subs	r3, r2, r3
 8002924:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8002928:	4293      	cmp	r3, r2
 800292a:	d32d      	bcc.n	8002988 <Handle_RFID+0x584>
                draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 800292c:	4b0b      	ldr	r3, [pc, #44]	@ (800295c <Handle_RFID+0x558>)
 800292e:	9300      	str	r3, [sp, #0]
 8002930:	2300      	movs	r3, #0
 8002932:	2200      	movs	r2, #0
 8002934:	2164      	movs	r1, #100	@ 0x64
 8002936:	2032      	movs	r0, #50	@ 0x32
 8002938:	f7fe ff82 	bl	8001840 <draw_fast_string>
                mfrc522_state = MFRC522_STATE_POST_OPERATION_DELAY;
 800293c:	4b09      	ldr	r3, [pc, #36]	@ (8002964 <Handle_RFID+0x560>)
 800293e:	2205      	movs	r2, #5
 8002940:	701a      	strb	r2, [r3, #0]
                card_to_delete_index = -1;
 8002942:	4b0f      	ldr	r3, [pc, #60]	@ (8002980 <Handle_RFID+0x57c>)
 8002944:	f04f 32ff 	mov.w	r2, #4294967295
 8002948:	601a      	str	r2, [r3, #0]
                    mfrc522_delay_start_time = current_time;
                    mfrc522_state = MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY;
                    HAL_Delay(300);
                }
            }
            break;
 800294a:	e0be      	b.n	8002aca <Handle_RFID+0x6c6>
 800294c:	20000471 	.word	0x20000471
 8002950:	2000046c 	.word	0x2000046c
 8002954:	20000468 	.word	0x20000468
 8002958:	0800bcd4 	.word	0x0800bcd4
 800295c:	0800b67c 	.word	0x0800b67c
 8002960:	20000480 	.word	0x20000480
 8002964:	2000047d 	.word	0x2000047d
 8002968:	20000474 	.word	0x20000474
 800296c:	2000047c 	.word	0x2000047c
 8002970:	0800b6f8 	.word	0x0800b6f8
 8002974:	0800b708 	.word	0x0800b708
 8002978:	0800b718 	.word	0x0800b718
 800297c:	0800b668 	.word	0x0800b668
 8002980:	20000014 	.word	0x20000014
 8002984:	0800b728 	.word	0x0800b728
                mfrc_tag_present = 0;
 8002988:	4b52      	ldr	r3, [pc, #328]	@ (8002ad4 <Handle_RFID+0x6d0>)
 800298a:	2200      	movs	r2, #0
 800298c:	701a      	strb	r2, [r3, #0]
                mfrc_status = MFRC522_Request(PICC_REQIDL, mfrc_uid);
 800298e:	4952      	ldr	r1, [pc, #328]	@ (8002ad8 <Handle_RFID+0x6d4>)
 8002990:	2026      	movs	r0, #38	@ 0x26
 8002992:	f7ff f9e2 	bl	8001d5a <MFRC522_Request>
 8002996:	4603      	mov	r3, r0
 8002998:	461a      	mov	r2, r3
 800299a:	4b50      	ldr	r3, [pc, #320]	@ (8002adc <Handle_RFID+0x6d8>)
 800299c:	701a      	strb	r2, [r3, #0]
                if (mfrc_status == MI_OK) {
 800299e:	4b4f      	ldr	r3, [pc, #316]	@ (8002adc <Handle_RFID+0x6d8>)
 80029a0:	781b      	ldrb	r3, [r3, #0]
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d10d      	bne.n	80029c2 <Handle_RFID+0x5be>
                    mfrc_status = MFRC522_Anticoll(mfrc_uid);
 80029a6:	484c      	ldr	r0, [pc, #304]	@ (8002ad8 <Handle_RFID+0x6d4>)
 80029a8:	f7ff fae5 	bl	8001f76 <MFRC522_Anticoll>
 80029ac:	4603      	mov	r3, r0
 80029ae:	461a      	mov	r2, r3
 80029b0:	4b4a      	ldr	r3, [pc, #296]	@ (8002adc <Handle_RFID+0x6d8>)
 80029b2:	701a      	strb	r2, [r3, #0]
                    if (mfrc_status == MI_OK) {
 80029b4:	4b49      	ldr	r3, [pc, #292]	@ (8002adc <Handle_RFID+0x6d8>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d102      	bne.n	80029c2 <Handle_RFID+0x5be>
                        mfrc_tag_present = 1;
 80029bc:	4b45      	ldr	r3, [pc, #276]	@ (8002ad4 <Handle_RFID+0x6d0>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
                if (mfrc_tag_present && memcmp(mfrc_uid, authorized_uid_primary, 4) == 0) {
 80029c2:	4b44      	ldr	r3, [pc, #272]	@ (8002ad4 <Handle_RFID+0x6d0>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d07f      	beq.n	8002aca <Handle_RFID+0x6c6>
 80029ca:	2204      	movs	r2, #4
 80029cc:	4944      	ldr	r1, [pc, #272]	@ (8002ae0 <Handle_RFID+0x6dc>)
 80029ce:	4842      	ldr	r0, [pc, #264]	@ (8002ad8 <Handle_RFID+0x6d4>)
 80029d0:	f006 fdff 	bl	80095d2 <memcmp>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d177      	bne.n	8002aca <Handle_RFID+0x6c6>
                    if (card_to_delete_index != -1 && card_to_delete_index < num_secondary_cards_registered) {
 80029da:	4b42      	ldr	r3, [pc, #264]	@ (8002ae4 <Handle_RFID+0x6e0>)
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e2:	d045      	beq.n	8002a70 <Handle_RFID+0x66c>
 80029e4:	4b40      	ldr	r3, [pc, #256]	@ (8002ae8 <Handle_RFID+0x6e4>)
 80029e6:	781b      	ldrb	r3, [r3, #0]
 80029e8:	461a      	mov	r2, r3
 80029ea:	4b3e      	ldr	r3, [pc, #248]	@ (8002ae4 <Handle_RFID+0x6e0>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	429a      	cmp	r2, r3
 80029f0:	dd3e      	ble.n	8002a70 <Handle_RFID+0x66c>
                        for (int i = card_to_delete_index; i < num_secondary_cards_registered - 1; i++) {
 80029f2:	4b3c      	ldr	r3, [pc, #240]	@ (8002ae4 <Handle_RFID+0x6e0>)
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	60bb      	str	r3, [r7, #8]
 80029f8:	e00d      	b.n	8002a16 <Handle_RFID+0x612>
                            memcpy(authorized_uids_secondary[i], authorized_uids_secondary[i+1], 4);
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	009b      	lsls	r3, r3, #2
 80029fe:	4a3b      	ldr	r2, [pc, #236]	@ (8002aec <Handle_RFID+0x6e8>)
 8002a00:	4413      	add	r3, r2
 8002a02:	68ba      	ldr	r2, [r7, #8]
 8002a04:	3201      	adds	r2, #1
 8002a06:	0092      	lsls	r2, r2, #2
 8002a08:	4938      	ldr	r1, [pc, #224]	@ (8002aec <Handle_RFID+0x6e8>)
 8002a0a:	440a      	add	r2, r1
 8002a0c:	6812      	ldr	r2, [r2, #0]
 8002a0e:	601a      	str	r2, [r3, #0]
                        for (int i = card_to_delete_index; i < num_secondary_cards_registered - 1; i++) {
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	3301      	adds	r3, #1
 8002a14:	60bb      	str	r3, [r7, #8]
 8002a16:	4b34      	ldr	r3, [pc, #208]	@ (8002ae8 <Handle_RFID+0x6e4>)
 8002a18:	781b      	ldrb	r3, [r3, #0]
 8002a1a:	3b01      	subs	r3, #1
 8002a1c:	68ba      	ldr	r2, [r7, #8]
 8002a1e:	429a      	cmp	r2, r3
 8002a20:	dbeb      	blt.n	80029fa <Handle_RFID+0x5f6>
                        if (num_secondary_cards_registered > 0) {
 8002a22:	4b31      	ldr	r3, [pc, #196]	@ (8002ae8 <Handle_RFID+0x6e4>)
 8002a24:	781b      	ldrb	r3, [r3, #0]
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <Handle_RFID+0x63c>
                            memset(authorized_uids_secondary[num_secondary_cards_registered - 1], 0x00, 4);
 8002a2a:	4b2f      	ldr	r3, [pc, #188]	@ (8002ae8 <Handle_RFID+0x6e4>)
 8002a2c:	781b      	ldrb	r3, [r3, #0]
 8002a2e:	3b01      	subs	r3, #1
 8002a30:	009b      	lsls	r3, r3, #2
 8002a32:	4a2e      	ldr	r2, [pc, #184]	@ (8002aec <Handle_RFID+0x6e8>)
 8002a34:	4413      	add	r3, r2
 8002a36:	2204      	movs	r2, #4
 8002a38:	2100      	movs	r1, #0
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	f006 fdd9 	bl	80095f2 <memset>
                        num_secondary_cards_registered--;
 8002a40:	4b29      	ldr	r3, [pc, #164]	@ (8002ae8 <Handle_RFID+0x6e4>)
 8002a42:	781b      	ldrb	r3, [r3, #0]
 8002a44:	3b01      	subs	r3, #1
 8002a46:	b2da      	uxtb	r2, r3
 8002a48:	4b27      	ldr	r3, [pc, #156]	@ (8002ae8 <Handle_RFID+0x6e4>)
 8002a4a:	701a      	strb	r2, [r3, #0]
                        draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 8002a4c:	4b28      	ldr	r3, [pc, #160]	@ (8002af0 <Handle_RFID+0x6ec>)
 8002a4e:	9300      	str	r3, [sp, #0]
 8002a50:	2300      	movs	r3, #0
 8002a52:	2200      	movs	r2, #0
 8002a54:	2164      	movs	r1, #100	@ 0x64
 8002a56:	2032      	movs	r0, #50	@ 0x32
 8002a58:	f7fe fef2 	bl	8001840 <draw_fast_string>
                        draw_fast_string(50, 100, COLOR_GREEN, COLOR_BLACK, "DELETE SUCCESSFULL");
 8002a5c:	4b25      	ldr	r3, [pc, #148]	@ (8002af4 <Handle_RFID+0x6f0>)
 8002a5e:	9300      	str	r3, [sp, #0]
 8002a60:	2300      	movs	r3, #0
 8002a62:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002a66:	2164      	movs	r1, #100	@ 0x64
 8002a68:	2032      	movs	r0, #50	@ 0x32
 8002a6a:	f7fe fee9 	bl	8001840 <draw_fast_string>
 8002a6e:	e00f      	b.n	8002a90 <Handle_RFID+0x68c>
                        draw_fast_string(50, 100, COLOR_BLACK, COLOR_BLACK, "                         ");
 8002a70:	4b1f      	ldr	r3, [pc, #124]	@ (8002af0 <Handle_RFID+0x6ec>)
 8002a72:	9300      	str	r3, [sp, #0]
 8002a74:	2300      	movs	r3, #0
 8002a76:	2200      	movs	r2, #0
 8002a78:	2164      	movs	r1, #100	@ 0x64
 8002a7a:	2032      	movs	r0, #50	@ 0x32
 8002a7c:	f7fe fee0 	bl	8001840 <draw_fast_string>
                        draw_fast_string(50, 100, COLOR_RED, COLOR_BLACK, "DELETE FAIL");
 8002a80:	4b1d      	ldr	r3, [pc, #116]	@ (8002af8 <Handle_RFID+0x6f4>)
 8002a82:	9300      	str	r3, [sp, #0]
 8002a84:	2300      	movs	r3, #0
 8002a86:	221f      	movs	r2, #31
 8002a88:	2164      	movs	r1, #100	@ 0x64
 8002a8a:	2032      	movs	r0, #50	@ 0x32
 8002a8c:	f7fe fed8 	bl	8001840 <draw_fast_string>
                    card_to_delete_index = -1;
 8002a90:	4b14      	ldr	r3, [pc, #80]	@ (8002ae4 <Handle_RFID+0x6e0>)
 8002a92:	f04f 32ff 	mov.w	r2, #4294967295
 8002a96:	601a      	str	r2, [r3, #0]
                    mfrc522_delay_start_time = current_time;
 8002a98:	4a18      	ldr	r2, [pc, #96]	@ (8002afc <Handle_RFID+0x6f8>)
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6013      	str	r3, [r2, #0]
                    mfrc522_state = MFRC522_STATE_SECONDARY_REGISTERED_SUCCESS_DELAY;
 8002a9e:	4b18      	ldr	r3, [pc, #96]	@ (8002b00 <Handle_RFID+0x6fc>)
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	701a      	strb	r2, [r3, #0]
                    HAL_Delay(300);
 8002aa4:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8002aa8:	f001 fb6e 	bl	8004188 <HAL_Delay>
            break;
 8002aac:	e00d      	b.n	8002aca <Handle_RFID+0x6c6>
            break;
 8002aae:	bf00      	nop
 8002ab0:	e00c      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002ab2:	bf00      	nop
 8002ab4:	e00a      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002ab6:	bf00      	nop
 8002ab8:	e008      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002aba:	bf00      	nop
 8002abc:	e006      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002abe:	bf00      	nop
 8002ac0:	e004      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002ac2:	bf00      	nop
 8002ac4:	e002      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002ac6:	bf00      	nop
 8002ac8:	e000      	b.n	8002acc <Handle_RFID+0x6c8>
            break;
 8002aca:	bf00      	nop
    }
}
 8002acc:	bf00      	nop
 8002ace:	3720      	adds	r7, #32
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	bd80      	pop	{r7, pc}
 8002ad4:	20000471 	.word	0x20000471
 8002ad8:	2000046c 	.word	0x2000046c
 8002adc:	20000468 	.word	0x20000468
 8002ae0:	0800bcd4 	.word	0x0800bcd4
 8002ae4:	20000014 	.word	0x20000014
 8002ae8:	2000047c 	.word	0x2000047c
 8002aec:	20000474 	.word	0x20000474
 8002af0:	0800b67c 	.word	0x0800b67c
 8002af4:	0800b73c 	.word	0x0800b73c
 8002af8:	0800b750 	.word	0x0800b750
 8002afc:	20000480 	.word	0x20000480
 8002b00:	2000047d 	.word	0x2000047d

08002b04 <Handle_DHT22>:

void Handle_DHT22(void) {
 8002b04:	b580      	push	{r7, lr}
 8002b06:	b082      	sub	sp, #8
 8002b08:	af02      	add	r7, sp, #8
    if (DHT22_Read_Data(&Temperature, &Humidity)) {
 8002b0a:	4921      	ldr	r1, [pc, #132]	@ (8002b90 <Handle_DHT22+0x8c>)
 8002b0c:	4821      	ldr	r0, [pc, #132]	@ (8002b94 <Handle_DHT22+0x90>)
 8002b0e:	f7ff fb1b 	bl	8002148 <DHT22_Read_Data>
 8002b12:	4603      	mov	r3, r0
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d027      	beq.n	8002b68 <Handle_DHT22+0x64>
        sprintf(lcd_buf, "Temp:%.1fC ", Temperature);
 8002b18:	4b1e      	ldr	r3, [pc, #120]	@ (8002b94 <Handle_DHT22+0x90>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd13 	bl	8000548 <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	491c      	ldr	r1, [pc, #112]	@ (8002b98 <Handle_DHT22+0x94>)
 8002b28:	481c      	ldr	r0, [pc, #112]	@ (8002b9c <Handle_DHT22+0x98>)
 8002b2a:	f006 fced 	bl	8009508 <siprintf>
        draw_fast_string(5, 5, COLOR_RED, COLOR_BLACK, lcd_buf);
 8002b2e:	4b1b      	ldr	r3, [pc, #108]	@ (8002b9c <Handle_DHT22+0x98>)
 8002b30:	9300      	str	r3, [sp, #0]
 8002b32:	2300      	movs	r3, #0
 8002b34:	221f      	movs	r2, #31
 8002b36:	2105      	movs	r1, #5
 8002b38:	2005      	movs	r0, #5
 8002b3a:	f7fe fe81 	bl	8001840 <draw_fast_string>
        sprintf(lcd_buf, "Humi:%.1f%% ", Humidity);
 8002b3e:	4b14      	ldr	r3, [pc, #80]	@ (8002b90 <Handle_DHT22+0x8c>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	4618      	mov	r0, r3
 8002b44:	f7fd fd00 	bl	8000548 <__aeabi_f2d>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	460b      	mov	r3, r1
 8002b4c:	4914      	ldr	r1, [pc, #80]	@ (8002ba0 <Handle_DHT22+0x9c>)
 8002b4e:	4813      	ldr	r0, [pc, #76]	@ (8002b9c <Handle_DHT22+0x98>)
 8002b50:	f006 fcda 	bl	8009508 <siprintf>
        draw_fast_string(115, 5, COLOR_BLUE, COLOR_BLACK, lcd_buf);
 8002b54:	4b11      	ldr	r3, [pc, #68]	@ (8002b9c <Handle_DHT22+0x98>)
 8002b56:	9300      	str	r3, [sp, #0]
 8002b58:	2300      	movs	r3, #0
 8002b5a:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8002b5e:	2105      	movs	r1, #5
 8002b60:	2073      	movs	r0, #115	@ 0x73
 8002b62:	f7fe fe6d 	bl	8001840 <draw_fast_string>
    } else {
        draw_fast_string(5, 5, COLOR_RED, COLOR_BLACK, "DHT22 Error");
        draw_fast_string(115, 5, COLOR_BLACK, COLOR_BLACK, "           "); // Clear Humi area
    }
}
 8002b66:	e00f      	b.n	8002b88 <Handle_DHT22+0x84>
        draw_fast_string(5, 5, COLOR_RED, COLOR_BLACK, "DHT22 Error");
 8002b68:	4b0e      	ldr	r3, [pc, #56]	@ (8002ba4 <Handle_DHT22+0xa0>)
 8002b6a:	9300      	str	r3, [sp, #0]
 8002b6c:	2300      	movs	r3, #0
 8002b6e:	221f      	movs	r2, #31
 8002b70:	2105      	movs	r1, #5
 8002b72:	2005      	movs	r0, #5
 8002b74:	f7fe fe64 	bl	8001840 <draw_fast_string>
        draw_fast_string(115, 5, COLOR_BLACK, COLOR_BLACK, "           "); // Clear Humi area
 8002b78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ba8 <Handle_DHT22+0xa4>)
 8002b7a:	9300      	str	r3, [sp, #0]
 8002b7c:	2300      	movs	r3, #0
 8002b7e:	2200      	movs	r2, #0
 8002b80:	2105      	movs	r1, #5
 8002b82:	2073      	movs	r0, #115	@ 0x73
 8002b84:	f7fe fe5c 	bl	8001840 <draw_fast_string>
}
 8002b88:	bf00      	nop
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	20000444 	.word	0x20000444
 8002b94:	20000440 	.word	0x20000440
 8002b98:	0800b75c 	.word	0x0800b75c
 8002b9c:	2000048c 	.word	0x2000048c
 8002ba0:	0800b768 	.word	0x0800b768
 8002ba4:	0800b778 	.word	0x0800b778
 8002ba8:	0800b784 	.word	0x0800b784

08002bac <Handle_BH1750>:

void Handle_BH1750(void) {
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b084      	sub	sp, #16
 8002bb0:	af02      	add	r7, sp, #8
    uint8_t prev_bh1750_ok_status = bh1750_ok;
 8002bb2:	4b30      	ldr	r3, [pc, #192]	@ (8002c74 <Handle_BH1750+0xc8>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	71fb      	strb	r3, [r7, #7]
    if (bh1750_ok) {
 8002bb8:	4b2e      	ldr	r3, [pc, #184]	@ (8002c74 <Handle_BH1750+0xc8>)
 8002bba:	781b      	ldrb	r3, [r3, #0]
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d009      	beq.n	8002bd4 <Handle_BH1750+0x28>
        lux_value = BH1750_get_lumen(bh1750_dev);
 8002bc0:	4b2d      	ldr	r3, [pc, #180]	@ (8002c78 <Handle_BH1750+0xcc>)
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f7fe fa41 	bl	800104c <BH1750_get_lumen>
 8002bca:	eef0 7a40 	vmov.f32	s15, s0
 8002bce:	4b2b      	ldr	r3, [pc, #172]	@ (8002c7c <Handle_BH1750+0xd0>)
 8002bd0:	edc3 7a00 	vstr	s15, [r3]
        if (lux_value < 0) { // Assuming -1.0f or similar indicates read error
           // bh1750_ok = 0; // Potentially mark as not OK if read fails, or rely on init check
        }
    }
     if (!bh1750_ok) { // If init failed or a read makes it not okay
 8002bd4:	4b27      	ldr	r3, [pc, #156]	@ (8002c74 <Handle_BH1750+0xc8>)
 8002bd6:	781b      	ldrb	r3, [r3, #0]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d102      	bne.n	8002be2 <Handle_BH1750+0x36>
        lux_value = -1.0f; // Consistent error value
 8002bdc:	4b27      	ldr	r3, [pc, #156]	@ (8002c7c <Handle_BH1750+0xd0>)
 8002bde:	4a28      	ldr	r2, [pc, #160]	@ (8002c80 <Handle_BH1750+0xd4>)
 8002be0:	601a      	str	r2, [r3, #0]
    }
    bool bh1750_status_just_changed = (bh1750_ok != prev_bh1750_ok_status);
 8002be2:	4b24      	ldr	r3, [pc, #144]	@ (8002c74 <Handle_BH1750+0xc8>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	79fa      	ldrb	r2, [r7, #7]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	bf14      	ite	ne
 8002bec:	2301      	movne	r3, #1
 8002bee:	2300      	moveq	r3, #0
 8002bf0:	71bb      	strb	r3, [r7, #6]

    if (fabs(lux_value - prev_lux_value) > 1.0f || bh1750_status_just_changed) {
 8002bf2:	4b22      	ldr	r3, [pc, #136]	@ (8002c7c <Handle_BH1750+0xd0>)
 8002bf4:	ed93 7a00 	vldr	s14, [r3]
 8002bf8:	4b22      	ldr	r3, [pc, #136]	@ (8002c84 <Handle_BH1750+0xd8>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002c02:	eef0 7ae7 	vabs.f32	s15, s15
 8002c06:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002c0a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c12:	dc02      	bgt.n	8002c1a <Handle_BH1750+0x6e>
 8002c14:	79bb      	ldrb	r3, [r7, #6]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d028      	beq.n	8002c6c <Handle_BH1750+0xc0>
        if (bh1750_ok && lux_value >= 0) {
 8002c1a:	4b16      	ldr	r3, [pc, #88]	@ (8002c74 <Handle_BH1750+0xc8>)
 8002c1c:	781b      	ldrb	r3, [r3, #0]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d013      	beq.n	8002c4a <Handle_BH1750+0x9e>
 8002c22:	4b16      	ldr	r3, [pc, #88]	@ (8002c7c <Handle_BH1750+0xd0>)
 8002c24:	edd3 7a00 	vldr	s15, [r3]
 8002c28:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c30:	db0b      	blt.n	8002c4a <Handle_BH1750+0x9e>
            sprintf(lcd_line_buffer, "Lux:%.1f  ", lux_value);
 8002c32:	4b12      	ldr	r3, [pc, #72]	@ (8002c7c <Handle_BH1750+0xd0>)
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f7fd fc86 	bl	8000548 <__aeabi_f2d>
 8002c3c:	4602      	mov	r2, r0
 8002c3e:	460b      	mov	r3, r1
 8002c40:	4911      	ldr	r1, [pc, #68]	@ (8002c88 <Handle_BH1750+0xdc>)
 8002c42:	4812      	ldr	r0, [pc, #72]	@ (8002c8c <Handle_BH1750+0xe0>)
 8002c44:	f006 fc60 	bl	8009508 <siprintf>
 8002c48:	e003      	b.n	8002c52 <Handle_BH1750+0xa6>
        } else {
            sprintf(lcd_line_buffer, "Lux:Error ");
 8002c4a:	4911      	ldr	r1, [pc, #68]	@ (8002c90 <Handle_BH1750+0xe4>)
 8002c4c:	480f      	ldr	r0, [pc, #60]	@ (8002c8c <Handle_BH1750+0xe0>)
 8002c4e:	f006 fc5b 	bl	8009508 <siprintf>
        }
        draw_fast_string(5, 20, COLOR_YELLOW, COLOR_BLACK, lcd_line_buffer);
 8002c52:	4b0e      	ldr	r3, [pc, #56]	@ (8002c8c <Handle_BH1750+0xe0>)
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2300      	movs	r3, #0
 8002c58:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 8002c5c:	2114      	movs	r1, #20
 8002c5e:	2005      	movs	r0, #5
 8002c60:	f7fe fdee 	bl	8001840 <draw_fast_string>
        prev_lux_value = lux_value;
 8002c64:	4b05      	ldr	r3, [pc, #20]	@ (8002c7c <Handle_BH1750+0xd0>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4a06      	ldr	r2, [pc, #24]	@ (8002c84 <Handle_BH1750+0xd8>)
 8002c6a:	6013      	str	r3, [r2, #0]
    }
}
 8002c6c:	bf00      	nop
 8002c6e:	3708      	adds	r7, #8
 8002c70:	46bd      	mov	sp, r7
 8002c72:	bd80      	pop	{r7, pc}
 8002c74:	2000044d 	.word	0x2000044d
 8002c78:	2000043c 	.word	0x2000043c
 8002c7c:	20000448 	.word	0x20000448
 8002c80:	bf800000 	.word	0xbf800000
 8002c84:	20000000 	.word	0x20000000
 8002c88:	0800b790 	.word	0x0800b790
 8002c8c:	200004ac 	.word	0x200004ac
 8002c90:	0800b79c 	.word	0x0800b79c

08002c94 <Handle_INA219>:

void Handle_INA219(void) {
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b084      	sub	sp, #16
 8002c98:	af02      	add	r7, sp, #8
    uint8_t prev_ina219_ok_status_for_cycle = ina219_ok;
 8002c9a:	4b87      	ldr	r3, [pc, #540]	@ (8002eb8 <Handle_INA219+0x224>)
 8002c9c:	781b      	ldrb	r3, [r3, #0]
 8002c9e:	707b      	strb	r3, [r7, #1]
    uint16_t bus_mv = 0;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	80fb      	strh	r3, [r7, #6]
    int16_t current_raw_ma = 0;
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	80bb      	strh	r3, [r7, #4]
    uint16_t power_raw_mw = 0;
 8002ca8:	2300      	movs	r3, #0
 8002caa:	807b      	strh	r3, [r7, #2]

    if (ina219_ok) {
 8002cac:	4b82      	ldr	r3, [pc, #520]	@ (8002eb8 <Handle_INA219+0x224>)
 8002cae:	781b      	ldrb	r3, [r3, #0]
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d01a      	beq.n	8002cea <Handle_INA219+0x56>
        bus_mv = INA219_ReadBusVoltage(&ina219_dev);
 8002cb4:	4881      	ldr	r0, [pc, #516]	@ (8002ebc <Handle_INA219+0x228>)
 8002cb6:	f7fe fe41 	bl	800193c <INA219_ReadBusVoltage>
 8002cba:	4603      	mov	r3, r0
 8002cbc:	80fb      	strh	r3, [r7, #6]
        if (bus_mv == 0xFFFF) { // Check for I2C read error indicator from INA219 library
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d102      	bne.n	8002cce <Handle_INA219+0x3a>
            ina219_ok = 0; // Mark as not OK if read fails
 8002cc8:	4b7b      	ldr	r3, [pc, #492]	@ (8002eb8 <Handle_INA219+0x224>)
 8002cca:	2200      	movs	r2, #0
 8002ccc:	701a      	strb	r2, [r3, #0]
        }

        if (ina219_ok) { // Proceed only if still OK
 8002cce:	4b7a      	ldr	r3, [pc, #488]	@ (8002eb8 <Handle_INA219+0x224>)
 8002cd0:	781b      	ldrb	r3, [r3, #0]
 8002cd2:	2b00      	cmp	r3, #0
 8002cd4:	d009      	beq.n	8002cea <Handle_INA219+0x56>
            current_raw_ma = INA219_ReadCurrent(&ina219_dev);
 8002cd6:	4879      	ldr	r0, [pc, #484]	@ (8002ebc <Handle_INA219+0x228>)
 8002cd8:	f7fe fe54 	bl	8001984 <INA219_ReadCurrent>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	80bb      	strh	r3, [r7, #4]
            // Add error check for INA219_ReadCurrent if applicable
            power_raw_mw = INA219_ReadPower(&ina219_dev);
 8002ce0:	4876      	ldr	r0, [pc, #472]	@ (8002ebc <Handle_INA219+0x228>)
 8002ce2:	f7fe fe67 	bl	80019b4 <INA219_ReadPower>
 8002ce6:	4603      	mov	r3, r0
 8002ce8:	807b      	strh	r3, [r7, #2]
            // Add error check for INA219_ReadPower if applicable
        }
    }

    if (ina219_ok) {
 8002cea:	4b73      	ldr	r3, [pc, #460]	@ (8002eb8 <Handle_INA219+0x224>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d01d      	beq.n	8002d2e <Handle_INA219+0x9a>
        bus_voltage_V = (float)bus_mv / 1000.0f;
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	ee07 3a90 	vmov	s15, r3
 8002cf8:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002cfc:	eddf 6a70 	vldr	s13, [pc, #448]	@ 8002ec0 <Handle_INA219+0x22c>
 8002d00:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d04:	4b6f      	ldr	r3, [pc, #444]	@ (8002ec4 <Handle_INA219+0x230>)
 8002d06:	edc3 7a00 	vstr	s15, [r3]
        current_mA = (float)current_raw_ma;
 8002d0a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d16:	4b6c      	ldr	r3, [pc, #432]	@ (8002ec8 <Handle_INA219+0x234>)
 8002d18:	edc3 7a00 	vstr	s15, [r3]
        power_mw = (float)power_raw_mw;
 8002d1c:	887b      	ldrh	r3, [r7, #2]
 8002d1e:	ee07 3a90 	vmov	s15, r3
 8002d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002d26:	4b69      	ldr	r3, [pc, #420]	@ (8002ecc <Handle_INA219+0x238>)
 8002d28:	edc3 7a00 	vstr	s15, [r3]
 8002d2c:	e008      	b.n	8002d40 <Handle_INA219+0xac>
    } else { // If init failed or a read makes it not okay
        bus_voltage_V = -1.0f;
 8002d2e:	4b65      	ldr	r3, [pc, #404]	@ (8002ec4 <Handle_INA219+0x230>)
 8002d30:	4a67      	ldr	r2, [pc, #412]	@ (8002ed0 <Handle_INA219+0x23c>)
 8002d32:	601a      	str	r2, [r3, #0]
        current_mA = -1.0f;
 8002d34:	4b64      	ldr	r3, [pc, #400]	@ (8002ec8 <Handle_INA219+0x234>)
 8002d36:	4a66      	ldr	r2, [pc, #408]	@ (8002ed0 <Handle_INA219+0x23c>)
 8002d38:	601a      	str	r2, [r3, #0]
        power_mw = -1.0f;
 8002d3a:	4b64      	ldr	r3, [pc, #400]	@ (8002ecc <Handle_INA219+0x238>)
 8002d3c:	4a64      	ldr	r2, [pc, #400]	@ (8002ed0 <Handle_INA219+0x23c>)
 8002d3e:	601a      	str	r2, [r3, #0]
    }
    bool ina219_status_just_changed = (ina219_ok != prev_ina219_ok_status_for_cycle);
 8002d40:	4b5d      	ldr	r3, [pc, #372]	@ (8002eb8 <Handle_INA219+0x224>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	787a      	ldrb	r2, [r7, #1]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	bf14      	ite	ne
 8002d4a:	2301      	movne	r3, #1
 8002d4c:	2300      	moveq	r3, #0
 8002d4e:	703b      	strb	r3, [r7, #0]

    if (fabs(bus_voltage_V - prev_bus_voltage_V) > VOLTAGE_CHANGE_THRESHOLD || ina219_status_just_changed) {
 8002d50:	4b5c      	ldr	r3, [pc, #368]	@ (8002ec4 <Handle_INA219+0x230>)
 8002d52:	ed93 7a00 	vldr	s14, [r3]
 8002d56:	4b5f      	ldr	r3, [pc, #380]	@ (8002ed4 <Handle_INA219+0x240>)
 8002d58:	edd3 7a00 	vldr	s15, [r3]
 8002d5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d60:	eef0 7ae7 	vabs.f32	s15, s15
 8002d64:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 8002ed8 <Handle_INA219+0x244>
 8002d68:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d70:	dc02      	bgt.n	8002d78 <Handle_INA219+0xe4>
 8002d72:	783b      	ldrb	r3, [r7, #0]
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d028      	beq.n	8002dca <Handle_INA219+0x136>
        if (ina219_ok && bus_voltage_V >= 0) {
 8002d78:	4b4f      	ldr	r3, [pc, #316]	@ (8002eb8 <Handle_INA219+0x224>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d013      	beq.n	8002da8 <Handle_INA219+0x114>
 8002d80:	4b50      	ldr	r3, [pc, #320]	@ (8002ec4 <Handle_INA219+0x230>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8e:	db0b      	blt.n	8002da8 <Handle_INA219+0x114>
            sprintf(lcd_line_buffer, "V:%.2fV  ", bus_voltage_V);
 8002d90:	4b4c      	ldr	r3, [pc, #304]	@ (8002ec4 <Handle_INA219+0x230>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4618      	mov	r0, r3
 8002d96:	f7fd fbd7 	bl	8000548 <__aeabi_f2d>
 8002d9a:	4602      	mov	r2, r0
 8002d9c:	460b      	mov	r3, r1
 8002d9e:	494f      	ldr	r1, [pc, #316]	@ (8002edc <Handle_INA219+0x248>)
 8002da0:	484f      	ldr	r0, [pc, #316]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002da2:	f006 fbb1 	bl	8009508 <siprintf>
 8002da6:	e003      	b.n	8002db0 <Handle_INA219+0x11c>
        } else {
            sprintf(lcd_line_buffer, "V: Error ");
 8002da8:	494e      	ldr	r1, [pc, #312]	@ (8002ee4 <Handle_INA219+0x250>)
 8002daa:	484d      	ldr	r0, [pc, #308]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002dac:	f006 fbac 	bl	8009508 <siprintf>
        }
        draw_fast_string(5, 60, COLOR_CYAN, COLOR_BLACK, lcd_line_buffer);
 8002db0:	4b4b      	ldr	r3, [pc, #300]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	2300      	movs	r3, #0
 8002db6:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8002dba:	213c      	movs	r1, #60	@ 0x3c
 8002dbc:	2005      	movs	r0, #5
 8002dbe:	f7fe fd3f 	bl	8001840 <draw_fast_string>
        prev_bus_voltage_V = bus_voltage_V;
 8002dc2:	4b40      	ldr	r3, [pc, #256]	@ (8002ec4 <Handle_INA219+0x230>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a43      	ldr	r2, [pc, #268]	@ (8002ed4 <Handle_INA219+0x240>)
 8002dc8:	6013      	str	r3, [r2, #0]
    }

    if (fabs(current_mA - prev_current_mA) > CURRENT_CHANGE_THRESHOLD || ina219_status_just_changed) {
 8002dca:	4b3f      	ldr	r3, [pc, #252]	@ (8002ec8 <Handle_INA219+0x234>)
 8002dcc:	ed93 7a00 	vldr	s14, [r3]
 8002dd0:	4b45      	ldr	r3, [pc, #276]	@ (8002ee8 <Handle_INA219+0x254>)
 8002dd2:	edd3 7a00 	vldr	s15, [r3]
 8002dd6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002dda:	eef0 7ae7 	vabs.f32	s15, s15
 8002dde:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002de2:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002de6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002dea:	dc02      	bgt.n	8002df2 <Handle_INA219+0x15e>
 8002dec:	783b      	ldrb	r3, [r7, #0]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d020      	beq.n	8002e34 <Handle_INA219+0x1a0>
        if (ina219_ok) {
 8002df2:	4b31      	ldr	r3, [pc, #196]	@ (8002eb8 <Handle_INA219+0x224>)
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d00b      	beq.n	8002e12 <Handle_INA219+0x17e>
            sprintf(lcd_line_buffer, "I:%.1fmA  ", current_mA);
 8002dfa:	4b33      	ldr	r3, [pc, #204]	@ (8002ec8 <Handle_INA219+0x234>)
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7fd fba2 	bl	8000548 <__aeabi_f2d>
 8002e04:	4602      	mov	r2, r0
 8002e06:	460b      	mov	r3, r1
 8002e08:	4938      	ldr	r1, [pc, #224]	@ (8002eec <Handle_INA219+0x258>)
 8002e0a:	4835      	ldr	r0, [pc, #212]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002e0c:	f006 fb7c 	bl	8009508 <siprintf>
 8002e10:	e003      	b.n	8002e1a <Handle_INA219+0x186>
        } else {
            sprintf(lcd_line_buffer, "I: Error  ");
 8002e12:	4937      	ldr	r1, [pc, #220]	@ (8002ef0 <Handle_INA219+0x25c>)
 8002e14:	4832      	ldr	r0, [pc, #200]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002e16:	f006 fb77 	bl	8009508 <siprintf>
        }
        draw_fast_string(115, 60, COLOR_MAGENTA, COLOR_BLACK, lcd_line_buffer);
 8002e1a:	4b31      	ldr	r3, [pc, #196]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2300      	movs	r3, #0
 8002e20:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8002e24:	213c      	movs	r1, #60	@ 0x3c
 8002e26:	2073      	movs	r0, #115	@ 0x73
 8002e28:	f7fe fd0a 	bl	8001840 <draw_fast_string>
        prev_current_mA = current_mA;
 8002e2c:	4b26      	ldr	r3, [pc, #152]	@ (8002ec8 <Handle_INA219+0x234>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a2d      	ldr	r2, [pc, #180]	@ (8002ee8 <Handle_INA219+0x254>)
 8002e32:	6013      	str	r3, [r2, #0]
    }

    if (fabs(power_mw - prev_power_mw) > POWER_CHANGE_THRESHOLD || ina219_status_just_changed) {
 8002e34:	4b25      	ldr	r3, [pc, #148]	@ (8002ecc <Handle_INA219+0x238>)
 8002e36:	ed93 7a00 	vldr	s14, [r3]
 8002e3a:	4b2e      	ldr	r3, [pc, #184]	@ (8002ef4 <Handle_INA219+0x260>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e44:	eef0 7ae7 	vabs.f32	s15, s15
 8002e48:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 8002e4c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002e50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e54:	dc02      	bgt.n	8002e5c <Handle_INA219+0x1c8>
 8002e56:	783b      	ldrb	r3, [r7, #0]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d028      	beq.n	8002eae <Handle_INA219+0x21a>
        if (ina219_ok && power_mw >= 0) {
 8002e5c:	4b16      	ldr	r3, [pc, #88]	@ (8002eb8 <Handle_INA219+0x224>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d013      	beq.n	8002e8c <Handle_INA219+0x1f8>
 8002e64:	4b19      	ldr	r3, [pc, #100]	@ (8002ecc <Handle_INA219+0x238>)
 8002e66:	edd3 7a00 	vldr	s15, [r3]
 8002e6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002e6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e72:	db0b      	blt.n	8002e8c <Handle_INA219+0x1f8>
            sprintf(lcd_line_buffer, "P:%.1fmW  ", power_mw);
 8002e74:	4b15      	ldr	r3, [pc, #84]	@ (8002ecc <Handle_INA219+0x238>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb65 	bl	8000548 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	491d      	ldr	r1, [pc, #116]	@ (8002ef8 <Handle_INA219+0x264>)
 8002e84:	4816      	ldr	r0, [pc, #88]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002e86:	f006 fb3f 	bl	8009508 <siprintf>
 8002e8a:	e003      	b.n	8002e94 <Handle_INA219+0x200>
        } else {
            sprintf(lcd_line_buffer, "P: Error  ");
 8002e8c:	491b      	ldr	r1, [pc, #108]	@ (8002efc <Handle_INA219+0x268>)
 8002e8e:	4814      	ldr	r0, [pc, #80]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002e90:	f006 fb3a 	bl	8009508 <siprintf>
        }
        draw_fast_string(5, 80, COLOR_GREEN, COLOR_BLACK, lcd_line_buffer);
 8002e94:	4b12      	ldr	r3, [pc, #72]	@ (8002ee0 <Handle_INA219+0x24c>)
 8002e96:	9300      	str	r3, [sp, #0]
 8002e98:	2300      	movs	r3, #0
 8002e9a:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8002e9e:	2150      	movs	r1, #80	@ 0x50
 8002ea0:	2005      	movs	r0, #5
 8002ea2:	f7fe fccd 	bl	8001840 <draw_fast_string>
        prev_power_mw = power_mw;
 8002ea6:	4b09      	ldr	r3, [pc, #36]	@ (8002ecc <Handle_INA219+0x238>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4a12      	ldr	r2, [pc, #72]	@ (8002ef4 <Handle_INA219+0x260>)
 8002eac:	6013      	str	r3, [r2, #0]
    }
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	20000458 	.word	0x20000458
 8002ebc:	20000450 	.word	0x20000450
 8002ec0:	447a0000 	.word	0x447a0000
 8002ec4:	2000045c 	.word	0x2000045c
 8002ec8:	20000460 	.word	0x20000460
 8002ecc:	20000464 	.word	0x20000464
 8002ed0:	bf800000 	.word	0xbf800000
 8002ed4:	20000008 	.word	0x20000008
 8002ed8:	3d4ccccd 	.word	0x3d4ccccd
 8002edc:	0800b7a8 	.word	0x0800b7a8
 8002ee0:	200004ac 	.word	0x200004ac
 8002ee4:	0800b7b4 	.word	0x0800b7b4
 8002ee8:	2000000c 	.word	0x2000000c
 8002eec:	0800b7c0 	.word	0x0800b7c0
 8002ef0:	0800b7cc 	.word	0x0800b7cc
 8002ef4:	20000010 	.word	0x20000010
 8002ef8:	0800b7d8 	.word	0x0800b7d8
 8002efc:	0800b7e4 	.word	0x0800b7e4

08002f00 <Handle_Motor>:

void Handle_Motor(void) {
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
    if (motion_detected == GPIO_PIN_SET) {
 8002f06:	4b0c      	ldr	r3, [pc, #48]	@ (8002f38 <Handle_Motor+0x38>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10d      	bne.n	8002f2a <Handle_Motor+0x2a>
        uint16_t speed = calculate_motor_speed_from_temp(Temperature);
 8002f0e:	4b0b      	ldr	r3, [pc, #44]	@ (8002f3c <Handle_Motor+0x3c>)
 8002f10:	edd3 7a00 	vldr	s15, [r3]
 8002f14:	eeb0 0a67 	vmov.f32	s0, s15
 8002f18:	f000 f960 	bl	80031dc <calculate_motor_speed_from_temp>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	80fb      	strh	r3, [r7, #6]
        motor_set_speed(speed);
 8002f20:	88fb      	ldrh	r3, [r7, #6]
 8002f22:	4618      	mov	r0, r3
 8002f24:	f000 fa48 	bl	80033b8 <motor_set_speed>
    } else {
        motor_stop();
    }
}
 8002f28:	e001      	b.n	8002f2e <Handle_Motor+0x2e>
        motor_stop();
 8002f2a:	f000 fa2b 	bl	8003384 <motor_stop>
}
 8002f2e:	bf00      	nop
 8002f30:	3708      	adds	r7, #8
 8002f32:	46bd      	mov	sp, r7
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	2000044c 	.word	0x2000044c
 8002f3c:	20000440 	.word	0x20000440

08002f40 <Handle_LED>:

void Handle_LED(uint32_t current_time) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	b084      	sub	sp, #16
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
    bool should_led_be_on = (bh1750_ok && lux_value >= 0 && lux_value < 300.0f && motion_detected == GPIO_PIN_SET);
 8002f48:	4b2e      	ldr	r3, [pc, #184]	@ (8003004 <Handle_LED+0xc4>)
 8002f4a:	781b      	ldrb	r3, [r3, #0]
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d017      	beq.n	8002f80 <Handle_LED+0x40>
 8002f50:	4b2d      	ldr	r3, [pc, #180]	@ (8003008 <Handle_LED+0xc8>)
 8002f52:	edd3 7a00 	vldr	s15, [r3]
 8002f56:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002f5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5e:	db0f      	blt.n	8002f80 <Handle_LED+0x40>
 8002f60:	4b29      	ldr	r3, [pc, #164]	@ (8003008 <Handle_LED+0xc8>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 800300c <Handle_LED+0xcc>
 8002f6a:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002f6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f72:	d505      	bpl.n	8002f80 <Handle_LED+0x40>
 8002f74:	4b26      	ldr	r3, [pc, #152]	@ (8003010 <Handle_LED+0xd0>)
 8002f76:	781b      	ldrb	r3, [r3, #0]
 8002f78:	2b01      	cmp	r3, #1
 8002f7a:	d101      	bne.n	8002f80 <Handle_LED+0x40>
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e000      	b.n	8002f82 <Handle_LED+0x42>
 8002f80:	2300      	movs	r3, #0
 8002f82:	73fb      	strb	r3, [r7, #15]
 8002f84:	7bfb      	ldrb	r3, [r7, #15]
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	73fb      	strb	r3, [r7, #15]
    if (should_led_be_on) {
 8002f8c:	7bfb      	ldrb	r3, [r7, #15]
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00c      	beq.n	8002fac <Handle_LED+0x6c>
        if (led_state != LED_STATE_ON) {
 8002f92:	4b20      	ldr	r3, [pc, #128]	@ (8003014 <Handle_LED+0xd4>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b01      	cmp	r3, #1
 8002f98:	d030      	beq.n	8002ffc <Handle_LED+0xbc>
            HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_SET);
 8002f9a:	2201      	movs	r2, #1
 8002f9c:	2120      	movs	r1, #32
 8002f9e:	481e      	ldr	r0, [pc, #120]	@ (8003018 <Handle_LED+0xd8>)
 8002fa0:	f001 fbdc 	bl	800475c <HAL_GPIO_WritePin>
            led_state = LED_STATE_ON;
 8002fa4:	4b1b      	ldr	r3, [pc, #108]	@ (8003014 <Handle_LED+0xd4>)
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	701a      	strb	r2, [r3, #0]
            case LED_STATE_OFF:
                // Do nothing
                break;
        }
    }
}
 8002faa:	e027      	b.n	8002ffc <Handle_LED+0xbc>
        switch (led_state) {
 8002fac:	4b19      	ldr	r3, [pc, #100]	@ (8003014 <Handle_LED+0xd4>)
 8002fae:	781b      	ldrb	r3, [r3, #0]
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d00c      	beq.n	8002fce <Handle_LED+0x8e>
 8002fb4:	2b02      	cmp	r3, #2
 8002fb6:	dc21      	bgt.n	8002ffc <Handle_LED+0xbc>
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d01c      	beq.n	8002ff6 <Handle_LED+0xb6>
 8002fbc:	2b01      	cmp	r3, #1
 8002fbe:	d11d      	bne.n	8002ffc <Handle_LED+0xbc>
                led_state = LED_STATE_PENDING_OFF;
 8002fc0:	4b14      	ldr	r3, [pc, #80]	@ (8003014 <Handle_LED+0xd4>)
 8002fc2:	2202      	movs	r2, #2
 8002fc4:	701a      	strb	r2, [r3, #0]
                led_off_pending_start_time = current_time;
 8002fc6:	4a15      	ldr	r2, [pc, #84]	@ (800301c <Handle_LED+0xdc>)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6013      	str	r3, [r2, #0]
                break;
 8002fcc:	e016      	b.n	8002ffc <Handle_LED+0xbc>
                if (current_time - led_off_pending_start_time >= LED_OFF_DELAY_MS - 6850) { // Giữ lại logic trễ hiện tại
 8002fce:	4b13      	ldr	r3, [pc, #76]	@ (800301c <Handle_LED+0xdc>)
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	687a      	ldr	r2, [r7, #4]
 8002fd4:	1ad2      	subs	r2, r2, r3
 8002fd6:	f242 7310 	movw	r3, #10000	@ 0x2710
 8002fda:	f5a3 53d6 	sub.w	r3, r3, #6848	@ 0x1ac0
 8002fde:	3b02      	subs	r3, #2
 8002fe0:	429a      	cmp	r2, r3
 8002fe2:	d30a      	bcc.n	8002ffa <Handle_LED+0xba>
                    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8002fe4:	2200      	movs	r2, #0
 8002fe6:	2120      	movs	r1, #32
 8002fe8:	480b      	ldr	r0, [pc, #44]	@ (8003018 <Handle_LED+0xd8>)
 8002fea:	f001 fbb7 	bl	800475c <HAL_GPIO_WritePin>
                    led_state = LED_STATE_OFF;
 8002fee:	4b09      	ldr	r3, [pc, #36]	@ (8003014 <Handle_LED+0xd4>)
 8002ff0:	2200      	movs	r2, #0
 8002ff2:	701a      	strb	r2, [r3, #0]
                break;
 8002ff4:	e001      	b.n	8002ffa <Handle_LED+0xba>
                break;
 8002ff6:	bf00      	nop
 8002ff8:	e000      	b.n	8002ffc <Handle_LED+0xbc>
                break;
 8002ffa:	bf00      	nop
}
 8002ffc:	bf00      	nop
 8002ffe:	3710      	adds	r7, #16
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}
 8003004:	2000044d 	.word	0x2000044d
 8003008:	20000448 	.word	0x20000448
 800300c:	43960000 	.word	0x43960000
 8003010:	2000044c 	.word	0x2000044c
 8003014:	20000484 	.word	0x20000484
 8003018:	40020800 	.word	0x40020800
 800301c:	20000488 	.word	0x20000488

08003020 <main>:


int main(void)
{
 8003020:	b580      	push	{r7, lr}
 8003022:	b086      	sub	sp, #24
 8003024:	af02      	add	r7, sp, #8
    HAL_Init();
 8003026:	f001 f83d 	bl	80040a4 <HAL_Init>
    SystemClock_Config();
 800302a:	f000 f9eb 	bl	8003404 <SystemClock_Config>

    MX_GPIO_Init();
 800302e:	f000 fc73 	bl	8003918 <MX_GPIO_Init>
    MX_TIM6_Init();
 8003032:	f000 fc05 	bl	8003840 <MX_TIM6_Init>
    MX_SPI1_Init();
 8003036:	f000 fa7d 	bl	8003534 <MX_SPI1_Init>
    MX_I2C1_Init();
 800303a:	f000 fa4d 	bl	80034d8 <MX_I2C1_Init>
    MX_SPI2_Init();
 800303e:	f000 fab1 	bl	80035a4 <MX_SPI2_Init>
    MX_TIM1_Init();
 8003042:	f000 fae5 	bl	8003610 <MX_TIM1_Init>
    MX_TIM2_Init();
 8003046:	f000 fb85 	bl	8003754 <MX_TIM2_Init>
    MX_TIM7_Init();
 800304a:	f000 fc2f 	bl	80038ac <MX_TIM7_Init>

    for (int i = 0; i < MAX_SECONDARY_CARDS; i++) {
 800304e:	2300      	movs	r3, #0
 8003050:	60fb      	str	r3, [r7, #12]
 8003052:	e013      	b.n	800307c <main+0x5c>
            for (int j = 0; j < 4; j++) {
 8003054:	2300      	movs	r3, #0
 8003056:	60bb      	str	r3, [r7, #8]
 8003058:	e00a      	b.n	8003070 <main+0x50>
                authorized_uids_secondary[i][j] = 0x00;
 800305a:	4a50      	ldr	r2, [pc, #320]	@ (800319c <main+0x17c>)
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	009b      	lsls	r3, r3, #2
 8003060:	441a      	add	r2, r3
 8003062:	68bb      	ldr	r3, [r7, #8]
 8003064:	4413      	add	r3, r2
 8003066:	2200      	movs	r2, #0
 8003068:	701a      	strb	r2, [r3, #0]
            for (int j = 0; j < 4; j++) {
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	3301      	adds	r3, #1
 800306e:	60bb      	str	r3, [r7, #8]
 8003070:	68bb      	ldr	r3, [r7, #8]
 8003072:	2b03      	cmp	r3, #3
 8003074:	ddf1      	ble.n	800305a <main+0x3a>
    for (int i = 0; i < MAX_SECONDARY_CARDS; i++) {
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	3301      	adds	r3, #1
 800307a:	60fb      	str	r3, [r7, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2b01      	cmp	r3, #1
 8003080:	dde8      	ble.n	8003054 <main+0x34>
        }
    }
    num_secondary_cards_registered = 0;
 8003082:	4b47      	ldr	r3, [pc, #284]	@ (80031a0 <main+0x180>)
 8003084:	2200      	movs	r2, #0
 8003086:	701a      	strb	r2, [r3, #0]

    DHT_Delay_Init();
 8003088:	f7fe ffb2 	bl	8001ff0 <DHT_Delay_Init>
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_3); // For Servo
 800308c:	2108      	movs	r1, #8
 800308e:	4845      	ldr	r0, [pc, #276]	@ (80031a4 <main+0x184>)
 8003090:	f004 fce8 	bl	8007a64 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1); // For Motor
 8003094:	2100      	movs	r1, #0
 8003096:	4844      	ldr	r0, [pc, #272]	@ (80031a8 <main+0x188>)
 8003098:	f004 fce4 	bl	8007a64 <HAL_TIM_PWM_Start>
    HAL_TIM_Base_Start_IT(&htim7);        // For RCWL0516 poll
 800309c:	4843      	ldr	r0, [pc, #268]	@ (80031ac <main+0x18c>)
 800309e:	f004 fc17 	bl	80078d0 <HAL_TIM_Base_Start_IT>

    MFRC522_Init();
 80030a2:	f7fe fe3a 	bl	8001d1a <MFRC522_Init>
    lcd_init();
 80030a6:	f7fe f893 	bl	80011d0 <lcd_init>

    bh1750_dev = BH1750_init_dev_struct(&hi2c1, "BH1750_Sensor", true);
 80030aa:	2201      	movs	r2, #1
 80030ac:	4940      	ldr	r1, [pc, #256]	@ (80031b0 <main+0x190>)
 80030ae:	4841      	ldr	r0, [pc, #260]	@ (80031b4 <main+0x194>)
 80030b0:	f7fd ff56 	bl	8000f60 <BH1750_init_dev_struct>
 80030b4:	4603      	mov	r3, r0
 80030b6:	4a40      	ldr	r2, [pc, #256]	@ (80031b8 <main+0x198>)
 80030b8:	6013      	str	r3, [r2, #0]
    if (bh1750_dev == NULL) {
 80030ba:	4b3f      	ldr	r3, [pc, #252]	@ (80031b8 <main+0x198>)
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d103      	bne.n	80030ca <main+0xaa>
        bh1750_ok = 0;
 80030c2:	4b3e      	ldr	r3, [pc, #248]	@ (80031bc <main+0x19c>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	701a      	strb	r2, [r3, #0]
 80030c8:	e00e      	b.n	80030e8 <main+0xc8>
    } else {
        if (BH1750_init_dev(bh1750_dev) != HAL_OK) {
 80030ca:	4b3b      	ldr	r3, [pc, #236]	@ (80031b8 <main+0x198>)
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4618      	mov	r0, r3
 80030d0:	f7fd ff8c 	bl	8000fec <BH1750_init_dev>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d003      	beq.n	80030e2 <main+0xc2>
            bh1750_ok = 0;
 80030da:	4b38      	ldr	r3, [pc, #224]	@ (80031bc <main+0x19c>)
 80030dc:	2200      	movs	r2, #0
 80030de:	701a      	strb	r2, [r3, #0]
 80030e0:	e002      	b.n	80030e8 <main+0xc8>
        } else {
            bh1750_ok = 1;
 80030e2:	4b36      	ldr	r3, [pc, #216]	@ (80031bc <main+0x19c>)
 80030e4:	2201      	movs	r2, #1
 80030e6:	701a      	strb	r2, [r3, #0]
        }
    }

    if (INA219_Init(&ina219_dev, &hi2c1, (INA219_ADDRESS << 1)) == 1) {
 80030e8:	2280      	movs	r2, #128	@ 0x80
 80030ea:	4932      	ldr	r1, [pc, #200]	@ (80031b4 <main+0x194>)
 80030ec:	4834      	ldr	r0, [pc, #208]	@ (80031c0 <main+0x1a0>)
 80030ee:	f7fe fd1b 	bl	8001b28 <INA219_Init>
 80030f2:	4603      	mov	r3, r0
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d103      	bne.n	8003100 <main+0xe0>
        ina219_ok = 1;
 80030f8:	4b32      	ldr	r3, [pc, #200]	@ (80031c4 <main+0x1a4>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	701a      	strb	r2, [r3, #0]
 80030fe:	e002      	b.n	8003106 <main+0xe6>
    } else {
        ina219_ok = 0;
 8003100:	4b30      	ldr	r3, [pc, #192]	@ (80031c4 <main+0x1a4>)
 8003102:	2200      	movs	r2, #0
 8003104:	701a      	strb	r2, [r3, #0]
    }

    fill_rectangle(0, 0, WIDTH - 1, HEIGHT - 1, COLOR_BLACK);
 8003106:	2300      	movs	r3, #0
 8003108:	9300      	str	r3, [sp, #0]
 800310a:	23af      	movs	r3, #175	@ 0xaf
 800310c:	22db      	movs	r2, #219	@ 0xdb
 800310e:	2100      	movs	r1, #0
 8003110:	2000      	movs	r0, #0
 8003112:	f7fe f98b 	bl	800142c <fill_rectangle>
    lcd_init_delay_start_time = HAL_GetTick();
 8003116:	f001 f82b 	bl	8004170 <HAL_GetTick>
 800311a:	4603      	mov	r3, r0
 800311c:	4a2a      	ldr	r2, [pc, #168]	@ (80031c8 <main+0x1a8>)
 800311e:	6013      	str	r3, [r2, #0]
    lcd_init_delay_active = 1;
 8003120:	4b2a      	ldr	r3, [pc, #168]	@ (80031cc <main+0x1ac>)
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]

    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 8003126:	2200      	movs	r2, #0
 8003128:	2120      	movs	r1, #32
 800312a:	4829      	ldr	r0, [pc, #164]	@ (80031d0 <main+0x1b0>)
 800312c:	f001 fb16 	bl	800475c <HAL_GPIO_WritePin>
    led_state = LED_STATE_OFF;
 8003130:	4b28      	ldr	r3, [pc, #160]	@ (80031d4 <main+0x1b4>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]
    motor_stop();
 8003136:	f000 f925 	bl	8003384 <motor_stop>
    Handle_Servo(0); // Initialize Servo to closed position (Đóng cửa)
 800313a:	2000      	movs	r0, #0
 800313c:	f7ff f946 	bl	80023cc <Handle_Servo>

    last_sensor_update_time = HAL_GetTick();
 8003140:	f001 f816 	bl	8004170 <HAL_GetTick>
 8003144:	4603      	mov	r3, r0
 8003146:	4a24      	ldr	r2, [pc, #144]	@ (80031d8 <main+0x1b8>)
 8003148:	6013      	str	r3, [r2, #0]

    while (1)
    {
        uint32_t current_time = HAL_GetTick();
 800314a:	f001 f811 	bl	8004170 <HAL_GetTick>
 800314e:	6078      	str	r0, [r7, #4]

        Handle_LCD_Init(current_time);
 8003150:	6878      	ldr	r0, [r7, #4]
 8003152:	f7ff f8bb 	bl	80022cc <Handle_LCD_Init>
        if (lcd_init_delay_active) {
 8003156:	4b1d      	ldr	r3, [pc, #116]	@ (80031cc <main+0x1ac>)
 8003158:	781b      	ldrb	r3, [r3, #0]
 800315a:	2b00      	cmp	r3, #0
 800315c:	d11b      	bne.n	8003196 <main+0x176>
            // Still waiting for LCD to stabilize, skip other operations in this iteration
            continue;
        }

        Handle_RCWL0516();          // Cập nhật hiển thị cảm biến chuyển động
 800315e:	f7ff f8f1 	bl	8002344 <Handle_RCWL0516>
        Handle_RFID(current_time);  // Xử lý logic RFID và điều khiển Servo cửa
 8003162:	6878      	ldr	r0, [r7, #4]
 8003164:	f7ff f94e 	bl	8002404 <Handle_RFID>

        // --- Sensor Updates Interval ---
        if (current_time - last_sensor_update_time >= SENSOR_UPDATE_INTERVAL_MS)
 8003168:	4b1b      	ldr	r3, [pc, #108]	@ (80031d8 <main+0x1b8>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	687a      	ldr	r2, [r7, #4]
 800316e:	1ad3      	subs	r3, r2, r3
 8003170:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8003174:	4293      	cmp	r3, r2
 8003176:	d3e8      	bcc.n	800314a <main+0x12a>
        {
            last_sensor_update_time = current_time;
 8003178:	4a17      	ldr	r2, [pc, #92]	@ (80031d8 <main+0x1b8>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]

            Handle_DHT22();         // Đọc và hiển thị dữ liệu DHT22
 800317e:	f7ff fcc1 	bl	8002b04 <Handle_DHT22>
            Handle_BH1750();        // Đọc và hiển thị dữ liệu BH1750
 8003182:	f7ff fd13 	bl	8002bac <Handle_BH1750>
            Handle_INA219();        // Đọc và hiển thị dữ liệu INA219
 8003186:	f7ff fd85 	bl	8002c94 <Handle_INA219>

            // Các hàm điều khiển phụ thuộc vào dữ liệu cảm biến mới nhất và trạng thái chuyển động
            Handle_Motor();         // Điều khiển động cơ dựa trên nhiệt độ và chuyển động
 800318a:	f7ff feb9 	bl	8002f00 <Handle_Motor>
            Handle_LED(current_time); // Điều khiển LED dựa trên ánh sáng và chuyển động
 800318e:	6878      	ldr	r0, [r7, #4]
 8003190:	f7ff fed6 	bl	8002f40 <Handle_LED>
 8003194:	e7d9      	b.n	800314a <main+0x12a>
            continue;
 8003196:	bf00      	nop
    {
 8003198:	e7d7      	b.n	800314a <main+0x12a>
 800319a:	bf00      	nop
 800319c:	20000474 	.word	0x20000474
 80031a0:	2000047c 	.word	0x2000047c
 80031a4:	2000031c 	.word	0x2000031c
 80031a8:	20000364 	.word	0x20000364
 80031ac:	200003f4 	.word	0x200003f4
 80031b0:	0800b7f0 	.word	0x0800b7f0
 80031b4:	20000218 	.word	0x20000218
 80031b8:	2000043c 	.word	0x2000043c
 80031bc:	2000044d 	.word	0x2000044d
 80031c0:	20000450 	.word	0x20000450
 80031c4:	20000458 	.word	0x20000458
 80031c8:	200004dc 	.word	0x200004dc
 80031cc:	20000018 	.word	0x20000018
 80031d0:	40020800 	.word	0x40020800
 80031d4:	20000484 	.word	0x20000484
 80031d8:	200004d4 	.word	0x200004d4

080031dc <calculate_motor_speed_from_temp>:
        }
    } // End of while(1)
}

uint16_t calculate_motor_speed_from_temp(float temp) {
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	ed87 0a01 	vstr	s0, [r7, #4]
    uint16_t pwm_value = 0;
 80031e6:	2300      	movs	r3, #0
 80031e8:	81fb      	strh	r3, [r7, #14]
    float percentage = 0.0f;
 80031ea:	f04f 0300 	mov.w	r3, #0
 80031ee:	60bb      	str	r3, [r7, #8]
    if (temp < 22.5f) {
 80031f0:	edd7 7a01 	vldr	s15, [r7, #4]
 80031f4:	ed9f 7a43 	vldr	s14, [pc, #268]	@ 8003304 <calculate_motor_speed_from_temp+0x128>
 80031f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003200:	d503      	bpl.n	800320a <calculate_motor_speed_from_temp+0x2e>
        percentage = 0.0f;
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	60bb      	str	r3, [r7, #8]
 8003208:	e062      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 23.0f) {
 800320a:	edd7 7a01 	vldr	s15, [r7, #4]
 800320e:	eeb3 7a07 	vmov.f32	s14, #55	@ 0x41b80000  23.0
 8003212:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003216:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800321a:	d502      	bpl.n	8003222 <calculate_motor_speed_from_temp+0x46>
        percentage = 0.11f;
 800321c:	4b3a      	ldr	r3, [pc, #232]	@ (8003308 <calculate_motor_speed_from_temp+0x12c>)
 800321e:	60bb      	str	r3, [r7, #8]
 8003220:	e056      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 23.8f) {
 8003222:	edd7 7a01 	vldr	s15, [r7, #4]
 8003226:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 800330c <calculate_motor_speed_from_temp+0x130>
 800322a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800322e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003232:	d502      	bpl.n	800323a <calculate_motor_speed_from_temp+0x5e>
        percentage = 0.22f;
 8003234:	4b36      	ldr	r3, [pc, #216]	@ (8003310 <calculate_motor_speed_from_temp+0x134>)
 8003236:	60bb      	str	r3, [r7, #8]
 8003238:	e04a      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 24.5f) {
 800323a:	edd7 7a01 	vldr	s15, [r7, #4]
 800323e:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 8003314 <calculate_motor_speed_from_temp+0x138>
 8003242:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003246:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800324a:	d502      	bpl.n	8003252 <calculate_motor_speed_from_temp+0x76>
        percentage = 0.33f;
 800324c:	4b32      	ldr	r3, [pc, #200]	@ (8003318 <calculate_motor_speed_from_temp+0x13c>)
 800324e:	60bb      	str	r3, [r7, #8]
 8003250:	e03e      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 29.5f) {
 8003252:	edd7 7a01 	vldr	s15, [r7, #4]
 8003256:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800331c <calculate_motor_speed_from_temp+0x140>
 800325a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	d502      	bpl.n	800326a <calculate_motor_speed_from_temp+0x8e>
        percentage = 0.44f;
 8003264:	4b2e      	ldr	r3, [pc, #184]	@ (8003320 <calculate_motor_speed_from_temp+0x144>)
 8003266:	60bb      	str	r3, [r7, #8]
 8003268:	e032      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 30.5f) {
 800326a:	edd7 7a01 	vldr	s15, [r7, #4]
 800326e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003324 <calculate_motor_speed_from_temp+0x148>
 8003272:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800327a:	d502      	bpl.n	8003282 <calculate_motor_speed_from_temp+0xa6>
        percentage = 0.56f;
 800327c:	4b2a      	ldr	r3, [pc, #168]	@ (8003328 <calculate_motor_speed_from_temp+0x14c>)
 800327e:	60bb      	str	r3, [r7, #8]
 8003280:	e026      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 31.0f) {
 8003282:	edd7 7a01 	vldr	s15, [r7, #4]
 8003286:	eeb3 7a0f 	vmov.f32	s14, #63	@ 0x41f80000  31.0
 800328a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800328e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003292:	d502      	bpl.n	800329a <calculate_motor_speed_from_temp+0xbe>
        percentage = 0.67f;
 8003294:	4b25      	ldr	r3, [pc, #148]	@ (800332c <calculate_motor_speed_from_temp+0x150>)
 8003296:	60bb      	str	r3, [r7, #8]
 8003298:	e01a      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 32.0f) {
 800329a:	edd7 7a01 	vldr	s15, [r7, #4]
 800329e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8003330 <calculate_motor_speed_from_temp+0x154>
 80032a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032aa:	d502      	bpl.n	80032b2 <calculate_motor_speed_from_temp+0xd6>
        percentage = 0.78f;
 80032ac:	4b21      	ldr	r3, [pc, #132]	@ (8003334 <calculate_motor_speed_from_temp+0x158>)
 80032ae:	60bb      	str	r3, [r7, #8]
 80032b0:	e00e      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else if (temp < 33.0f) {
 80032b2:	edd7 7a01 	vldr	s15, [r7, #4]
 80032b6:	ed9f 7a20 	vldr	s14, [pc, #128]	@ 8003338 <calculate_motor_speed_from_temp+0x15c>
 80032ba:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c2:	d502      	bpl.n	80032ca <calculate_motor_speed_from_temp+0xee>
        percentage = 0.89f;
 80032c4:	4b1d      	ldr	r3, [pc, #116]	@ (800333c <calculate_motor_speed_from_temp+0x160>)
 80032c6:	60bb      	str	r3, [r7, #8]
 80032c8:	e002      	b.n	80032d0 <calculate_motor_speed_from_temp+0xf4>
    } else { // temp >= 33
        percentage = 1.00f;
 80032ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80032ce:	60bb      	str	r3, [r7, #8]
    }
    pwm_value = (uint16_t)(percentage * MOTOR_PWM_MAX_DUTY);
 80032d0:	edd7 7a02 	vldr	s15, [r7, #8]
 80032d4:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8003340 <calculate_motor_speed_from_temp+0x164>
 80032d8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80032dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80032e0:	ee17 3a90 	vmov	r3, s15
 80032e4:	81fb      	strh	r3, [r7, #14]
    if (pwm_value > MOTOR_PWM_MAX_DUTY) {
 80032e6:	89fb      	ldrh	r3, [r7, #14]
 80032e8:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80032ec:	4293      	cmp	r3, r2
 80032ee:	d902      	bls.n	80032f6 <calculate_motor_speed_from_temp+0x11a>
        pwm_value = MOTOR_PWM_MAX_DUTY;
 80032f0:	f64e 235f 	movw	r3, #59999	@ 0xea5f
 80032f4:	81fb      	strh	r3, [r7, #14]
    }
    return pwm_value;
 80032f6:	89fb      	ldrh	r3, [r7, #14]
}
 80032f8:	4618      	mov	r0, r3
 80032fa:	3714      	adds	r7, #20
 80032fc:	46bd      	mov	sp, r7
 80032fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003302:	4770      	bx	lr
 8003304:	41b40000 	.word	0x41b40000
 8003308:	3de147ae 	.word	0x3de147ae
 800330c:	41be6666 	.word	0x41be6666
 8003310:	3e6147ae 	.word	0x3e6147ae
 8003314:	41c40000 	.word	0x41c40000
 8003318:	3ea8f5c3 	.word	0x3ea8f5c3
 800331c:	41ec0000 	.word	0x41ec0000
 8003320:	3ee147ae 	.word	0x3ee147ae
 8003324:	41f40000 	.word	0x41f40000
 8003328:	3f0f5c29 	.word	0x3f0f5c29
 800332c:	3f2b851f 	.word	0x3f2b851f
 8003330:	42000000 	.word	0x42000000
 8003334:	3f47ae14 	.word	0x3f47ae14
 8003338:	42040000 	.word	0x42040000
 800333c:	3f63d70a 	.word	0x3f63d70a
 8003340:	476a5f00 	.word	0x476a5f00

08003344 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM7)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	4a08      	ldr	r2, [pc, #32]	@ (8003374 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d10a      	bne.n	800336c <HAL_TIM_PeriodElapsedCallback+0x28>
    {
        motion_detected = HAL_GPIO_ReadPin(MOTION_PORT, MOTION_PIN);
 8003356:	2102      	movs	r1, #2
 8003358:	4807      	ldr	r0, [pc, #28]	@ (8003378 <HAL_TIM_PeriodElapsedCallback+0x34>)
 800335a:	f001 f9e7 	bl	800472c <HAL_GPIO_ReadPin>
 800335e:	4603      	mov	r3, r0
 8003360:	461a      	mov	r2, r3
 8003362:	4b06      	ldr	r3, [pc, #24]	@ (800337c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003364:	701a      	strb	r2, [r3, #0]
        rcwl_update_flag = 1;
 8003366:	4b06      	ldr	r3, [pc, #24]	@ (8003380 <HAL_TIM_PeriodElapsedCallback+0x3c>)
 8003368:	2201      	movs	r2, #1
 800336a:	701a      	strb	r2, [r3, #0]
    }
}
 800336c:	bf00      	nop
 800336e:	3708      	adds	r7, #8
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	40001400 	.word	0x40001400
 8003378:	40020000 	.word	0x40020000
 800337c:	2000044c 	.word	0x2000044c
 8003380:	200004d8 	.word	0x200004d8

08003384 <motor_stop>:

void motor_stop() {
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_RESET);
 8003388:	2200      	movs	r2, #0
 800338a:	2140      	movs	r1, #64	@ 0x40
 800338c:	4807      	ldr	r0, [pc, #28]	@ (80033ac <motor_stop+0x28>)
 800338e:	f001 f9e5 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 8003392:	2200      	movs	r2, #0
 8003394:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8003398:	4805      	ldr	r0, [pc, #20]	@ (80033b0 <motor_stop+0x2c>)
 800339a:	f001 f9df 	bl	800475c <HAL_GPIO_WritePin>
    __HAL_TIM_SET_COMPARE(&MOTOR_ENA_TIMER, MOTOR_ENA_CHANNEL, 0);
 800339e:	4b05      	ldr	r3, [pc, #20]	@ (80033b4 <motor_stop+0x30>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033a6:	bf00      	nop
 80033a8:	bd80      	pop	{r7, pc}
 80033aa:	bf00      	nop
 80033ac:	40020000 	.word	0x40020000
 80033b0:	40020400 	.word	0x40020400
 80033b4:	20000364 	.word	0x20000364

080033b8 <motor_set_speed>:

void motor_set_speed(uint16_t speed) {
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
    HAL_GPIO_WritePin(MOTOR_IN1_PORT, MOTOR_IN1_PIN, GPIO_PIN_SET);
 80033c2:	2201      	movs	r2, #1
 80033c4:	2140      	movs	r1, #64	@ 0x40
 80033c6:	480c      	ldr	r0, [pc, #48]	@ (80033f8 <motor_set_speed+0x40>)
 80033c8:	f001 f9c8 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MOTOR_IN2_PORT, MOTOR_IN2_PIN, GPIO_PIN_RESET);
 80033cc:	2200      	movs	r2, #0
 80033ce:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80033d2:	480a      	ldr	r0, [pc, #40]	@ (80033fc <motor_set_speed+0x44>)
 80033d4:	f001 f9c2 	bl	800475c <HAL_GPIO_WritePin>

    if (speed > MOTOR_PWM_MAX_DUTY) {
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 80033de:	4293      	cmp	r3, r2
 80033e0:	d902      	bls.n	80033e8 <motor_set_speed+0x30>
        speed = MOTOR_PWM_MAX_DUTY;
 80033e2:	f64e 235f 	movw	r3, #59999	@ 0xea5f
 80033e6:	80fb      	strh	r3, [r7, #6]
    }
    __HAL_TIM_SET_COMPARE(&MOTOR_ENA_TIMER, MOTOR_ENA_CHANNEL, speed);
 80033e8:	4b05      	ldr	r3, [pc, #20]	@ (8003400 <motor_set_speed+0x48>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	88fa      	ldrh	r2, [r7, #6]
 80033ee:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80033f0:	bf00      	nop
 80033f2:	3708      	adds	r7, #8
 80033f4:	46bd      	mov	sp, r7
 80033f6:	bd80      	pop	{r7, pc}
 80033f8:	40020000 	.word	0x40020000
 80033fc:	40020400 	.word	0x40020400
 8003400:	20000364 	.word	0x20000364

08003404 <SystemClock_Config>:

void SystemClock_Config(void)
{
 8003404:	b580      	push	{r7, lr}
 8003406:	b094      	sub	sp, #80	@ 0x50
 8003408:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800340a:	f107 0320 	add.w	r3, r7, #32
 800340e:	2230      	movs	r2, #48	@ 0x30
 8003410:	2100      	movs	r1, #0
 8003412:	4618      	mov	r0, r3
 8003414:	f006 f8ed 	bl	80095f2 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003418:	f107 030c 	add.w	r3, r7, #12
 800341c:	2200      	movs	r2, #0
 800341e:	601a      	str	r2, [r3, #0]
 8003420:	605a      	str	r2, [r3, #4]
 8003422:	609a      	str	r2, [r3, #8]
 8003424:	60da      	str	r2, [r3, #12]
 8003426:	611a      	str	r2, [r3, #16]
    __HAL_RCC_PWR_CLK_ENABLE();
 8003428:	2300      	movs	r3, #0
 800342a:	60bb      	str	r3, [r7, #8]
 800342c:	4b28      	ldr	r3, [pc, #160]	@ (80034d0 <SystemClock_Config+0xcc>)
 800342e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003430:	4a27      	ldr	r2, [pc, #156]	@ (80034d0 <SystemClock_Config+0xcc>)
 8003432:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003436:	6413      	str	r3, [r2, #64]	@ 0x40
 8003438:	4b25      	ldr	r3, [pc, #148]	@ (80034d0 <SystemClock_Config+0xcc>)
 800343a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800343c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003440:	60bb      	str	r3, [r7, #8]
 8003442:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003444:	2300      	movs	r3, #0
 8003446:	607b      	str	r3, [r7, #4]
 8003448:	4b22      	ldr	r3, [pc, #136]	@ (80034d4 <SystemClock_Config+0xd0>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4a21      	ldr	r2, [pc, #132]	@ (80034d4 <SystemClock_Config+0xd0>)
 800344e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003452:	6013      	str	r3, [r2, #0]
 8003454:	4b1f      	ldr	r3, [pc, #124]	@ (80034d4 <SystemClock_Config+0xd0>)
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	687b      	ldr	r3, [r7, #4]

    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003460:	2301      	movs	r3, #1
 8003462:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003464:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003468:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800346a:	2302      	movs	r3, #2
 800346c:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800346e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8003472:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLM = 8;
 8003474:	2308      	movs	r3, #8
 8003476:	643b      	str	r3, [r7, #64]	@ 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8003478:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 800347c:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800347e:	2302      	movs	r3, #2
 8003480:	64bb      	str	r3, [r7, #72]	@ 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8003482:	2307      	movs	r3, #7
 8003484:	64fb      	str	r3, [r7, #76]	@ 0x4c

    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003486:	f107 0320 	add.w	r3, r7, #32
 800348a:	4618      	mov	r0, r3
 800348c:	f002 ff52 	bl	8006334 <HAL_RCC_OscConfig>
 8003490:	4603      	mov	r3, r0
 8003492:	2b00      	cmp	r3, #0
 8003494:	d001      	beq.n	800349a <SystemClock_Config+0x96>
    {
        Error_Handler();
 8003496:	f000 faed 	bl	8003a74 <Error_Handler>
    }

    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800349a:	230f      	movs	r3, #15
 800349c:	60fb      	str	r3, [r7, #12]
                            |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800349e:	2302      	movs	r3, #2
 80034a0:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034a2:	2300      	movs	r3, #0
 80034a4:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80034a6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80034aa:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80034ac:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80034b0:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80034b2:	f107 030c 	add.w	r3, r7, #12
 80034b6:	2105      	movs	r1, #5
 80034b8:	4618      	mov	r0, r3
 80034ba:	f003 f9b3 	bl	8006824 <HAL_RCC_ClockConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <SystemClock_Config+0xc4>
    {
        Error_Handler();
 80034c4:	f000 fad6 	bl	8003a74 <Error_Handler>
    }
}
 80034c8:	bf00      	nop
 80034ca:	3750      	adds	r7, #80	@ 0x50
 80034cc:	46bd      	mov	sp, r7
 80034ce:	bd80      	pop	{r7, pc}
 80034d0:	40023800 	.word	0x40023800
 80034d4:	40007000 	.word	0x40007000

080034d8 <MX_I2C1_Init>:

static void MX_I2C1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	af00      	add	r7, sp, #0
    hi2c1.Instance = I2C1;
 80034dc:	4b12      	ldr	r3, [pc, #72]	@ (8003528 <MX_I2C1_Init+0x50>)
 80034de:	4a13      	ldr	r2, [pc, #76]	@ (800352c <MX_I2C1_Init+0x54>)
 80034e0:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 80034e2:	4b11      	ldr	r3, [pc, #68]	@ (8003528 <MX_I2C1_Init+0x50>)
 80034e4:	4a12      	ldr	r2, [pc, #72]	@ (8003530 <MX_I2C1_Init+0x58>)
 80034e6:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80034e8:	4b0f      	ldr	r3, [pc, #60]	@ (8003528 <MX_I2C1_Init+0x50>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 80034ee:	4b0e      	ldr	r3, [pc, #56]	@ (8003528 <MX_I2C1_Init+0x50>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80034f4:	4b0c      	ldr	r3, [pc, #48]	@ (8003528 <MX_I2C1_Init+0x50>)
 80034f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80034fa:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80034fc:	4b0a      	ldr	r3, [pc, #40]	@ (8003528 <MX_I2C1_Init+0x50>)
 80034fe:	2200      	movs	r2, #0
 8003500:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8003502:	4b09      	ldr	r3, [pc, #36]	@ (8003528 <MX_I2C1_Init+0x50>)
 8003504:	2200      	movs	r2, #0
 8003506:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003508:	4b07      	ldr	r3, [pc, #28]	@ (8003528 <MX_I2C1_Init+0x50>)
 800350a:	2200      	movs	r2, #0
 800350c:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800350e:	4b06      	ldr	r3, [pc, #24]	@ (8003528 <MX_I2C1_Init+0x50>)
 8003510:	2200      	movs	r2, #0
 8003512:	621a      	str	r2, [r3, #32]

    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003514:	4804      	ldr	r0, [pc, #16]	@ (8003528 <MX_I2C1_Init+0x50>)
 8003516:	f001 f93b 	bl	8004790 <HAL_I2C_Init>
 800351a:	4603      	mov	r3, r0
 800351c:	2b00      	cmp	r3, #0
 800351e:	d001      	beq.n	8003524 <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8003520:	f000 faa8 	bl	8003a74 <Error_Handler>
    }
}
 8003524:	bf00      	nop
 8003526:	bd80      	pop	{r7, pc}
 8003528:	20000218 	.word	0x20000218
 800352c:	40005400 	.word	0x40005400
 8003530:	000186a0 	.word	0x000186a0

08003534 <MX_SPI1_Init>:

static void MX_SPI1_Init(void)
    {
 8003534:	b580      	push	{r7, lr}
 8003536:	af00      	add	r7, sp, #0
    hspi1.Instance = SPI1;
 8003538:	4b18      	ldr	r3, [pc, #96]	@ (800359c <MX_SPI1_Init+0x68>)
 800353a:	4a19      	ldr	r2, [pc, #100]	@ (80035a0 <MX_SPI1_Init+0x6c>)
 800353c:	601a      	str	r2, [r3, #0]
    hspi1.Init.Mode = SPI_MODE_MASTER;
 800353e:	4b17      	ldr	r3, [pc, #92]	@ (800359c <MX_SPI1_Init+0x68>)
 8003540:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8003544:	605a      	str	r2, [r3, #4]
    hspi1.Init.Direction = SPI_DIRECTION_1LINE;
 8003546:	4b15      	ldr	r3, [pc, #84]	@ (800359c <MX_SPI1_Init+0x68>)
 8003548:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800354c:	609a      	str	r2, [r3, #8]
    hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800354e:	4b13      	ldr	r3, [pc, #76]	@ (800359c <MX_SPI1_Init+0x68>)
 8003550:	2200      	movs	r2, #0
 8003552:	60da      	str	r2, [r3, #12]
    hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8003554:	4b11      	ldr	r3, [pc, #68]	@ (800359c <MX_SPI1_Init+0x68>)
 8003556:	2200      	movs	r2, #0
 8003558:	611a      	str	r2, [r3, #16]
    hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800355a:	4b10      	ldr	r3, [pc, #64]	@ (800359c <MX_SPI1_Init+0x68>)
 800355c:	2200      	movs	r2, #0
 800355e:	615a      	str	r2, [r3, #20]
    hspi1.Init.NSS = SPI_NSS_SOFT;
 8003560:	4b0e      	ldr	r3, [pc, #56]	@ (800359c <MX_SPI1_Init+0x68>)
 8003562:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003566:	619a      	str	r2, [r3, #24]
    hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8003568:	4b0c      	ldr	r3, [pc, #48]	@ (800359c <MX_SPI1_Init+0x68>)
 800356a:	2208      	movs	r2, #8
 800356c:	61da      	str	r2, [r3, #28]
    hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800356e:	4b0b      	ldr	r3, [pc, #44]	@ (800359c <MX_SPI1_Init+0x68>)
 8003570:	2200      	movs	r2, #0
 8003572:	621a      	str	r2, [r3, #32]
    hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8003574:	4b09      	ldr	r3, [pc, #36]	@ (800359c <MX_SPI1_Init+0x68>)
 8003576:	2200      	movs	r2, #0
 8003578:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800357a:	4b08      	ldr	r3, [pc, #32]	@ (800359c <MX_SPI1_Init+0x68>)
 800357c:	2200      	movs	r2, #0
 800357e:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi1.Init.CRCPolynomial = 10;
 8003580:	4b06      	ldr	r3, [pc, #24]	@ (800359c <MX_SPI1_Init+0x68>)
 8003582:	220a      	movs	r2, #10
 8003584:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8003586:	4805      	ldr	r0, [pc, #20]	@ (800359c <MX_SPI1_Init+0x68>)
 8003588:	f003 fb18 	bl	8006bbc <HAL_SPI_Init>
 800358c:	4603      	mov	r3, r0
 800358e:	2b00      	cmp	r3, #0
 8003590:	d001      	beq.n	8003596 <MX_SPI1_Init+0x62>
    {
        Error_Handler();
 8003592:	f000 fa6f 	bl	8003a74 <Error_Handler>
    }
}
 8003596:	bf00      	nop
 8003598:	bd80      	pop	{r7, pc}
 800359a:	bf00      	nop
 800359c:	2000026c 	.word	0x2000026c
 80035a0:	40013000 	.word	0x40013000

080035a4 <MX_SPI2_Init>:

static void MX_SPI2_Init(void)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	af00      	add	r7, sp, #0
    hspi2.Instance = SPI2;
 80035a8:	4b17      	ldr	r3, [pc, #92]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035aa:	4a18      	ldr	r2, [pc, #96]	@ (800360c <MX_SPI2_Init+0x68>)
 80035ac:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 80035ae:	4b16      	ldr	r3, [pc, #88]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035b0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80035b4:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80035b6:	4b14      	ldr	r3, [pc, #80]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035b8:	2200      	movs	r2, #0
 80035ba:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80035bc:	4b12      	ldr	r3, [pc, #72]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035be:	2200      	movs	r2, #0
 80035c0:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80035c2:	4b11      	ldr	r3, [pc, #68]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80035c8:	4b0f      	ldr	r3, [pc, #60]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035d0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035d4:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80035d6:	4b0c      	ldr	r3, [pc, #48]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035d8:	2218      	movs	r2, #24
 80035da:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80035dc:	4b0a      	ldr	r3, [pc, #40]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035de:	2200      	movs	r2, #0
 80035e0:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80035e2:	4b09      	ldr	r3, [pc, #36]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	625a      	str	r2, [r3, #36]	@ 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80035e8:	4b07      	ldr	r3, [pc, #28]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	629a      	str	r2, [r3, #40]	@ 0x28
    hspi2.Init.CRCPolynomial = 10;
 80035ee:	4b06      	ldr	r3, [pc, #24]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035f0:	220a      	movs	r2, #10
 80035f2:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80035f4:	4804      	ldr	r0, [pc, #16]	@ (8003608 <MX_SPI2_Init+0x64>)
 80035f6:	f003 fae1 	bl	8006bbc <HAL_SPI_Init>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d001      	beq.n	8003604 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 8003600:	f000 fa38 	bl	8003a74 <Error_Handler>
    }
}
 8003604:	bf00      	nop
 8003606:	bd80      	pop	{r7, pc}
 8003608:	200002c4 	.word	0x200002c4
 800360c:	40003800 	.word	0x40003800

08003610 <MX_TIM1_Init>:

static void MX_TIM1_Init(void) // Timer for Servo
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b096      	sub	sp, #88	@ 0x58
 8003614:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003616:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800361a:	2200      	movs	r2, #0
 800361c:	601a      	str	r2, [r3, #0]
 800361e:	605a      	str	r2, [r3, #4]
 8003620:	609a      	str	r2, [r3, #8]
 8003622:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003624:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8003628:	2200      	movs	r2, #0
 800362a:	601a      	str	r2, [r3, #0]
 800362c:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 800362e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8003632:	2200      	movs	r2, #0
 8003634:	601a      	str	r2, [r3, #0]
 8003636:	605a      	str	r2, [r3, #4]
 8003638:	609a      	str	r2, [r3, #8]
 800363a:	60da      	str	r2, [r3, #12]
 800363c:	611a      	str	r2, [r3, #16]
 800363e:	615a      	str	r2, [r3, #20]
 8003640:	619a      	str	r2, [r3, #24]
    TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8003642:	1d3b      	adds	r3, r7, #4
 8003644:	2220      	movs	r2, #32
 8003646:	2100      	movs	r1, #0
 8003648:	4618      	mov	r0, r3
 800364a:	f005 ffd2 	bl	80095f2 <memset>

    htim1.Instance = TIM1;
 800364e:	4b3f      	ldr	r3, [pc, #252]	@ (800374c <MX_TIM1_Init+0x13c>)
 8003650:	4a3f      	ldr	r2, [pc, #252]	@ (8003750 <MX_TIM1_Init+0x140>)
 8003652:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 83;
 8003654:	4b3d      	ldr	r3, [pc, #244]	@ (800374c <MX_TIM1_Init+0x13c>)
 8003656:	2253      	movs	r2, #83	@ 0x53
 8003658:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800365a:	4b3c      	ldr	r3, [pc, #240]	@ (800374c <MX_TIM1_Init+0x13c>)
 800365c:	2200      	movs	r2, #0
 800365e:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 19999; // 50Hz
 8003660:	4b3a      	ldr	r3, [pc, #232]	@ (800374c <MX_TIM1_Init+0x13c>)
 8003662:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8003666:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003668:	4b38      	ldr	r3, [pc, #224]	@ (800374c <MX_TIM1_Init+0x13c>)
 800366a:	2200      	movs	r2, #0
 800366c:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 800366e:	4b37      	ldr	r3, [pc, #220]	@ (800374c <MX_TIM1_Init+0x13c>)
 8003670:	2200      	movs	r2, #0
 8003672:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003674:	4b35      	ldr	r3, [pc, #212]	@ (800374c <MX_TIM1_Init+0x13c>)
 8003676:	2200      	movs	r2, #0
 8003678:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800367a:	4834      	ldr	r0, [pc, #208]	@ (800374c <MX_TIM1_Init+0x13c>)
 800367c:	f004 f870 	bl	8007760 <HAL_TIM_Base_Init>
 8003680:	4603      	mov	r3, r0
 8003682:	2b00      	cmp	r3, #0
 8003684:	d001      	beq.n	800368a <MX_TIM1_Init+0x7a>
    {
        Error_Handler();
 8003686:	f000 f9f5 	bl	8003a74 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800368a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800368e:	64bb      	str	r3, [r7, #72]	@ 0x48
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8003690:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8003694:	4619      	mov	r1, r3
 8003696:	482d      	ldr	r0, [pc, #180]	@ (800374c <MX_TIM1_Init+0x13c>)
 8003698:	f004 fc5e 	bl	8007f58 <HAL_TIM_ConfigClockSource>
 800369c:	4603      	mov	r3, r0
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d001      	beq.n	80036a6 <MX_TIM1_Init+0x96>
    {
        Error_Handler();
 80036a2:	f000 f9e7 	bl	8003a74 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80036a6:	4829      	ldr	r0, [pc, #164]	@ (800374c <MX_TIM1_Init+0x13c>)
 80036a8:	f004 f982 	bl	80079b0 <HAL_TIM_PWM_Init>
 80036ac:	4603      	mov	r3, r0
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d001      	beq.n	80036b6 <MX_TIM1_Init+0xa6>
    {
        Error_Handler();
 80036b2:	f000 f9df 	bl	8003a74 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80036b6:	2300      	movs	r3, #0
 80036b8:	643b      	str	r3, [r7, #64]	@ 0x40
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80036ba:	2300      	movs	r3, #0
 80036bc:	647b      	str	r3, [r7, #68]	@ 0x44

    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80036be:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80036c2:	4619      	mov	r1, r3
 80036c4:	4821      	ldr	r0, [pc, #132]	@ (800374c <MX_TIM1_Init+0x13c>)
 80036c6:	f005 f853 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d001      	beq.n	80036d4 <MX_TIM1_Init+0xc4>
    {
        Error_Handler();
 80036d0:	f000 f9d0 	bl	8003a74 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80036d4:	2360      	movs	r3, #96	@ 0x60
 80036d6:	627b      	str	r3, [r7, #36]	@ 0x24
    sConfigOC.Pulse = SERVO_PULSE_CLOSED; // Initial pulse for servo (closed)
 80036d8:	f240 736c 	movw	r3, #1900	@ 0x76c
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80036de:	2300      	movs	r3, #0
 80036e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80036e2:	2300      	movs	r3, #0
 80036e4:	633b      	str	r3, [r7, #48]	@ 0x30
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80036e6:	2300      	movs	r3, #0
 80036e8:	637b      	str	r3, [r7, #52]	@ 0x34
    sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80036ea:	2300      	movs	r3, #0
 80036ec:	63bb      	str	r3, [r7, #56]	@ 0x38
    sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80036ee:	2300      	movs	r3, #0
 80036f0:	63fb      	str	r3, [r7, #60]	@ 0x3c

    if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, SERVO_CHANNEL) != HAL_OK)
 80036f2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80036f6:	2208      	movs	r2, #8
 80036f8:	4619      	mov	r1, r3
 80036fa:	4814      	ldr	r0, [pc, #80]	@ (800374c <MX_TIM1_Init+0x13c>)
 80036fc:	f004 fb6a 	bl	8007dd4 <HAL_TIM_PWM_ConfigChannel>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d001      	beq.n	800370a <MX_TIM1_Init+0xfa>
    {
        Error_Handler();
 8003706:	f000 f9b5 	bl	8003a74 <Error_Handler>
    }
    sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800370a:	2300      	movs	r3, #0
 800370c:	607b      	str	r3, [r7, #4]
    sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 800370e:	2300      	movs	r3, #0
 8003710:	60bb      	str	r3, [r7, #8]
    sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8003712:	2300      	movs	r3, #0
 8003714:	60fb      	str	r3, [r7, #12]
    sBreakDeadTimeConfig.DeadTime = 0;
 8003716:	2300      	movs	r3, #0
 8003718:	613b      	str	r3, [r7, #16]
    sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800371a:	2300      	movs	r3, #0
 800371c:	617b      	str	r3, [r7, #20]
    sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800371e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003722:	61bb      	str	r3, [r7, #24]
    sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8003724:	2300      	movs	r3, #0
 8003726:	623b      	str	r3, [r7, #32]

    if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8003728:	1d3b      	adds	r3, r7, #4
 800372a:	4619      	mov	r1, r3
 800372c:	4807      	ldr	r0, [pc, #28]	@ (800374c <MX_TIM1_Init+0x13c>)
 800372e:	f005 f89b 	bl	8008868 <HAL_TIMEx_ConfigBreakDeadTime>
 8003732:	4603      	mov	r3, r0
 8003734:	2b00      	cmp	r3, #0
 8003736:	d001      	beq.n	800373c <MX_TIM1_Init+0x12c>
    {
        Error_Handler();
 8003738:	f000 f99c 	bl	8003a74 <Error_Handler>
    }
    HAL_TIM_MspPostInit(&htim1);
 800373c:	4803      	ldr	r0, [pc, #12]	@ (800374c <MX_TIM1_Init+0x13c>)
 800373e:	f000 fb15 	bl	8003d6c <HAL_TIM_MspPostInit>
}
 8003742:	bf00      	nop
 8003744:	3758      	adds	r7, #88	@ 0x58
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
 800374a:	bf00      	nop
 800374c:	2000031c 	.word	0x2000031c
 8003750:	40010000 	.word	0x40010000

08003754 <MX_TIM2_Init>:

static void MX_TIM2_Init(void) // Timer for Motor PWM
{
 8003754:	b580      	push	{r7, lr}
 8003756:	b08e      	sub	sp, #56	@ 0x38
 8003758:	af00      	add	r7, sp, #0
    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800375a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800375e:	2200      	movs	r2, #0
 8003760:	601a      	str	r2, [r3, #0]
 8003762:	605a      	str	r2, [r3, #4]
 8003764:	609a      	str	r2, [r3, #8]
 8003766:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003768:	f107 0320 	add.w	r3, r7, #32
 800376c:	2200      	movs	r2, #0
 800376e:	601a      	str	r2, [r3, #0]
 8003770:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8003772:	1d3b      	adds	r3, r7, #4
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
 8003780:	615a      	str	r2, [r3, #20]
 8003782:	619a      	str	r2, [r3, #24]

    htim2.Instance = TIM2;
 8003784:	4b2d      	ldr	r3, [pc, #180]	@ (800383c <MX_TIM2_Init+0xe8>)
 8003786:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800378a:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 83;
 800378c:	4b2b      	ldr	r3, [pc, #172]	@ (800383c <MX_TIM2_Init+0xe8>)
 800378e:	2253      	movs	r2, #83	@ 0x53
 8003790:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003792:	4b2a      	ldr	r3, [pc, #168]	@ (800383c <MX_TIM2_Init+0xe8>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = MOTOR_PWM_MAX_DUTY;
 8003798:	4b28      	ldr	r3, [pc, #160]	@ (800383c <MX_TIM2_Init+0xe8>)
 800379a:	f64e 225f 	movw	r2, #59999	@ 0xea5f
 800379e:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80037a0:	4b26      	ldr	r3, [pc, #152]	@ (800383c <MX_TIM2_Init+0xe8>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80037a6:	4b25      	ldr	r3, [pc, #148]	@ (800383c <MX_TIM2_Init+0xe8>)
 80037a8:	2280      	movs	r2, #128	@ 0x80
 80037aa:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80037ac:	4823      	ldr	r0, [pc, #140]	@ (800383c <MX_TIM2_Init+0xe8>)
 80037ae:	f003 ffd7 	bl	8007760 <HAL_TIM_Base_Init>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d001      	beq.n	80037bc <MX_TIM2_Init+0x68>
    {
        Error_Handler();
 80037b8:	f000 f95c 	bl	8003a74 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80037bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80037c0:	62bb      	str	r3, [r7, #40]	@ 0x28

    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80037c2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80037c6:	4619      	mov	r1, r3
 80037c8:	481c      	ldr	r0, [pc, #112]	@ (800383c <MX_TIM2_Init+0xe8>)
 80037ca:	f004 fbc5 	bl	8007f58 <HAL_TIM_ConfigClockSource>
 80037ce:	4603      	mov	r3, r0
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d001      	beq.n	80037d8 <MX_TIM2_Init+0x84>
    {
        Error_Handler();
 80037d4:	f000 f94e 	bl	8003a74 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80037d8:	4818      	ldr	r0, [pc, #96]	@ (800383c <MX_TIM2_Init+0xe8>)
 80037da:	f004 f8e9 	bl	80079b0 <HAL_TIM_PWM_Init>
 80037de:	4603      	mov	r3, r0
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <MX_TIM2_Init+0x94>
    {
        Error_Handler();
 80037e4:	f000 f946 	bl	8003a74 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80037e8:	2300      	movs	r3, #0
 80037ea:	623b      	str	r3, [r7, #32]

    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037ec:	2300      	movs	r3, #0
 80037ee:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80037f0:	f107 0320 	add.w	r3, r7, #32
 80037f4:	4619      	mov	r1, r3
 80037f6:	4811      	ldr	r0, [pc, #68]	@ (800383c <MX_TIM2_Init+0xe8>)
 80037f8:	f004 ffba 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 80037fc:	4603      	mov	r3, r0
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <MX_TIM2_Init+0xb2>
    {
        Error_Handler();
 8003802:	f000 f937 	bl	8003a74 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8003806:	2360      	movs	r3, #96	@ 0x60
 8003808:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0; // Initial duty cycle 0
 800380a:	2300      	movs	r3, #0
 800380c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800380e:	2300      	movs	r3, #0
 8003810:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8003812:	2300      	movs	r3, #0
 8003814:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, MOTOR_ENA_CHANNEL) != HAL_OK)
 8003816:	1d3b      	adds	r3, r7, #4
 8003818:	2200      	movs	r2, #0
 800381a:	4619      	mov	r1, r3
 800381c:	4807      	ldr	r0, [pc, #28]	@ (800383c <MX_TIM2_Init+0xe8>)
 800381e:	f004 fad9 	bl	8007dd4 <HAL_TIM_PWM_ConfigChannel>
 8003822:	4603      	mov	r3, r0
 8003824:	2b00      	cmp	r3, #0
 8003826:	d001      	beq.n	800382c <MX_TIM2_Init+0xd8>
    {
        Error_Handler();
 8003828:	f000 f924 	bl	8003a74 <Error_Handler>
    }
    HAL_TIM_MspPostInit(&htim2);
 800382c:	4803      	ldr	r0, [pc, #12]	@ (800383c <MX_TIM2_Init+0xe8>)
 800382e:	f000 fa9d 	bl	8003d6c <HAL_TIM_MspPostInit>
}
 8003832:	bf00      	nop
 8003834:	3738      	adds	r7, #56	@ 0x38
 8003836:	46bd      	mov	sp, r7
 8003838:	bd80      	pop	{r7, pc}
 800383a:	bf00      	nop
 800383c:	20000364 	.word	0x20000364

08003840 <MX_TIM6_Init>:

static void MX_TIM6_Init(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b082      	sub	sp, #8
 8003844:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003846:	463b      	mov	r3, r7
 8003848:	2200      	movs	r2, #0
 800384a:	601a      	str	r2, [r3, #0]
 800384c:	605a      	str	r2, [r3, #4]
    htim6.Instance = TIM6;
 800384e:	4b15      	ldr	r3, [pc, #84]	@ (80038a4 <MX_TIM6_Init+0x64>)
 8003850:	4a15      	ldr	r2, [pc, #84]	@ (80038a8 <MX_TIM6_Init+0x68>)
 8003852:	601a      	str	r2, [r3, #0]
    htim6.Init.Prescaler = 83;
 8003854:	4b13      	ldr	r3, [pc, #76]	@ (80038a4 <MX_TIM6_Init+0x64>)
 8003856:	2253      	movs	r2, #83	@ 0x53
 8003858:	605a      	str	r2, [r3, #4]
    htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800385a:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <MX_TIM6_Init+0x64>)
 800385c:	2200      	movs	r2, #0
 800385e:	609a      	str	r2, [r3, #8]
    htim6.Init.Period = 65535;
 8003860:	4b10      	ldr	r3, [pc, #64]	@ (80038a4 <MX_TIM6_Init+0x64>)
 8003862:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003866:	60da      	str	r2, [r3, #12]
    htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003868:	4b0e      	ldr	r3, [pc, #56]	@ (80038a4 <MX_TIM6_Init+0x64>)
 800386a:	2280      	movs	r2, #128	@ 0x80
 800386c:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800386e:	480d      	ldr	r0, [pc, #52]	@ (80038a4 <MX_TIM6_Init+0x64>)
 8003870:	f003 ff76 	bl	8007760 <HAL_TIM_Base_Init>
 8003874:	4603      	mov	r3, r0
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <MX_TIM6_Init+0x3e>
    {
        Error_Handler();
 800387a:	f000 f8fb 	bl	8003a74 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800387e:	2300      	movs	r3, #0
 8003880:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003882:	2300      	movs	r3, #0
 8003884:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003886:	463b      	mov	r3, r7
 8003888:	4619      	mov	r1, r3
 800388a:	4806      	ldr	r0, [pc, #24]	@ (80038a4 <MX_TIM6_Init+0x64>)
 800388c:	f004 ff70 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 8003890:	4603      	mov	r3, r0
 8003892:	2b00      	cmp	r3, #0
 8003894:	d001      	beq.n	800389a <MX_TIM6_Init+0x5a>
    {
        Error_Handler();
 8003896:	f000 f8ed 	bl	8003a74 <Error_Handler>
    }
}
 800389a:	bf00      	nop
 800389c:	3708      	adds	r7, #8
 800389e:	46bd      	mov	sp, r7
 80038a0:	bd80      	pop	{r7, pc}
 80038a2:	bf00      	nop
 80038a4:	200003ac 	.word	0x200003ac
 80038a8:	40001000 	.word	0x40001000

080038ac <MX_TIM7_Init>:

static void MX_TIM7_Init(void)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80038b2:	463b      	mov	r3, r7
 80038b4:	2200      	movs	r2, #0
 80038b6:	601a      	str	r2, [r3, #0]
 80038b8:	605a      	str	r2, [r3, #4]
    htim7.Instance = TIM7;
 80038ba:	4b15      	ldr	r3, [pc, #84]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038bc:	4a15      	ldr	r2, [pc, #84]	@ (8003914 <MX_TIM7_Init+0x68>)
 80038be:	601a      	str	r2, [r3, #0]
    // PCLK1 (cho TIM2-7) = HCLK / APB1CLKDivider = (336/2) / 4 = 168MHz / 4 = 42MHz.
    // Nếu SystemCoreClock là 168MHz, thì APB1 Timer Clock (TIM2,3,4,5,6,7,12,13,14) là PCLK1 * 2 = 84MHz (nếu APB1 Prescaler != 1)
    // Giả sử APB1 Timer Clock là 84MHz
    // Prescaler = 8400 - 1 => Clock timer = 84MHz / 8400 = 10kHz
    // Period = 500 - 1 => Tần số ngắt = 10kHz / 500 = 20Hz => Chu kỳ 50ms
    htim7.Init.Prescaler = 8400 - 1;
 80038c0:	4b13      	ldr	r3, [pc, #76]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038c2:	f242 02cf 	movw	r2, #8399	@ 0x20cf
 80038c6:	605a      	str	r2, [r3, #4]
    htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 80038c8:	4b11      	ldr	r3, [pc, #68]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	609a      	str	r2, [r3, #8]
    htim7.Init.Period = 500 -1;
 80038ce:	4b10      	ldr	r3, [pc, #64]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038d0:	f240 12f3 	movw	r2, #499	@ 0x1f3
 80038d4:	60da      	str	r2, [r3, #12]
    htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80038d6:	4b0e      	ldr	r3, [pc, #56]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038d8:	2200      	movs	r2, #0
 80038da:	619a      	str	r2, [r3, #24]

    if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80038dc:	480c      	ldr	r0, [pc, #48]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038de:	f003 ff3f 	bl	8007760 <HAL_TIM_Base_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_TIM7_Init+0x40>
    {
        Error_Handler();
 80038e8:	f000 f8c4 	bl	8003a74 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80038ec:	2300      	movs	r3, #0
 80038ee:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80038f0:	2300      	movs	r3, #0
 80038f2:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80038f4:	463b      	mov	r3, r7
 80038f6:	4619      	mov	r1, r3
 80038f8:	4805      	ldr	r0, [pc, #20]	@ (8003910 <MX_TIM7_Init+0x64>)
 80038fa:	f004 ff39 	bl	8008770 <HAL_TIMEx_MasterConfigSynchronization>
 80038fe:	4603      	mov	r3, r0
 8003900:	2b00      	cmp	r3, #0
 8003902:	d001      	beq.n	8003908 <MX_TIM7_Init+0x5c>
    {
        Error_Handler();
 8003904:	f000 f8b6 	bl	8003a74 <Error_Handler>
    }
}
 8003908:	bf00      	nop
 800390a:	3708      	adds	r7, #8
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	200003f4 	.word	0x200003f4
 8003914:	40001400 	.word	0x40001400

08003918 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 8003918:	b580      	push	{r7, lr}
 800391a:	b08a      	sub	sp, #40	@ 0x28
 800391c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800391e:	f107 0314 	add.w	r3, r7, #20
 8003922:	2200      	movs	r2, #0
 8003924:	601a      	str	r2, [r3, #0]
 8003926:	605a      	str	r2, [r3, #4]
 8003928:	609a      	str	r2, [r3, #8]
 800392a:	60da      	str	r2, [r3, #12]
 800392c:	611a      	str	r2, [r3, #16]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	4b4c      	ldr	r3, [pc, #304]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003936:	4a4b      	ldr	r2, [pc, #300]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003938:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800393c:	6313      	str	r3, [r2, #48]	@ 0x30
 800393e:	4b49      	ldr	r3, [pc, #292]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003940:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b45      	ldr	r3, [pc, #276]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4a44      	ldr	r2, [pc, #272]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	6313      	str	r3, [r2, #48]	@ 0x30
 800395a:	4b42      	ldr	r3, [pc, #264]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003966:	2300      	movs	r3, #0
 8003968:	60bb      	str	r3, [r7, #8]
 800396a:	4b3e      	ldr	r3, [pc, #248]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800396e:	4a3d      	ldr	r2, [pc, #244]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003970:	f043 0301 	orr.w	r3, r3, #1
 8003974:	6313      	str	r3, [r2, #48]	@ 0x30
 8003976:	4b3b      	ldr	r3, [pc, #236]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800397a:	f003 0301 	and.w	r3, r3, #1
 800397e:	60bb      	str	r3, [r7, #8]
 8003980:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003982:	2300      	movs	r3, #0
 8003984:	607b      	str	r3, [r7, #4]
 8003986:	4b37      	ldr	r3, [pc, #220]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003988:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800398a:	4a36      	ldr	r2, [pc, #216]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 800398c:	f043 0302 	orr.w	r3, r3, #2
 8003990:	6313      	str	r3, [r2, #48]	@ 0x30
 8003992:	4b34      	ldr	r3, [pc, #208]	@ (8003a64 <MX_GPIO_Init+0x14c>)
 8003994:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003996:	f003 0302 	and.w	r3, r3, #2
 800399a:	607b      	str	r3, [r7, #4]
 800399c:	687b      	ldr	r3, [r7, #4]

    HAL_GPIO_WritePin(GPIOA, TFT_RST_Pin|TFT_CS_Pin|TFT_RS_Pin, GPIO_PIN_SET);
 800399e:	2201      	movs	r2, #1
 80039a0:	211c      	movs	r1, #28
 80039a2:	4831      	ldr	r0, [pc, #196]	@ (8003a68 <MX_GPIO_Init+0x150>)
 80039a4:	f000 feda 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MFRC522_SDA_GPIO_Port, MFRC522_SDA_Pin, GPIO_PIN_SET);
 80039a8:	2201      	movs	r2, #1
 80039aa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 80039ae:	482f      	ldr	r0, [pc, #188]	@ (8003a6c <MX_GPIO_Init+0x154>)
 80039b0:	f000 fed4 	bl	800475c <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(GPIOA, DHT22_PIN_Pin | MOTOR_IN1_PIN, GPIO_PIN_RESET);
 80039b4:	2200      	movs	r2, #0
 80039b6:	2141      	movs	r1, #65	@ 0x41
 80039b8:	482b      	ldr	r0, [pc, #172]	@ (8003a68 <MX_GPIO_Init+0x150>)
 80039ba:	f000 fecf 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LED_PORT, LED_PIN, GPIO_PIN_RESET);
 80039be:	2200      	movs	r2, #0
 80039c0:	2120      	movs	r1, #32
 80039c2:	482b      	ldr	r0, [pc, #172]	@ (8003a70 <MX_GPIO_Init+0x158>)
 80039c4:	f000 feca 	bl	800475c <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(GPIOB, MFRC522_RST_Pin | MOTOR_IN2_PIN, GPIO_PIN_RESET);
 80039c8:	2200      	movs	r2, #0
 80039ca:	f240 2101 	movw	r1, #513	@ 0x201
 80039ce:	4827      	ldr	r0, [pc, #156]	@ (8003a6c <MX_GPIO_Init+0x154>)
 80039d0:	f000 fec4 	bl	800475c <HAL_GPIO_WritePin>

    GPIO_InitStruct.Pin = DHT22_PIN_Pin|TFT_RST_Pin|TFT_CS_Pin|TFT_RS_Pin | MOTOR_IN1_PIN;
 80039d4:	235d      	movs	r3, #93	@ 0x5d
 80039d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039d8:	2301      	movs	r3, #1
 80039da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039dc:	2300      	movs	r3, #0
 80039de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80039e0:	2302      	movs	r3, #2
 80039e2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e4:	f107 0314 	add.w	r3, r7, #20
 80039e8:	4619      	mov	r1, r3
 80039ea:	481f      	ldr	r0, [pc, #124]	@ (8003a68 <MX_GPIO_Init+0x150>)
 80039ec:	f000 fd02 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTION_PIN;
 80039f0:	2302      	movs	r3, #2
 80039f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039f4:	2300      	movs	r3, #0
 80039f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039f8:	2300      	movs	r3, #0
 80039fa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MOTION_PORT, &GPIO_InitStruct);
 80039fc:	f107 0314 	add.w	r3, r7, #20
 8003a00:	4619      	mov	r1, r3
 8003a02:	4819      	ldr	r0, [pc, #100]	@ (8003a68 <MX_GPIO_Init+0x150>)
 8003a04:	f000 fcf6 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = LED_PIN;
 8003a08:	2320      	movs	r3, #32
 8003a0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a10:	2300      	movs	r3, #0
 8003a12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a14:	2300      	movs	r3, #0
 8003a16:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(LED_PORT, &GPIO_InitStruct);
 8003a18:	f107 0314 	add.w	r3, r7, #20
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	4814      	ldr	r0, [pc, #80]	@ (8003a70 <MX_GPIO_Init+0x158>)
 8003a20:	f000 fce8 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MFRC522_RST_Pin|MFRC522_SDA_Pin|MOTOR_IN2_PIN;
 8003a24:	f640 2301 	movw	r3, #2561	@ 0xa01
 8003a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a2a:	2301      	movs	r3, #1
 8003a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a32:	2300      	movs	r3, #0
 8003a34:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a36:	f107 0314 	add.w	r3, r7, #20
 8003a3a:	4619      	mov	r1, r3
 8003a3c:	480b      	ldr	r0, [pc, #44]	@ (8003a6c <MX_GPIO_Init+0x154>)
 8003a3e:	f000 fcd9 	bl	80043f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MFRC522_IRQ_Pin;
 8003a42:	2302      	movs	r3, #2
 8003a44:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a46:	2300      	movs	r3, #0
 8003a48:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a4a:	2301      	movs	r3, #1
 8003a4c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(MFRC522_IRQ_GPIO_Port, &GPIO_InitStruct);
 8003a4e:	f107 0314 	add.w	r3, r7, #20
 8003a52:	4619      	mov	r1, r3
 8003a54:	4805      	ldr	r0, [pc, #20]	@ (8003a6c <MX_GPIO_Init+0x154>)
 8003a56:	f000 fccd 	bl	80043f4 <HAL_GPIO_Init>
}
 8003a5a:	bf00      	nop
 8003a5c:	3728      	adds	r7, #40	@ 0x28
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	40023800 	.word	0x40023800
 8003a68:	40020000 	.word	0x40020000
 8003a6c:	40020400 	.word	0x40020400
 8003a70:	40020800 	.word	0x40020800

08003a74 <Error_Handler>:

void Error_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003a78:	b672      	cpsid	i
}
 8003a7a:	bf00      	nop
    __disable_irq();
    while (1)
 8003a7c:	bf00      	nop
 8003a7e:	e7fd      	b.n	8003a7c <Error_Handler+0x8>

08003a80 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003a80:	b480      	push	{r7}
 8003a82:	b083      	sub	sp, #12
 8003a84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a86:	2300      	movs	r3, #0
 8003a88:	607b      	str	r3, [r7, #4]
 8003a8a:	4b10      	ldr	r3, [pc, #64]	@ (8003acc <HAL_MspInit+0x4c>)
 8003a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a8e:	4a0f      	ldr	r2, [pc, #60]	@ (8003acc <HAL_MspInit+0x4c>)
 8003a90:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003a94:	6453      	str	r3, [r2, #68]	@ 0x44
 8003a96:	4b0d      	ldr	r3, [pc, #52]	@ (8003acc <HAL_MspInit+0x4c>)
 8003a98:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a9a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003a9e:	607b      	str	r3, [r7, #4]
 8003aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	4b09      	ldr	r3, [pc, #36]	@ (8003acc <HAL_MspInit+0x4c>)
 8003aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003aaa:	4a08      	ldr	r2, [pc, #32]	@ (8003acc <HAL_MspInit+0x4c>)
 8003aac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ab2:	4b06      	ldr	r3, [pc, #24]	@ (8003acc <HAL_MspInit+0x4c>)
 8003ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ab6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003aba:	603b      	str	r3, [r7, #0]
 8003abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003abe:	bf00      	nop
 8003ac0:	370c      	adds	r7, #12
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac8:	4770      	bx	lr
 8003aca:	bf00      	nop
 8003acc:	40023800 	.word	0x40023800

08003ad0 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b08a      	sub	sp, #40	@ 0x28
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ad8:	f107 0314 	add.w	r3, r7, #20
 8003adc:	2200      	movs	r2, #0
 8003ade:	601a      	str	r2, [r3, #0]
 8003ae0:	605a      	str	r2, [r3, #4]
 8003ae2:	609a      	str	r2, [r3, #8]
 8003ae4:	60da      	str	r2, [r3, #12]
 8003ae6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a19      	ldr	r2, [pc, #100]	@ (8003b54 <HAL_I2C_MspInit+0x84>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d12b      	bne.n	8003b4a <HAL_I2C_MspInit+0x7a>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af2:	2300      	movs	r3, #0
 8003af4:	613b      	str	r3, [r7, #16]
 8003af6:	4b18      	ldr	r3, [pc, #96]	@ (8003b58 <HAL_I2C_MspInit+0x88>)
 8003af8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003afa:	4a17      	ldr	r2, [pc, #92]	@ (8003b58 <HAL_I2C_MspInit+0x88>)
 8003afc:	f043 0302 	orr.w	r3, r3, #2
 8003b00:	6313      	str	r3, [r2, #48]	@ 0x30
 8003b02:	4b15      	ldr	r3, [pc, #84]	@ (8003b58 <HAL_I2C_MspInit+0x88>)
 8003b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b06:	f003 0302 	and.w	r3, r3, #2
 8003b0a:	613b      	str	r3, [r7, #16]
 8003b0c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b0e:	23c0      	movs	r3, #192	@ 0xc0
 8003b10:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b12:	2312      	movs	r3, #18
 8003b14:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b16:	2300      	movs	r3, #0
 8003b18:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1a:	2303      	movs	r3, #3
 8003b1c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b1e:	2304      	movs	r3, #4
 8003b20:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b22:	f107 0314 	add.w	r3, r7, #20
 8003b26:	4619      	mov	r1, r3
 8003b28:	480c      	ldr	r0, [pc, #48]	@ (8003b5c <HAL_I2C_MspInit+0x8c>)
 8003b2a:	f000 fc63 	bl	80043f4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b2e:	2300      	movs	r3, #0
 8003b30:	60fb      	str	r3, [r7, #12]
 8003b32:	4b09      	ldr	r3, [pc, #36]	@ (8003b58 <HAL_I2C_MspInit+0x88>)
 8003b34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b36:	4a08      	ldr	r2, [pc, #32]	@ (8003b58 <HAL_I2C_MspInit+0x88>)
 8003b38:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8003b3c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003b3e:	4b06      	ldr	r3, [pc, #24]	@ (8003b58 <HAL_I2C_MspInit+0x88>)
 8003b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003b46:	60fb      	str	r3, [r7, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]

    /* USER CODE END I2C1_MspInit 1 */

  }

}
 8003b4a:	bf00      	nop
 8003b4c:	3728      	adds	r7, #40	@ 0x28
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	bd80      	pop	{r7, pc}
 8003b52:	bf00      	nop
 8003b54:	40005400 	.word	0x40005400
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	40020400 	.word	0x40020400

08003b60 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b08c      	sub	sp, #48	@ 0x30
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b68:	f107 031c 	add.w	r3, r7, #28
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	601a      	str	r2, [r3, #0]
 8003b70:	605a      	str	r2, [r3, #4]
 8003b72:	609a      	str	r2, [r3, #8]
 8003b74:	60da      	str	r2, [r3, #12]
 8003b76:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	4a41      	ldr	r2, [pc, #260]	@ (8003c84 <HAL_SPI_MspInit+0x124>)
 8003b7e:	4293      	cmp	r3, r2
 8003b80:	d12c      	bne.n	8003bdc <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8003b82:	2300      	movs	r3, #0
 8003b84:	61bb      	str	r3, [r7, #24]
 8003b86:	4b40      	ldr	r3, [pc, #256]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003b8c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8003b90:	6453      	str	r3, [r2, #68]	@ 0x44
 8003b92:	4b3d      	ldr	r3, [pc, #244]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b96:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8003b9a:	61bb      	str	r3, [r7, #24]
 8003b9c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003b9e:	2300      	movs	r3, #0
 8003ba0:	617b      	str	r3, [r7, #20]
 8003ba2:	4b39      	ldr	r3, [pc, #228]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003ba4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ba6:	4a38      	ldr	r2, [pc, #224]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003ba8:	f043 0301 	orr.w	r3, r3, #1
 8003bac:	6313      	str	r3, [r2, #48]	@ 0x30
 8003bae:	4b36      	ldr	r3, [pc, #216]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bb2:	f003 0301 	and.w	r3, r3, #1
 8003bb6:	617b      	str	r3, [r7, #20]
 8003bb8:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8003bba:	23a0      	movs	r3, #160	@ 0xa0
 8003bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003bbe:	2302      	movs	r3, #2
 8003bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bc6:	2303      	movs	r3, #3
 8003bc8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8003bca:	2305      	movs	r3, #5
 8003bcc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bce:	f107 031c 	add.w	r3, r7, #28
 8003bd2:	4619      	mov	r1, r3
 8003bd4:	482d      	ldr	r0, [pc, #180]	@ (8003c8c <HAL_SPI_MspInit+0x12c>)
 8003bd6:	f000 fc0d 	bl	80043f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN SPI2_MspInit 1 */

    /* USER CODE END SPI2_MspInit 1 */
  }

}
 8003bda:	e04f      	b.n	8003c7c <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a2b      	ldr	r2, [pc, #172]	@ (8003c90 <HAL_SPI_MspInit+0x130>)
 8003be2:	4293      	cmp	r3, r2
 8003be4:	d14a      	bne.n	8003c7c <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8003be6:	2300      	movs	r3, #0
 8003be8:	613b      	str	r3, [r7, #16]
 8003bea:	4b27      	ldr	r3, [pc, #156]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003bec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bee:	4a26      	ldr	r2, [pc, #152]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003bf0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003bf4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003bf6:	4b24      	ldr	r3, [pc, #144]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003bf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003bfa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003bfe:	613b      	str	r3, [r7, #16]
 8003c00:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c02:	2300      	movs	r3, #0
 8003c04:	60fb      	str	r3, [r7, #12]
 8003c06:	4b20      	ldr	r3, [pc, #128]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c0a:	4a1f      	ldr	r2, [pc, #124]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003c0c:	f043 0304 	orr.w	r3, r3, #4
 8003c10:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c12:	4b1d      	ldr	r3, [pc, #116]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003c14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c16:	f003 0304 	and.w	r3, r3, #4
 8003c1a:	60fb      	str	r3, [r7, #12]
 8003c1c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c1e:	2300      	movs	r3, #0
 8003c20:	60bb      	str	r3, [r7, #8]
 8003c22:	4b19      	ldr	r3, [pc, #100]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003c24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c26:	4a18      	ldr	r2, [pc, #96]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003c28:	f043 0302 	orr.w	r3, r3, #2
 8003c2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003c2e:	4b16      	ldr	r3, [pc, #88]	@ (8003c88 <HAL_SPI_MspInit+0x128>)
 8003c30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	60bb      	str	r3, [r7, #8]
 8003c38:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8003c3a:	230c      	movs	r3, #12
 8003c3c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c3e:	2302      	movs	r3, #2
 8003c40:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c42:	2300      	movs	r3, #0
 8003c44:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c46:	2303      	movs	r3, #3
 8003c48:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c4a:	2305      	movs	r3, #5
 8003c4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c4e:	f107 031c 	add.w	r3, r7, #28
 8003c52:	4619      	mov	r1, r3
 8003c54:	480f      	ldr	r0, [pc, #60]	@ (8003c94 <HAL_SPI_MspInit+0x134>)
 8003c56:	f000 fbcd 	bl	80043f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003c5a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003c5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c60:	2302      	movs	r3, #2
 8003c62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c64:	2300      	movs	r3, #0
 8003c66:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c68:	2303      	movs	r3, #3
 8003c6a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003c6c:	2305      	movs	r3, #5
 8003c6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c70:	f107 031c 	add.w	r3, r7, #28
 8003c74:	4619      	mov	r1, r3
 8003c76:	4808      	ldr	r0, [pc, #32]	@ (8003c98 <HAL_SPI_MspInit+0x138>)
 8003c78:	f000 fbbc 	bl	80043f4 <HAL_GPIO_Init>
}
 8003c7c:	bf00      	nop
 8003c7e:	3730      	adds	r7, #48	@ 0x30
 8003c80:	46bd      	mov	sp, r7
 8003c82:	bd80      	pop	{r7, pc}
 8003c84:	40013000 	.word	0x40013000
 8003c88:	40023800 	.word	0x40023800
 8003c8c:	40020000 	.word	0x40020000
 8003c90:	40003800 	.word	0x40003800
 8003c94:	40020800 	.word	0x40020800
 8003c98:	40020400 	.word	0x40020400

08003c9c <HAL_TIM_Base_MspInit>:
  * This function configures the hardware resources used in this example
  * @param htim_base: TIM_Base handle pointer
  * @retval None
  */
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b086      	sub	sp, #24
 8003ca0:	af00      	add	r7, sp, #0
 8003ca2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4a2c      	ldr	r2, [pc, #176]	@ (8003d5c <HAL_TIM_Base_MspInit+0xc0>)
 8003caa:	4293      	cmp	r3, r2
 8003cac:	d10e      	bne.n	8003ccc <HAL_TIM_Base_MspInit+0x30>
  {
    /* USER CODE BEGIN TIM1_MspInit 0 */

    /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003cae:	2300      	movs	r3, #0
 8003cb0:	617b      	str	r3, [r7, #20]
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cb6:	4a2a      	ldr	r2, [pc, #168]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003cb8:	f043 0301 	orr.w	r3, r3, #1
 8003cbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8003cbe:	4b28      	ldr	r3, [pc, #160]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003cc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	617b      	str	r3, [r7, #20]
 8003cc8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN TIM7_MspInit 1 */

    /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003cca:	e042      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM2)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd4:	d10e      	bne.n	8003cf4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003cd6:	2300      	movs	r3, #0
 8003cd8:	613b      	str	r3, [r7, #16]
 8003cda:	4b21      	ldr	r3, [pc, #132]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003cdc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cde:	4a20      	ldr	r2, [pc, #128]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003ce0:	f043 0301 	orr.w	r3, r3, #1
 8003ce4:	6413      	str	r3, [r2, #64]	@ 0x40
 8003ce6:	4b1e      	ldr	r3, [pc, #120]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003ce8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003cea:	f003 0301 	and.w	r3, r3, #1
 8003cee:	613b      	str	r3, [r7, #16]
 8003cf0:	693b      	ldr	r3, [r7, #16]
}
 8003cf2:	e02e      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM6)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1a      	ldr	r2, [pc, #104]	@ (8003d64 <HAL_TIM_Base_MspInit+0xc8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d10e      	bne.n	8003d1c <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003cfe:	2300      	movs	r3, #0
 8003d00:	60fb      	str	r3, [r7, #12]
 8003d02:	4b17      	ldr	r3, [pc, #92]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003d04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d06:	4a16      	ldr	r2, [pc, #88]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003d08:	f043 0310 	orr.w	r3, r3, #16
 8003d0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d0e:	4b14      	ldr	r3, [pc, #80]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003d10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d12:	f003 0310 	and.w	r3, r3, #16
 8003d16:	60fb      	str	r3, [r7, #12]
 8003d18:	68fb      	ldr	r3, [r7, #12]
}
 8003d1a:	e01a      	b.n	8003d52 <HAL_TIM_Base_MspInit+0xb6>
  else if(htim_base->Instance==TIM7)
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a11      	ldr	r2, [pc, #68]	@ (8003d68 <HAL_TIM_Base_MspInit+0xcc>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d115      	bne.n	8003d52 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003d26:	2300      	movs	r3, #0
 8003d28:	60bb      	str	r3, [r7, #8]
 8003d2a:	4b0d      	ldr	r3, [pc, #52]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d2e:	4a0c      	ldr	r2, [pc, #48]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003d30:	f043 0320 	orr.w	r3, r3, #32
 8003d34:	6413      	str	r3, [r2, #64]	@ 0x40
 8003d36:	4b0a      	ldr	r3, [pc, #40]	@ (8003d60 <HAL_TIM_Base_MspInit+0xc4>)
 8003d38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d3a:	f003 0320 	and.w	r3, r3, #32
 8003d3e:	60bb      	str	r3, [r7, #8]
 8003d40:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 8003d42:	2200      	movs	r2, #0
 8003d44:	2100      	movs	r1, #0
 8003d46:	2037      	movs	r0, #55	@ 0x37
 8003d48:	f000 fb1d 	bl	8004386 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003d4c:	2037      	movs	r0, #55	@ 0x37
 8003d4e:	f000 fb36 	bl	80043be <HAL_NVIC_EnableIRQ>
}
 8003d52:	bf00      	nop
 8003d54:	3718      	adds	r7, #24
 8003d56:	46bd      	mov	sp, r7
 8003d58:	bd80      	pop	{r7, pc}
 8003d5a:	bf00      	nop
 8003d5c:	40010000 	.word	0x40010000
 8003d60:	40023800 	.word	0x40023800
 8003d64:	40001000 	.word	0x40001000
 8003d68:	40001400 	.word	0x40001400

08003d6c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b08a      	sub	sp, #40	@ 0x28
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003d74:	f107 0314 	add.w	r3, r7, #20
 8003d78:	2200      	movs	r2, #0
 8003d7a:	601a      	str	r2, [r3, #0]
 8003d7c:	605a      	str	r2, [r3, #4]
 8003d7e:	609a      	str	r2, [r3, #8]
 8003d80:	60da      	str	r2, [r3, #12]
 8003d82:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	4a25      	ldr	r2, [pc, #148]	@ (8003e20 <HAL_TIM_MspPostInit+0xb4>)
 8003d8a:	4293      	cmp	r3, r2
 8003d8c:	d11f      	bne.n	8003dce <HAL_TIM_MspPostInit+0x62>
  {
    /* USER CODE BEGIN TIM1_MspPostInit 0 */

    /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d8e:	2300      	movs	r3, #0
 8003d90:	613b      	str	r3, [r7, #16]
 8003d92:	4b24      	ldr	r3, [pc, #144]	@ (8003e24 <HAL_TIM_MspPostInit+0xb8>)
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	4a23      	ldr	r2, [pc, #140]	@ (8003e24 <HAL_TIM_MspPostInit+0xb8>)
 8003d98:	f043 0301 	orr.w	r3, r3, #1
 8003d9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8003d9e:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <HAL_TIM_MspPostInit+0xb8>)
 8003da0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003da2:	f003 0301 	and.w	r3, r3, #1
 8003da6:	613b      	str	r3, [r7, #16]
 8003da8:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8003daa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003db0:	2302      	movs	r3, #2
 8003db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db4:	2300      	movs	r3, #0
 8003db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003db8:	2300      	movs	r3, #0
 8003dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003dc0:	f107 0314 	add.w	r3, r7, #20
 8003dc4:	4619      	mov	r1, r3
 8003dc6:	4818      	ldr	r0, [pc, #96]	@ (8003e28 <HAL_TIM_MspPostInit+0xbc>)
 8003dc8:	f000 fb14 	bl	80043f4 <HAL_GPIO_Init>
    /* USER CODE BEGIN TIM2_MspPostInit 1 */

    /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8003dcc:	e023      	b.n	8003e16 <HAL_TIM_MspPostInit+0xaa>
  else if(htim->Instance==TIM2)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003dd6:	d11e      	bne.n	8003e16 <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003dd8:	2300      	movs	r3, #0
 8003dda:	60fb      	str	r3, [r7, #12]
 8003ddc:	4b11      	ldr	r3, [pc, #68]	@ (8003e24 <HAL_TIM_MspPostInit+0xb8>)
 8003dde:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003de0:	4a10      	ldr	r2, [pc, #64]	@ (8003e24 <HAL_TIM_MspPostInit+0xb8>)
 8003de2:	f043 0301 	orr.w	r3, r3, #1
 8003de6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003de8:	4b0e      	ldr	r3, [pc, #56]	@ (8003e24 <HAL_TIM_MspPostInit+0xb8>)
 8003dea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dec:	f003 0301 	and.w	r3, r3, #1
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003df4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003df8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dfa:	2302      	movs	r3, #2
 8003dfc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e02:	2300      	movs	r3, #0
 8003e04:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003e06:	2301      	movs	r3, #1
 8003e08:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e0a:	f107 0314 	add.w	r3, r7, #20
 8003e0e:	4619      	mov	r1, r3
 8003e10:	4805      	ldr	r0, [pc, #20]	@ (8003e28 <HAL_TIM_MspPostInit+0xbc>)
 8003e12:	f000 faef 	bl	80043f4 <HAL_GPIO_Init>
}
 8003e16:	bf00      	nop
 8003e18:	3728      	adds	r7, #40	@ 0x28
 8003e1a:	46bd      	mov	sp, r7
 8003e1c:	bd80      	pop	{r7, pc}
 8003e1e:	bf00      	nop
 8003e20:	40010000 	.word	0x40010000
 8003e24:	40023800 	.word	0x40023800
 8003e28:	40020000 	.word	0x40020000

08003e2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8003e30:	bf00      	nop
 8003e32:	e7fd      	b.n	8003e30 <NMI_Handler+0x4>

08003e34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e34:	b480      	push	{r7}
 8003e36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e38:	bf00      	nop
 8003e3a:	e7fd      	b.n	8003e38 <HardFault_Handler+0x4>

08003e3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e40:	bf00      	nop
 8003e42:	e7fd      	b.n	8003e40 <MemManage_Handler+0x4>

08003e44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e44:	b480      	push	{r7}
 8003e46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e48:	bf00      	nop
 8003e4a:	e7fd      	b.n	8003e48 <BusFault_Handler+0x4>

08003e4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e50:	bf00      	nop
 8003e52:	e7fd      	b.n	8003e50 <UsageFault_Handler+0x4>

08003e54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003e54:	b480      	push	{r7}
 8003e56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003e58:	bf00      	nop
 8003e5a:	46bd      	mov	sp, r7
 8003e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e60:	4770      	bx	lr

08003e62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e62:	b480      	push	{r7}
 8003e64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e66:	bf00      	nop
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e6e:	4770      	bx	lr

08003e70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003e74:	bf00      	nop
 8003e76:	46bd      	mov	sp, r7
 8003e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7c:	4770      	bx	lr

08003e7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e7e:	b580      	push	{r7, lr}
 8003e80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e82:	f000 f961 	bl	8004148 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e86:	bf00      	nop
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 8003e90:	4802      	ldr	r0, [pc, #8]	@ (8003e9c <TIM7_IRQHandler+0x10>)
 8003e92:	f003 feaf 	bl	8007bf4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	200003f4 	.word	0x200003f4

08003ea0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003ea0:	b480      	push	{r7}
 8003ea2:	af00      	add	r7, sp, #0
  return 1;
 8003ea4:	2301      	movs	r3, #1
}
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	46bd      	mov	sp, r7
 8003eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eae:	4770      	bx	lr

08003eb0 <_kill>:

int _kill(int pid, int sig)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b082      	sub	sp, #8
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003eba:	f005 fbfd 	bl	80096b8 <__errno>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2216      	movs	r2, #22
 8003ec2:	601a      	str	r2, [r3, #0]
  return -1;
 8003ec4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003ec8:	4618      	mov	r0, r3
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}

08003ed0 <_exit>:

void _exit (int status)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b082      	sub	sp, #8
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003ed8:	f04f 31ff 	mov.w	r1, #4294967295
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f7ff ffe7 	bl	8003eb0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003ee2:	bf00      	nop
 8003ee4:	e7fd      	b.n	8003ee2 <_exit+0x12>

08003ee6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b086      	sub	sp, #24
 8003eea:	af00      	add	r7, sp, #0
 8003eec:	60f8      	str	r0, [r7, #12]
 8003eee:	60b9      	str	r1, [r7, #8]
 8003ef0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	617b      	str	r3, [r7, #20]
 8003ef6:	e00a      	b.n	8003f0e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003ef8:	f3af 8000 	nop.w
 8003efc:	4601      	mov	r1, r0
 8003efe:	68bb      	ldr	r3, [r7, #8]
 8003f00:	1c5a      	adds	r2, r3, #1
 8003f02:	60ba      	str	r2, [r7, #8]
 8003f04:	b2ca      	uxtb	r2, r1
 8003f06:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f08:	697b      	ldr	r3, [r7, #20]
 8003f0a:	3301      	adds	r3, #1
 8003f0c:	617b      	str	r3, [r7, #20]
 8003f0e:	697a      	ldr	r2, [r7, #20]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	429a      	cmp	r2, r3
 8003f14:	dbf0      	blt.n	8003ef8 <_read+0x12>
  }

  return len;
 8003f16:	687b      	ldr	r3, [r7, #4]
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3718      	adds	r7, #24
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003f20:	b580      	push	{r7, lr}
 8003f22:	b086      	sub	sp, #24
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	60f8      	str	r0, [r7, #12]
 8003f28:	60b9      	str	r1, [r7, #8]
 8003f2a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	617b      	str	r3, [r7, #20]
 8003f30:	e009      	b.n	8003f46 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	1c5a      	adds	r2, r3, #1
 8003f36:	60ba      	str	r2, [r7, #8]
 8003f38:	781b      	ldrb	r3, [r3, #0]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	3301      	adds	r3, #1
 8003f44:	617b      	str	r3, [r7, #20]
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	dbf1      	blt.n	8003f32 <_write+0x12>
  }
  return len;
 8003f4e:	687b      	ldr	r3, [r7, #4]
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	3718      	adds	r7, #24
 8003f54:	46bd      	mov	sp, r7
 8003f56:	bd80      	pop	{r7, pc}

08003f58 <_close>:

int _close(int file)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003f60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f64:	4618      	mov	r0, r3
 8003f66:	370c      	adds	r7, #12
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f6e:	4770      	bx	lr

08003f70 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
 8003f78:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003f7a:	683b      	ldr	r3, [r7, #0]
 8003f7c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003f80:	605a      	str	r2, [r3, #4]
  return 0;
 8003f82:	2300      	movs	r3, #0
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	370c      	adds	r7, #12
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr

08003f90 <_isatty>:

int _isatty(int file)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b083      	sub	sp, #12
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003f98:	2301      	movs	r3, #1
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr

08003fa6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003fa6:	b480      	push	{r7}
 8003fa8:	b085      	sub	sp, #20
 8003faa:	af00      	add	r7, sp, #0
 8003fac:	60f8      	str	r0, [r7, #12]
 8003fae:	60b9      	str	r1, [r7, #8]
 8003fb0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003fb2:	2300      	movs	r3, #0
}
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	3714      	adds	r7, #20
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b086      	sub	sp, #24
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003fc8:	4a14      	ldr	r2, [pc, #80]	@ (800401c <_sbrk+0x5c>)
 8003fca:	4b15      	ldr	r3, [pc, #84]	@ (8004020 <_sbrk+0x60>)
 8003fcc:	1ad3      	subs	r3, r2, r3
 8003fce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003fd0:	697b      	ldr	r3, [r7, #20]
 8003fd2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003fd4:	4b13      	ldr	r3, [pc, #76]	@ (8004024 <_sbrk+0x64>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d102      	bne.n	8003fe2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fdc:	4b11      	ldr	r3, [pc, #68]	@ (8004024 <_sbrk+0x64>)
 8003fde:	4a12      	ldr	r2, [pc, #72]	@ (8004028 <_sbrk+0x68>)
 8003fe0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fe2:	4b10      	ldr	r3, [pc, #64]	@ (8004024 <_sbrk+0x64>)
 8003fe4:	681a      	ldr	r2, [r3, #0]
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	4413      	add	r3, r2
 8003fea:	693a      	ldr	r2, [r7, #16]
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d207      	bcs.n	8004000 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ff0:	f005 fb62 	bl	80096b8 <__errno>
 8003ff4:	4603      	mov	r3, r0
 8003ff6:	220c      	movs	r2, #12
 8003ff8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ffa:	f04f 33ff 	mov.w	r3, #4294967295
 8003ffe:	e009      	b.n	8004014 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004000:	4b08      	ldr	r3, [pc, #32]	@ (8004024 <_sbrk+0x64>)
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004006:	4b07      	ldr	r3, [pc, #28]	@ (8004024 <_sbrk+0x64>)
 8004008:	681a      	ldr	r2, [r3, #0]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4413      	add	r3, r2
 800400e:	4a05      	ldr	r2, [pc, #20]	@ (8004024 <_sbrk+0x64>)
 8004010:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004012:	68fb      	ldr	r3, [r7, #12]
}
 8004014:	4618      	mov	r0, r3
 8004016:	3718      	adds	r7, #24
 8004018:	46bd      	mov	sp, r7
 800401a:	bd80      	pop	{r7, pc}
 800401c:	20020000 	.word	0x20020000
 8004020:	00000400 	.word	0x00000400
 8004024:	200004e0 	.word	0x200004e0
 8004028:	20000638 	.word	0x20000638

0800402c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800402c:	b480      	push	{r7}
 800402e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004030:	4b06      	ldr	r3, [pc, #24]	@ (800404c <SystemInit+0x20>)
 8004032:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004036:	4a05      	ldr	r2, [pc, #20]	@ (800404c <SystemInit+0x20>)
 8004038:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800403c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004040:	bf00      	nop
 8004042:	46bd      	mov	sp, r7
 8004044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004048:	4770      	bx	lr
 800404a:	bf00      	nop
 800404c:	e000ed00 	.word	0xe000ed00

08004050 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004050:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004088 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8004054:	f7ff ffea 	bl	800402c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004058:	480c      	ldr	r0, [pc, #48]	@ (800408c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800405a:	490d      	ldr	r1, [pc, #52]	@ (8004090 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800405c:	4a0d      	ldr	r2, [pc, #52]	@ (8004094 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800405e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004060:	e002      	b.n	8004068 <LoopCopyDataInit>

08004062 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004062:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004064:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004066:	3304      	adds	r3, #4

08004068 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004068:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800406a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800406c:	d3f9      	bcc.n	8004062 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800406e:	4a0a      	ldr	r2, [pc, #40]	@ (8004098 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8004070:	4c0a      	ldr	r4, [pc, #40]	@ (800409c <LoopFillZerobss+0x22>)
  movs r3, #0
 8004072:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004074:	e001      	b.n	800407a <LoopFillZerobss>

08004076 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004076:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004078:	3204      	adds	r2, #4

0800407a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800407a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800407c:	d3fb      	bcc.n	8004076 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800407e:	f005 fb21 	bl	80096c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004082:	f7fe ffcd 	bl	8003020 <main>
  bx  lr    
 8004086:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004088:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800408c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004090:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8004094:	0800c074 	.word	0x0800c074
  ldr r2, =_sbss
 8004098:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 800409c:	20000634 	.word	0x20000634

080040a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80040a0:	e7fe      	b.n	80040a0 <ADC_IRQHandler>
	...

080040a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80040a4:	b580      	push	{r7, lr}
 80040a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80040a8:	4b0e      	ldr	r3, [pc, #56]	@ (80040e4 <HAL_Init+0x40>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a0d      	ldr	r2, [pc, #52]	@ (80040e4 <HAL_Init+0x40>)
 80040ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80040b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80040b4:	4b0b      	ldr	r3, [pc, #44]	@ (80040e4 <HAL_Init+0x40>)
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	4a0a      	ldr	r2, [pc, #40]	@ (80040e4 <HAL_Init+0x40>)
 80040ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80040be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80040c0:	4b08      	ldr	r3, [pc, #32]	@ (80040e4 <HAL_Init+0x40>)
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	4a07      	ldr	r2, [pc, #28]	@ (80040e4 <HAL_Init+0x40>)
 80040c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80040ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80040cc:	2003      	movs	r0, #3
 80040ce:	f000 f94f 	bl	8004370 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80040d2:	200f      	movs	r0, #15
 80040d4:	f000 f808 	bl	80040e8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80040d8:	f7ff fcd2 	bl	8003a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040dc:	2300      	movs	r3, #0
}
 80040de:	4618      	mov	r0, r3
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	40023c00 	.word	0x40023c00

080040e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040f0:	4b12      	ldr	r3, [pc, #72]	@ (800413c <HAL_InitTick+0x54>)
 80040f2:	681a      	ldr	r2, [r3, #0]
 80040f4:	4b12      	ldr	r3, [pc, #72]	@ (8004140 <HAL_InitTick+0x58>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	4619      	mov	r1, r3
 80040fa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80040fe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004102:	fbb2 f3f3 	udiv	r3, r2, r3
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f967 	bl	80043da <HAL_SYSTICK_Config>
 800410c:	4603      	mov	r3, r0
 800410e:	2b00      	cmp	r3, #0
 8004110:	d001      	beq.n	8004116 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004112:	2301      	movs	r3, #1
 8004114:	e00e      	b.n	8004134 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	2b0f      	cmp	r3, #15
 800411a:	d80a      	bhi.n	8004132 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800411c:	2200      	movs	r2, #0
 800411e:	6879      	ldr	r1, [r7, #4]
 8004120:	f04f 30ff 	mov.w	r0, #4294967295
 8004124:	f000 f92f 	bl	8004386 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004128:	4a06      	ldr	r2, [pc, #24]	@ (8004144 <HAL_InitTick+0x5c>)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800412e:	2300      	movs	r3, #0
 8004130:	e000      	b.n	8004134 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004132:	2301      	movs	r3, #1
}
 8004134:	4618      	mov	r0, r3
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}
 800413c:	2000001c 	.word	0x2000001c
 8004140:	20000024 	.word	0x20000024
 8004144:	20000020 	.word	0x20000020

08004148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004148:	b480      	push	{r7}
 800414a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800414c:	4b06      	ldr	r3, [pc, #24]	@ (8004168 <HAL_IncTick+0x20>)
 800414e:	781b      	ldrb	r3, [r3, #0]
 8004150:	461a      	mov	r2, r3
 8004152:	4b06      	ldr	r3, [pc, #24]	@ (800416c <HAL_IncTick+0x24>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	4413      	add	r3, r2
 8004158:	4a04      	ldr	r2, [pc, #16]	@ (800416c <HAL_IncTick+0x24>)
 800415a:	6013      	str	r3, [r2, #0]
}
 800415c:	bf00      	nop
 800415e:	46bd      	mov	sp, r7
 8004160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004164:	4770      	bx	lr
 8004166:	bf00      	nop
 8004168:	20000024 	.word	0x20000024
 800416c:	200004e4 	.word	0x200004e4

08004170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004170:	b480      	push	{r7}
 8004172:	af00      	add	r7, sp, #0
  return uwTick;
 8004174:	4b03      	ldr	r3, [pc, #12]	@ (8004184 <HAL_GetTick+0x14>)
 8004176:	681b      	ldr	r3, [r3, #0]
}
 8004178:	4618      	mov	r0, r3
 800417a:	46bd      	mov	sp, r7
 800417c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004180:	4770      	bx	lr
 8004182:	bf00      	nop
 8004184:	200004e4 	.word	0x200004e4

08004188 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004188:	b580      	push	{r7, lr}
 800418a:	b084      	sub	sp, #16
 800418c:	af00      	add	r7, sp, #0
 800418e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004190:	f7ff ffee 	bl	8004170 <HAL_GetTick>
 8004194:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041a0:	d005      	beq.n	80041ae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80041a2:	4b0a      	ldr	r3, [pc, #40]	@ (80041cc <HAL_Delay+0x44>)
 80041a4:	781b      	ldrb	r3, [r3, #0]
 80041a6:	461a      	mov	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80041ae:	bf00      	nop
 80041b0:	f7ff ffde 	bl	8004170 <HAL_GetTick>
 80041b4:	4602      	mov	r2, r0
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	1ad3      	subs	r3, r2, r3
 80041ba:	68fa      	ldr	r2, [r7, #12]
 80041bc:	429a      	cmp	r2, r3
 80041be:	d8f7      	bhi.n	80041b0 <HAL_Delay+0x28>
  {
  }
}
 80041c0:	bf00      	nop
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	20000024 	.word	0x20000024

080041d0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b085      	sub	sp, #20
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	f003 0307 	and.w	r3, r3, #7
 80041de:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041e0:	4b0c      	ldr	r3, [pc, #48]	@ (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041e6:	68ba      	ldr	r2, [r7, #8]
 80041e8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80041ec:	4013      	ands	r3, r2
 80041ee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041f8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80041fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004200:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004202:	4a04      	ldr	r2, [pc, #16]	@ (8004214 <__NVIC_SetPriorityGrouping+0x44>)
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	60d3      	str	r3, [r2, #12]
}
 8004208:	bf00      	nop
 800420a:	3714      	adds	r7, #20
 800420c:	46bd      	mov	sp, r7
 800420e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004212:	4770      	bx	lr
 8004214:	e000ed00 	.word	0xe000ed00

08004218 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004218:	b480      	push	{r7}
 800421a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800421c:	4b04      	ldr	r3, [pc, #16]	@ (8004230 <__NVIC_GetPriorityGrouping+0x18>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	0a1b      	lsrs	r3, r3, #8
 8004222:	f003 0307 	and.w	r3, r3, #7
}
 8004226:	4618      	mov	r0, r3
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr
 8004230:	e000ed00 	.word	0xe000ed00

08004234 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800423e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004242:	2b00      	cmp	r3, #0
 8004244:	db0b      	blt.n	800425e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004246:	79fb      	ldrb	r3, [r7, #7]
 8004248:	f003 021f 	and.w	r2, r3, #31
 800424c:	4907      	ldr	r1, [pc, #28]	@ (800426c <__NVIC_EnableIRQ+0x38>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2001      	movs	r0, #1
 8004256:	fa00 f202 	lsl.w	r2, r0, r2
 800425a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800425e:	bf00      	nop
 8004260:	370c      	adds	r7, #12
 8004262:	46bd      	mov	sp, r7
 8004264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004268:	4770      	bx	lr
 800426a:	bf00      	nop
 800426c:	e000e100 	.word	0xe000e100

08004270 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	4603      	mov	r3, r0
 8004278:	6039      	str	r1, [r7, #0]
 800427a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800427c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004280:	2b00      	cmp	r3, #0
 8004282:	db0a      	blt.n	800429a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004284:	683b      	ldr	r3, [r7, #0]
 8004286:	b2da      	uxtb	r2, r3
 8004288:	490c      	ldr	r1, [pc, #48]	@ (80042bc <__NVIC_SetPriority+0x4c>)
 800428a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800428e:	0112      	lsls	r2, r2, #4
 8004290:	b2d2      	uxtb	r2, r2
 8004292:	440b      	add	r3, r1
 8004294:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004298:	e00a      	b.n	80042b0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800429a:	683b      	ldr	r3, [r7, #0]
 800429c:	b2da      	uxtb	r2, r3
 800429e:	4908      	ldr	r1, [pc, #32]	@ (80042c0 <__NVIC_SetPriority+0x50>)
 80042a0:	79fb      	ldrb	r3, [r7, #7]
 80042a2:	f003 030f 	and.w	r3, r3, #15
 80042a6:	3b04      	subs	r3, #4
 80042a8:	0112      	lsls	r2, r2, #4
 80042aa:	b2d2      	uxtb	r2, r2
 80042ac:	440b      	add	r3, r1
 80042ae:	761a      	strb	r2, [r3, #24]
}
 80042b0:	bf00      	nop
 80042b2:	370c      	adds	r7, #12
 80042b4:	46bd      	mov	sp, r7
 80042b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ba:	4770      	bx	lr
 80042bc:	e000e100 	.word	0xe000e100
 80042c0:	e000ed00 	.word	0xe000ed00

080042c4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b089      	sub	sp, #36	@ 0x24
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	60f8      	str	r0, [r7, #12]
 80042cc:	60b9      	str	r1, [r7, #8]
 80042ce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042d8:	69fb      	ldr	r3, [r7, #28]
 80042da:	f1c3 0307 	rsb	r3, r3, #7
 80042de:	2b04      	cmp	r3, #4
 80042e0:	bf28      	it	cs
 80042e2:	2304      	movcs	r3, #4
 80042e4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042e6:	69fb      	ldr	r3, [r7, #28]
 80042e8:	3304      	adds	r3, #4
 80042ea:	2b06      	cmp	r3, #6
 80042ec:	d902      	bls.n	80042f4 <NVIC_EncodePriority+0x30>
 80042ee:	69fb      	ldr	r3, [r7, #28]
 80042f0:	3b03      	subs	r3, #3
 80042f2:	e000      	b.n	80042f6 <NVIC_EncodePriority+0x32>
 80042f4:	2300      	movs	r3, #0
 80042f6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042f8:	f04f 32ff 	mov.w	r2, #4294967295
 80042fc:	69bb      	ldr	r3, [r7, #24]
 80042fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004302:	43da      	mvns	r2, r3
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	401a      	ands	r2, r3
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800430c:	f04f 31ff 	mov.w	r1, #4294967295
 8004310:	697b      	ldr	r3, [r7, #20]
 8004312:	fa01 f303 	lsl.w	r3, r1, r3
 8004316:	43d9      	mvns	r1, r3
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800431c:	4313      	orrs	r3, r2
         );
}
 800431e:	4618      	mov	r0, r3
 8004320:	3724      	adds	r7, #36	@ 0x24
 8004322:	46bd      	mov	sp, r7
 8004324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004328:	4770      	bx	lr
	...

0800432c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800432c:	b580      	push	{r7, lr}
 800432e:	b082      	sub	sp, #8
 8004330:	af00      	add	r7, sp, #0
 8004332:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800433c:	d301      	bcc.n	8004342 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800433e:	2301      	movs	r3, #1
 8004340:	e00f      	b.n	8004362 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004342:	4a0a      	ldr	r2, [pc, #40]	@ (800436c <SysTick_Config+0x40>)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	3b01      	subs	r3, #1
 8004348:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800434a:	210f      	movs	r1, #15
 800434c:	f04f 30ff 	mov.w	r0, #4294967295
 8004350:	f7ff ff8e 	bl	8004270 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <SysTick_Config+0x40>)
 8004356:	2200      	movs	r2, #0
 8004358:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800435a:	4b04      	ldr	r3, [pc, #16]	@ (800436c <SysTick_Config+0x40>)
 800435c:	2207      	movs	r2, #7
 800435e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3708      	adds	r7, #8
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	e000e010 	.word	0xe000e010

08004370 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b082      	sub	sp, #8
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004378:	6878      	ldr	r0, [r7, #4]
 800437a:	f7ff ff29 	bl	80041d0 <__NVIC_SetPriorityGrouping>
}
 800437e:	bf00      	nop
 8004380:	3708      	adds	r7, #8
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	4603      	mov	r3, r0
 800438e:	60b9      	str	r1, [r7, #8]
 8004390:	607a      	str	r2, [r7, #4]
 8004392:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004394:	2300      	movs	r3, #0
 8004396:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004398:	f7ff ff3e 	bl	8004218 <__NVIC_GetPriorityGrouping>
 800439c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800439e:	687a      	ldr	r2, [r7, #4]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	6978      	ldr	r0, [r7, #20]
 80043a4:	f7ff ff8e 	bl	80042c4 <NVIC_EncodePriority>
 80043a8:	4602      	mov	r2, r0
 80043aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043ae:	4611      	mov	r1, r2
 80043b0:	4618      	mov	r0, r3
 80043b2:	f7ff ff5d 	bl	8004270 <__NVIC_SetPriority>
}
 80043b6:	bf00      	nop
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}

080043be <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043be:	b580      	push	{r7, lr}
 80043c0:	b082      	sub	sp, #8
 80043c2:	af00      	add	r7, sp, #0
 80043c4:	4603      	mov	r3, r0
 80043c6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff31 	bl	8004234 <__NVIC_EnableIRQ>
}
 80043d2:	bf00      	nop
 80043d4:	3708      	adds	r7, #8
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043da:	b580      	push	{r7, lr}
 80043dc:	b082      	sub	sp, #8
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043e2:	6878      	ldr	r0, [r7, #4]
 80043e4:	f7ff ffa2 	bl	800432c <SysTick_Config>
 80043e8:	4603      	mov	r3, r0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3708      	adds	r7, #8
 80043ee:	46bd      	mov	sp, r7
 80043f0:	bd80      	pop	{r7, pc}
	...

080043f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80043f4:	b480      	push	{r7}
 80043f6:	b089      	sub	sp, #36	@ 0x24
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
 80043fc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80043fe:	2300      	movs	r3, #0
 8004400:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004402:	2300      	movs	r3, #0
 8004404:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004406:	2300      	movs	r3, #0
 8004408:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800440a:	2300      	movs	r3, #0
 800440c:	61fb      	str	r3, [r7, #28]
 800440e:	e16b      	b.n	80046e8 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004410:	2201      	movs	r2, #1
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	fa02 f303 	lsl.w	r3, r2, r3
 8004418:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800441a:	683b      	ldr	r3, [r7, #0]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	697a      	ldr	r2, [r7, #20]
 8004420:	4013      	ands	r3, r2
 8004422:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004424:	693a      	ldr	r2, [r7, #16]
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	429a      	cmp	r2, r3
 800442a:	f040 815a 	bne.w	80046e2 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 0303 	and.w	r3, r3, #3
 8004436:	2b01      	cmp	r3, #1
 8004438:	d005      	beq.n	8004446 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800443a:	683b      	ldr	r3, [r7, #0]
 800443c:	685b      	ldr	r3, [r3, #4]
 800443e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004442:	2b02      	cmp	r3, #2
 8004444:	d130      	bne.n	80044a8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	2203      	movs	r2, #3
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	43db      	mvns	r3, r3
 8004458:	69ba      	ldr	r2, [r7, #24]
 800445a:	4013      	ands	r3, r2
 800445c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800445e:	683b      	ldr	r3, [r7, #0]
 8004460:	68da      	ldr	r2, [r3, #12]
 8004462:	69fb      	ldr	r3, [r7, #28]
 8004464:	005b      	lsls	r3, r3, #1
 8004466:	fa02 f303 	lsl.w	r3, r2, r3
 800446a:	69ba      	ldr	r2, [r7, #24]
 800446c:	4313      	orrs	r3, r2
 800446e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	685b      	ldr	r3, [r3, #4]
 800447a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800447c:	2201      	movs	r2, #1
 800447e:	69fb      	ldr	r3, [r7, #28]
 8004480:	fa02 f303 	lsl.w	r3, r2, r3
 8004484:	43db      	mvns	r3, r3
 8004486:	69ba      	ldr	r2, [r7, #24]
 8004488:	4013      	ands	r3, r2
 800448a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	091b      	lsrs	r3, r3, #4
 8004492:	f003 0201 	and.w	r2, r3, #1
 8004496:	69fb      	ldr	r3, [r7, #28]
 8004498:	fa02 f303 	lsl.w	r3, r2, r3
 800449c:	69ba      	ldr	r2, [r7, #24]
 800449e:	4313      	orrs	r3, r2
 80044a0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	69ba      	ldr	r2, [r7, #24]
 80044a6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f003 0303 	and.w	r3, r3, #3
 80044b0:	2b03      	cmp	r3, #3
 80044b2:	d017      	beq.n	80044e4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	68db      	ldr	r3, [r3, #12]
 80044b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80044ba:	69fb      	ldr	r3, [r7, #28]
 80044bc:	005b      	lsls	r3, r3, #1
 80044be:	2203      	movs	r2, #3
 80044c0:	fa02 f303 	lsl.w	r3, r2, r3
 80044c4:	43db      	mvns	r3, r3
 80044c6:	69ba      	ldr	r2, [r7, #24]
 80044c8:	4013      	ands	r3, r2
 80044ca:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80044cc:	683b      	ldr	r3, [r7, #0]
 80044ce:	689a      	ldr	r2, [r3, #8]
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	005b      	lsls	r3, r3, #1
 80044d4:	fa02 f303 	lsl.w	r3, r2, r3
 80044d8:	69ba      	ldr	r2, [r7, #24]
 80044da:	4313      	orrs	r3, r2
 80044dc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	69ba      	ldr	r2, [r7, #24]
 80044e2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	685b      	ldr	r3, [r3, #4]
 80044e8:	f003 0303 	and.w	r3, r3, #3
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d123      	bne.n	8004538 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	08da      	lsrs	r2, r3, #3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	3208      	adds	r2, #8
 80044f8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80044fc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80044fe:	69fb      	ldr	r3, [r7, #28]
 8004500:	f003 0307 	and.w	r3, r3, #7
 8004504:	009b      	lsls	r3, r3, #2
 8004506:	220f      	movs	r2, #15
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	43db      	mvns	r3, r3
 800450e:	69ba      	ldr	r2, [r7, #24]
 8004510:	4013      	ands	r3, r2
 8004512:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	691a      	ldr	r2, [r3, #16]
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	f003 0307 	and.w	r3, r3, #7
 800451e:	009b      	lsls	r3, r3, #2
 8004520:	fa02 f303 	lsl.w	r3, r2, r3
 8004524:	69ba      	ldr	r2, [r7, #24]
 8004526:	4313      	orrs	r3, r2
 8004528:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	08da      	lsrs	r2, r3, #3
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	3208      	adds	r2, #8
 8004532:	69b9      	ldr	r1, [r7, #24]
 8004534:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800453e:	69fb      	ldr	r3, [r7, #28]
 8004540:	005b      	lsls	r3, r3, #1
 8004542:	2203      	movs	r2, #3
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	43db      	mvns	r3, r3
 800454a:	69ba      	ldr	r2, [r7, #24]
 800454c:	4013      	ands	r3, r2
 800454e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004550:	683b      	ldr	r3, [r7, #0]
 8004552:	685b      	ldr	r3, [r3, #4]
 8004554:	f003 0203 	and.w	r2, r3, #3
 8004558:	69fb      	ldr	r3, [r7, #28]
 800455a:	005b      	lsls	r3, r3, #1
 800455c:	fa02 f303 	lsl.w	r3, r2, r3
 8004560:	69ba      	ldr	r2, [r7, #24]
 8004562:	4313      	orrs	r3, r2
 8004564:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	69ba      	ldr	r2, [r7, #24]
 800456a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800456c:	683b      	ldr	r3, [r7, #0]
 800456e:	685b      	ldr	r3, [r3, #4]
 8004570:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004574:	2b00      	cmp	r3, #0
 8004576:	f000 80b4 	beq.w	80046e2 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800457a:	2300      	movs	r3, #0
 800457c:	60fb      	str	r3, [r7, #12]
 800457e:	4b60      	ldr	r3, [pc, #384]	@ (8004700 <HAL_GPIO_Init+0x30c>)
 8004580:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004582:	4a5f      	ldr	r2, [pc, #380]	@ (8004700 <HAL_GPIO_Init+0x30c>)
 8004584:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004588:	6453      	str	r3, [r2, #68]	@ 0x44
 800458a:	4b5d      	ldr	r3, [pc, #372]	@ (8004700 <HAL_GPIO_Init+0x30c>)
 800458c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800458e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004592:	60fb      	str	r3, [r7, #12]
 8004594:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004596:	4a5b      	ldr	r2, [pc, #364]	@ (8004704 <HAL_GPIO_Init+0x310>)
 8004598:	69fb      	ldr	r3, [r7, #28]
 800459a:	089b      	lsrs	r3, r3, #2
 800459c:	3302      	adds	r3, #2
 800459e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80045a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	f003 0303 	and.w	r3, r3, #3
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	220f      	movs	r2, #15
 80045ae:	fa02 f303 	lsl.w	r3, r2, r3
 80045b2:	43db      	mvns	r3, r3
 80045b4:	69ba      	ldr	r2, [r7, #24]
 80045b6:	4013      	ands	r3, r2
 80045b8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a52      	ldr	r2, [pc, #328]	@ (8004708 <HAL_GPIO_Init+0x314>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d02b      	beq.n	800461a <HAL_GPIO_Init+0x226>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a51      	ldr	r2, [pc, #324]	@ (800470c <HAL_GPIO_Init+0x318>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d025      	beq.n	8004616 <HAL_GPIO_Init+0x222>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a50      	ldr	r2, [pc, #320]	@ (8004710 <HAL_GPIO_Init+0x31c>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d01f      	beq.n	8004612 <HAL_GPIO_Init+0x21e>
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	4a4f      	ldr	r2, [pc, #316]	@ (8004714 <HAL_GPIO_Init+0x320>)
 80045d6:	4293      	cmp	r3, r2
 80045d8:	d019      	beq.n	800460e <HAL_GPIO_Init+0x21a>
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	4a4e      	ldr	r2, [pc, #312]	@ (8004718 <HAL_GPIO_Init+0x324>)
 80045de:	4293      	cmp	r3, r2
 80045e0:	d013      	beq.n	800460a <HAL_GPIO_Init+0x216>
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a4d      	ldr	r2, [pc, #308]	@ (800471c <HAL_GPIO_Init+0x328>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d00d      	beq.n	8004606 <HAL_GPIO_Init+0x212>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	4a4c      	ldr	r2, [pc, #304]	@ (8004720 <HAL_GPIO_Init+0x32c>)
 80045ee:	4293      	cmp	r3, r2
 80045f0:	d007      	beq.n	8004602 <HAL_GPIO_Init+0x20e>
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	4a4b      	ldr	r2, [pc, #300]	@ (8004724 <HAL_GPIO_Init+0x330>)
 80045f6:	4293      	cmp	r3, r2
 80045f8:	d101      	bne.n	80045fe <HAL_GPIO_Init+0x20a>
 80045fa:	2307      	movs	r3, #7
 80045fc:	e00e      	b.n	800461c <HAL_GPIO_Init+0x228>
 80045fe:	2308      	movs	r3, #8
 8004600:	e00c      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004602:	2306      	movs	r3, #6
 8004604:	e00a      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004606:	2305      	movs	r3, #5
 8004608:	e008      	b.n	800461c <HAL_GPIO_Init+0x228>
 800460a:	2304      	movs	r3, #4
 800460c:	e006      	b.n	800461c <HAL_GPIO_Init+0x228>
 800460e:	2303      	movs	r3, #3
 8004610:	e004      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004612:	2302      	movs	r3, #2
 8004614:	e002      	b.n	800461c <HAL_GPIO_Init+0x228>
 8004616:	2301      	movs	r3, #1
 8004618:	e000      	b.n	800461c <HAL_GPIO_Init+0x228>
 800461a:	2300      	movs	r3, #0
 800461c:	69fa      	ldr	r2, [r7, #28]
 800461e:	f002 0203 	and.w	r2, r2, #3
 8004622:	0092      	lsls	r2, r2, #2
 8004624:	4093      	lsls	r3, r2
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	4313      	orrs	r3, r2
 800462a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800462c:	4935      	ldr	r1, [pc, #212]	@ (8004704 <HAL_GPIO_Init+0x310>)
 800462e:	69fb      	ldr	r3, [r7, #28]
 8004630:	089b      	lsrs	r3, r3, #2
 8004632:	3302      	adds	r3, #2
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800463a:	4b3b      	ldr	r3, [pc, #236]	@ (8004728 <HAL_GPIO_Init+0x334>)
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004640:	693b      	ldr	r3, [r7, #16]
 8004642:	43db      	mvns	r3, r3
 8004644:	69ba      	ldr	r2, [r7, #24]
 8004646:	4013      	ands	r3, r2
 8004648:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	693b      	ldr	r3, [r7, #16]
 800465a:	4313      	orrs	r3, r2
 800465c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800465e:	4a32      	ldr	r2, [pc, #200]	@ (8004728 <HAL_GPIO_Init+0x334>)
 8004660:	69bb      	ldr	r3, [r7, #24]
 8004662:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004664:	4b30      	ldr	r3, [pc, #192]	@ (8004728 <HAL_GPIO_Init+0x334>)
 8004666:	68db      	ldr	r3, [r3, #12]
 8004668:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	43db      	mvns	r3, r3
 800466e:	69ba      	ldr	r2, [r7, #24]
 8004670:	4013      	ands	r3, r2
 8004672:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800467c:	2b00      	cmp	r3, #0
 800467e:	d003      	beq.n	8004688 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004680:	69ba      	ldr	r2, [r7, #24]
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004688:	4a27      	ldr	r2, [pc, #156]	@ (8004728 <HAL_GPIO_Init+0x334>)
 800468a:	69bb      	ldr	r3, [r7, #24]
 800468c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800468e:	4b26      	ldr	r3, [pc, #152]	@ (8004728 <HAL_GPIO_Init+0x334>)
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	43db      	mvns	r3, r3
 8004698:	69ba      	ldr	r2, [r7, #24]
 800469a:	4013      	ands	r3, r2
 800469c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800469e:	683b      	ldr	r3, [r7, #0]
 80046a0:	685b      	ldr	r3, [r3, #4]
 80046a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d003      	beq.n	80046b2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80046aa:	69ba      	ldr	r2, [r7, #24]
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80046b2:	4a1d      	ldr	r2, [pc, #116]	@ (8004728 <HAL_GPIO_Init+0x334>)
 80046b4:	69bb      	ldr	r3, [r7, #24]
 80046b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046b8:	4b1b      	ldr	r3, [pc, #108]	@ (8004728 <HAL_GPIO_Init+0x334>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046be:	693b      	ldr	r3, [r7, #16]
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d003      	beq.n	80046dc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80046d4:	69ba      	ldr	r2, [r7, #24]
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	4313      	orrs	r3, r2
 80046da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80046dc:	4a12      	ldr	r2, [pc, #72]	@ (8004728 <HAL_GPIO_Init+0x334>)
 80046de:	69bb      	ldr	r3, [r7, #24]
 80046e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046e2:	69fb      	ldr	r3, [r7, #28]
 80046e4:	3301      	adds	r3, #1
 80046e6:	61fb      	str	r3, [r7, #28]
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	2b0f      	cmp	r3, #15
 80046ec:	f67f ae90 	bls.w	8004410 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	3724      	adds	r7, #36	@ 0x24
 80046f6:	46bd      	mov	sp, r7
 80046f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fc:	4770      	bx	lr
 80046fe:	bf00      	nop
 8004700:	40023800 	.word	0x40023800
 8004704:	40013800 	.word	0x40013800
 8004708:	40020000 	.word	0x40020000
 800470c:	40020400 	.word	0x40020400
 8004710:	40020800 	.word	0x40020800
 8004714:	40020c00 	.word	0x40020c00
 8004718:	40021000 	.word	0x40021000
 800471c:	40021400 	.word	0x40021400
 8004720:	40021800 	.word	0x40021800
 8004724:	40021c00 	.word	0x40021c00
 8004728:	40013c00 	.word	0x40013c00

0800472c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	691a      	ldr	r2, [r3, #16]
 800473c:	887b      	ldrh	r3, [r7, #2]
 800473e:	4013      	ands	r3, r2
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004744:	2301      	movs	r3, #1
 8004746:	73fb      	strb	r3, [r7, #15]
 8004748:	e001      	b.n	800474e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800474a:	2300      	movs	r3, #0
 800474c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800474e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004750:	4618      	mov	r0, r3
 8004752:	3714      	adds	r7, #20
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr

0800475c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
 8004768:	4613      	mov	r3, r2
 800476a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800476c:	787b      	ldrb	r3, [r7, #1]
 800476e:	2b00      	cmp	r3, #0
 8004770:	d003      	beq.n	800477a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004772:	887a      	ldrh	r2, [r7, #2]
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004778:	e003      	b.n	8004782 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800477a:	887b      	ldrh	r3, [r7, #2]
 800477c:	041a      	lsls	r2, r3, #16
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	619a      	str	r2, [r3, #24]
}
 8004782:	bf00      	nop
 8004784:	370c      	adds	r7, #12
 8004786:	46bd      	mov	sp, r7
 8004788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478c:	4770      	bx	lr
	...

08004790 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b084      	sub	sp, #16
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d101      	bne.n	80047a2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800479e:	2301      	movs	r3, #1
 80047a0:	e12b      	b.n	80049fa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d106      	bne.n	80047bc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	2200      	movs	r2, #0
 80047b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80047b6:	6878      	ldr	r0, [r7, #4]
 80047b8:	f7ff f98a 	bl	8003ad0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	2224      	movs	r2, #36	@ 0x24
 80047c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	681a      	ldr	r2, [r3, #0]
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	f022 0201 	bic.w	r2, r2, #1
 80047d2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	681a      	ldr	r2, [r3, #0]
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80047e2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80047f2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80047f4:	f002 f9ce 	bl	8006b94 <HAL_RCC_GetPCLK1Freq>
 80047f8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	685b      	ldr	r3, [r3, #4]
 80047fe:	4a81      	ldr	r2, [pc, #516]	@ (8004a04 <HAL_I2C_Init+0x274>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d807      	bhi.n	8004814 <HAL_I2C_Init+0x84>
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	4a80      	ldr	r2, [pc, #512]	@ (8004a08 <HAL_I2C_Init+0x278>)
 8004808:	4293      	cmp	r3, r2
 800480a:	bf94      	ite	ls
 800480c:	2301      	movls	r3, #1
 800480e:	2300      	movhi	r3, #0
 8004810:	b2db      	uxtb	r3, r3
 8004812:	e006      	b.n	8004822 <HAL_I2C_Init+0x92>
 8004814:	68fb      	ldr	r3, [r7, #12]
 8004816:	4a7d      	ldr	r2, [pc, #500]	@ (8004a0c <HAL_I2C_Init+0x27c>)
 8004818:	4293      	cmp	r3, r2
 800481a:	bf94      	ite	ls
 800481c:	2301      	movls	r3, #1
 800481e:	2300      	movhi	r3, #0
 8004820:	b2db      	uxtb	r3, r3
 8004822:	2b00      	cmp	r3, #0
 8004824:	d001      	beq.n	800482a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e0e7      	b.n	80049fa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a78      	ldr	r2, [pc, #480]	@ (8004a10 <HAL_I2C_Init+0x280>)
 800482e:	fba2 2303 	umull	r2, r3, r2, r3
 8004832:	0c9b      	lsrs	r3, r3, #18
 8004834:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	685b      	ldr	r3, [r3, #4]
 800483c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	68ba      	ldr	r2, [r7, #8]
 8004846:	430a      	orrs	r2, r1
 8004848:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	6a1b      	ldr	r3, [r3, #32]
 8004850:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	4a6a      	ldr	r2, [pc, #424]	@ (8004a04 <HAL_I2C_Init+0x274>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d802      	bhi.n	8004864 <HAL_I2C_Init+0xd4>
 800485e:	68bb      	ldr	r3, [r7, #8]
 8004860:	3301      	adds	r3, #1
 8004862:	e009      	b.n	8004878 <HAL_I2C_Init+0xe8>
 8004864:	68bb      	ldr	r3, [r7, #8]
 8004866:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800486a:	fb02 f303 	mul.w	r3, r2, r3
 800486e:	4a69      	ldr	r2, [pc, #420]	@ (8004a14 <HAL_I2C_Init+0x284>)
 8004870:	fba2 2303 	umull	r2, r3, r2, r3
 8004874:	099b      	lsrs	r3, r3, #6
 8004876:	3301      	adds	r3, #1
 8004878:	687a      	ldr	r2, [r7, #4]
 800487a:	6812      	ldr	r2, [r2, #0]
 800487c:	430b      	orrs	r3, r1
 800487e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	69db      	ldr	r3, [r3, #28]
 8004886:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800488a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	685b      	ldr	r3, [r3, #4]
 8004892:	495c      	ldr	r1, [pc, #368]	@ (8004a04 <HAL_I2C_Init+0x274>)
 8004894:	428b      	cmp	r3, r1
 8004896:	d819      	bhi.n	80048cc <HAL_I2C_Init+0x13c>
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	1e59      	subs	r1, r3, #1
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	685b      	ldr	r3, [r3, #4]
 80048a0:	005b      	lsls	r3, r3, #1
 80048a2:	fbb1 f3f3 	udiv	r3, r1, r3
 80048a6:	1c59      	adds	r1, r3, #1
 80048a8:	f640 73fc 	movw	r3, #4092	@ 0xffc
 80048ac:	400b      	ands	r3, r1
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <HAL_I2C_Init+0x138>
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	1e59      	subs	r1, r3, #1
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
 80048ba:	005b      	lsls	r3, r3, #1
 80048bc:	fbb1 f3f3 	udiv	r3, r1, r3
 80048c0:	3301      	adds	r3, #1
 80048c2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048c6:	e051      	b.n	800496c <HAL_I2C_Init+0x1dc>
 80048c8:	2304      	movs	r3, #4
 80048ca:	e04f      	b.n	800496c <HAL_I2C_Init+0x1dc>
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	689b      	ldr	r3, [r3, #8]
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d111      	bne.n	80048f8 <HAL_I2C_Init+0x168>
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	1e58      	subs	r0, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6859      	ldr	r1, [r3, #4]
 80048dc:	460b      	mov	r3, r1
 80048de:	005b      	lsls	r3, r3, #1
 80048e0:	440b      	add	r3, r1
 80048e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80048e6:	3301      	adds	r3, #1
 80048e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	bf0c      	ite	eq
 80048f0:	2301      	moveq	r3, #1
 80048f2:	2300      	movne	r3, #0
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	e012      	b.n	800491e <HAL_I2C_Init+0x18e>
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	1e58      	subs	r0, r3, #1
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	6859      	ldr	r1, [r3, #4]
 8004900:	460b      	mov	r3, r1
 8004902:	009b      	lsls	r3, r3, #2
 8004904:	440b      	add	r3, r1
 8004906:	0099      	lsls	r1, r3, #2
 8004908:	440b      	add	r3, r1
 800490a:	fbb0 f3f3 	udiv	r3, r0, r3
 800490e:	3301      	adds	r3, #1
 8004910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004914:	2b00      	cmp	r3, #0
 8004916:	bf0c      	ite	eq
 8004918:	2301      	moveq	r3, #1
 800491a:	2300      	movne	r3, #0
 800491c:	b2db      	uxtb	r3, r3
 800491e:	2b00      	cmp	r3, #0
 8004920:	d001      	beq.n	8004926 <HAL_I2C_Init+0x196>
 8004922:	2301      	movs	r3, #1
 8004924:	e022      	b.n	800496c <HAL_I2C_Init+0x1dc>
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d10e      	bne.n	800494c <HAL_I2C_Init+0x1bc>
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	1e58      	subs	r0, r3, #1
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6859      	ldr	r1, [r3, #4]
 8004936:	460b      	mov	r3, r1
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	440b      	add	r3, r1
 800493c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004940:	3301      	adds	r3, #1
 8004942:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004946:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800494a:	e00f      	b.n	800496c <HAL_I2C_Init+0x1dc>
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	1e58      	subs	r0, r3, #1
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	6859      	ldr	r1, [r3, #4]
 8004954:	460b      	mov	r3, r1
 8004956:	009b      	lsls	r3, r3, #2
 8004958:	440b      	add	r3, r1
 800495a:	0099      	lsls	r1, r3, #2
 800495c:	440b      	add	r3, r1
 800495e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004962:	3301      	adds	r3, #1
 8004964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004968:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800496c:	6879      	ldr	r1, [r7, #4]
 800496e:	6809      	ldr	r1, [r1, #0]
 8004970:	4313      	orrs	r3, r2
 8004972:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69da      	ldr	r2, [r3, #28]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	6a1b      	ldr	r3, [r3, #32]
 8004986:	431a      	orrs	r2, r3
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	430a      	orrs	r2, r1
 800498e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	689b      	ldr	r3, [r3, #8]
 8004996:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800499a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800499e:	687a      	ldr	r2, [r7, #4]
 80049a0:	6911      	ldr	r1, [r2, #16]
 80049a2:	687a      	ldr	r2, [r7, #4]
 80049a4:	68d2      	ldr	r2, [r2, #12]
 80049a6:	4311      	orrs	r1, r2
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	6812      	ldr	r2, [r2, #0]
 80049ac:	430b      	orrs	r3, r1
 80049ae:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68db      	ldr	r3, [r3, #12]
 80049b6:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	695a      	ldr	r2, [r3, #20]
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	699b      	ldr	r3, [r3, #24]
 80049c2:	431a      	orrs	r2, r3
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	430a      	orrs	r2, r1
 80049ca:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f042 0201 	orr.w	r2, r2, #1
 80049da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2200      	movs	r2, #0
 80049e0:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2200      	movs	r2, #0
 80049f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80049f8:	2300      	movs	r3, #0
}
 80049fa:	4618      	mov	r0, r3
 80049fc:	3710      	adds	r7, #16
 80049fe:	46bd      	mov	sp, r7
 8004a00:	bd80      	pop	{r7, pc}
 8004a02:	bf00      	nop
 8004a04:	000186a0 	.word	0x000186a0
 8004a08:	001e847f 	.word	0x001e847f
 8004a0c:	003d08ff 	.word	0x003d08ff
 8004a10:	431bde83 	.word	0x431bde83
 8004a14:	10624dd3 	.word	0x10624dd3

08004a18 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b088      	sub	sp, #32
 8004a1c:	af02      	add	r7, sp, #8
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	607a      	str	r2, [r7, #4]
 8004a22:	461a      	mov	r2, r3
 8004a24:	460b      	mov	r3, r1
 8004a26:	817b      	strh	r3, [r7, #10]
 8004a28:	4613      	mov	r3, r2
 8004a2a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004a2c:	f7ff fba0 	bl	8004170 <HAL_GetTick>
 8004a30:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004a32:	68fb      	ldr	r3, [r7, #12]
 8004a34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004a38:	b2db      	uxtb	r3, r3
 8004a3a:	2b20      	cmp	r3, #32
 8004a3c:	f040 80e0 	bne.w	8004c00 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	9300      	str	r3, [sp, #0]
 8004a44:	2319      	movs	r3, #25
 8004a46:	2201      	movs	r2, #1
 8004a48:	4970      	ldr	r1, [pc, #448]	@ (8004c0c <HAL_I2C_Master_Transmit+0x1f4>)
 8004a4a:	68f8      	ldr	r0, [r7, #12]
 8004a4c:	f001 fa3c 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8004a56:	2302      	movs	r3, #2
 8004a58:	e0d3      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_I2C_Master_Transmit+0x50>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e0cc      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d007      	beq.n	8004a8e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f042 0201 	orr.w	r2, r2, #1
 8004a8c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004a9c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	2221      	movs	r2, #33	@ 0x21
 8004aa2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	2210      	movs	r2, #16
 8004aaa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	687a      	ldr	r2, [r7, #4]
 8004ab8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	893a      	ldrh	r2, [r7, #8]
 8004abe:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ac4:	b29a      	uxth	r2, r3
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	4a50      	ldr	r2, [pc, #320]	@ (8004c10 <HAL_I2C_Master_Transmit+0x1f8>)
 8004ace:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	6a3a      	ldr	r2, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 ff28 	bl	800592c <I2C_MasterRequestWrite>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d001      	beq.n	8004ae6 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e08d      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	695b      	ldr	r3, [r3, #20]
 8004af0:	613b      	str	r3, [r7, #16]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	699b      	ldr	r3, [r3, #24]
 8004af8:	613b      	str	r3, [r7, #16]
 8004afa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8004afc:	e066      	b.n	8004bcc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004afe:	697a      	ldr	r2, [r7, #20]
 8004b00:	6a39      	ldr	r1, [r7, #32]
 8004b02:	68f8      	ldr	r0, [r7, #12]
 8004b04:	f001 fafa 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8004b08:	4603      	mov	r3, r0
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d00d      	beq.n	8004b2a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b12:	2b04      	cmp	r3, #4
 8004b14:	d107      	bne.n	8004b26 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681a      	ldr	r2, [r3, #0]
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004b24:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004b26:	2301      	movs	r3, #1
 8004b28:	e06b      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b2e:	781a      	ldrb	r2, [r3, #0]
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b3a:	1c5a      	adds	r2, r3, #1
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b44:	b29b      	uxth	r3, r3
 8004b46:	3b01      	subs	r3, #1
 8004b48:	b29a      	uxth	r2, r3
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8004b4e:	68fb      	ldr	r3, [r7, #12]
 8004b50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b52:	3b01      	subs	r3, #1
 8004b54:	b29a      	uxth	r2, r3
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	695b      	ldr	r3, [r3, #20]
 8004b60:	f003 0304 	and.w	r3, r3, #4
 8004b64:	2b04      	cmp	r3, #4
 8004b66:	d11b      	bne.n	8004ba0 <HAL_I2C_Master_Transmit+0x188>
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d017      	beq.n	8004ba0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b74:	781a      	ldrb	r2, [r3, #0]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	681b      	ldr	r3, [r3, #0]
 8004b7a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b80:	1c5a      	adds	r2, r3, #1
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b8a:	b29b      	uxth	r3, r3
 8004b8c:	3b01      	subs	r3, #1
 8004b8e:	b29a      	uxth	r2, r3
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004b98:	3b01      	subs	r3, #1
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ba0:	697a      	ldr	r2, [r7, #20]
 8004ba2:	6a39      	ldr	r1, [r7, #32]
 8004ba4:	68f8      	ldr	r0, [r7, #12]
 8004ba6:	f001 faf1 	bl	800618c <I2C_WaitOnBTFFlagUntilTimeout>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d00d      	beq.n	8004bcc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bb4:	2b04      	cmp	r3, #4
 8004bb6:	d107      	bne.n	8004bc8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	681a      	ldr	r2, [r3, #0]
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bc6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bc8:	2301      	movs	r3, #1
 8004bca:	e01a      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d194      	bne.n	8004afe <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2220      	movs	r2, #32
 8004be8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	2200      	movs	r2, #0
 8004bf8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004bfc:	2300      	movs	r3, #0
 8004bfe:	e000      	b.n	8004c02 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004c00:	2302      	movs	r3, #2
  }
}
 8004c02:	4618      	mov	r0, r3
 8004c04:	3718      	adds	r7, #24
 8004c06:	46bd      	mov	sp, r7
 8004c08:	bd80      	pop	{r7, pc}
 8004c0a:	bf00      	nop
 8004c0c:	00100002 	.word	0x00100002
 8004c10:	ffff0000 	.word	0xffff0000

08004c14 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b08c      	sub	sp, #48	@ 0x30
 8004c18:	af02      	add	r7, sp, #8
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	607a      	str	r2, [r7, #4]
 8004c1e:	461a      	mov	r2, r3
 8004c20:	460b      	mov	r3, r1
 8004c22:	817b      	strh	r3, [r7, #10]
 8004c24:	4613      	mov	r3, r2
 8004c26:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c28:	f7ff faa2 	bl	8004170 <HAL_GetTick>
 8004c2c:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c34:	b2db      	uxtb	r3, r3
 8004c36:	2b20      	cmp	r3, #32
 8004c38:	f040 8217 	bne.w	800506a <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2319      	movs	r3, #25
 8004c42:	2201      	movs	r2, #1
 8004c44:	497c      	ldr	r1, [pc, #496]	@ (8004e38 <HAL_I2C_Master_Receive+0x224>)
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f001 f93e 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004c52:	2302      	movs	r3, #2
 8004c54:	e20a      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c5c:	2b01      	cmp	r3, #1
 8004c5e:	d101      	bne.n	8004c64 <HAL_I2C_Master_Receive+0x50>
 8004c60:	2302      	movs	r3, #2
 8004c62:	e203      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f003 0301 	and.w	r3, r3, #1
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d007      	beq.n	8004c8a <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c7a:	68fb      	ldr	r3, [r7, #12]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	681a      	ldr	r2, [r3, #0]
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	f042 0201 	orr.w	r2, r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681a      	ldr	r2, [r3, #0]
 8004c90:	68fb      	ldr	r3, [r7, #12]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004c98:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2222      	movs	r2, #34	@ 0x22
 8004c9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2210      	movs	r2, #16
 8004ca6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	2200      	movs	r2, #0
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	687a      	ldr	r2, [r7, #4]
 8004cb4:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	893a      	ldrh	r2, [r7, #8]
 8004cba:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cc0:	b29a      	uxth	r2, r3
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	4a5c      	ldr	r2, [pc, #368]	@ (8004e3c <HAL_I2C_Master_Receive+0x228>)
 8004cca:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004ccc:	8979      	ldrh	r1, [r7, #10]
 8004cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004cd2:	68f8      	ldr	r0, [r7, #12]
 8004cd4:	f000 feac 	bl	8005a30 <I2C_MasterRequestRead>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d001      	beq.n	8004ce2 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004cde:	2301      	movs	r3, #1
 8004ce0:	e1c4      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d113      	bne.n	8004d12 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cea:	2300      	movs	r3, #0
 8004cec:	623b      	str	r3, [r7, #32]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	695b      	ldr	r3, [r3, #20]
 8004cf4:	623b      	str	r3, [r7, #32]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	699b      	ldr	r3, [r3, #24]
 8004cfc:	623b      	str	r3, [r7, #32]
 8004cfe:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	e198      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d16:	2b01      	cmp	r3, #1
 8004d18:	d11b      	bne.n	8004d52 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	681a      	ldr	r2, [r3, #0]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d28:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	61fb      	str	r3, [r7, #28]
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	695b      	ldr	r3, [r3, #20]
 8004d34:	61fb      	str	r3, [r7, #28]
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	699b      	ldr	r3, [r3, #24]
 8004d3c:	61fb      	str	r3, [r7, #28]
 8004d3e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	681a      	ldr	r2, [r3, #0]
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d4e:	601a      	str	r2, [r3, #0]
 8004d50:	e178      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d56:	2b02      	cmp	r3, #2
 8004d58:	d11b      	bne.n	8004d92 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	681a      	ldr	r2, [r3, #0]
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004d68:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681a      	ldr	r2, [r3, #0]
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004d78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004d7a:	2300      	movs	r3, #0
 8004d7c:	61bb      	str	r3, [r7, #24]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	699b      	ldr	r3, [r3, #24]
 8004d8c:	61bb      	str	r3, [r7, #24]
 8004d8e:	69bb      	ldr	r3, [r7, #24]
 8004d90:	e158      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004da0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004da2:	2300      	movs	r3, #0
 8004da4:	617b      	str	r3, [r7, #20]
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	695b      	ldr	r3, [r3, #20]
 8004dac:	617b      	str	r3, [r7, #20]
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	699b      	ldr	r3, [r3, #24]
 8004db4:	617b      	str	r3, [r7, #20]
 8004db6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004db8:	e144      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbe:	2b03      	cmp	r3, #3
 8004dc0:	f200 80f1 	bhi.w	8004fa6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dc8:	2b01      	cmp	r3, #1
 8004dca:	d123      	bne.n	8004e14 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004dcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004dce:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004dd0:	68f8      	ldr	r0, [r7, #12]
 8004dd2:	f001 fa23 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d001      	beq.n	8004de0 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e145      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	691a      	ldr	r2, [r3, #16]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dea:	b2d2      	uxtb	r2, r2
 8004dec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004df2:	1c5a      	adds	r2, r3, #1
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b29a      	uxth	r2, r3
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	b29a      	uxth	r2, r3
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004e12:	e117      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e18:	2b02      	cmp	r3, #2
 8004e1a:	d14e      	bne.n	8004eba <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004e1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e1e:	9300      	str	r3, [sp, #0]
 8004e20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e22:	2200      	movs	r2, #0
 8004e24:	4906      	ldr	r1, [pc, #24]	@ (8004e40 <HAL_I2C_Master_Receive+0x22c>)
 8004e26:	68f8      	ldr	r0, [r7, #12]
 8004e28:	f001 f84e 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d008      	beq.n	8004e44 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e11a      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
 8004e36:	bf00      	nop
 8004e38:	00100002 	.word	0x00100002
 8004e3c:	ffff0000 	.word	0xffff0000
 8004e40:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e52:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691a      	ldr	r2, [r3, #16]
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5e:	b2d2      	uxtb	r2, r2
 8004e60:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e66:	1c5a      	adds	r2, r3, #1
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e70:	3b01      	subs	r3, #1
 8004e72:	b29a      	uxth	r2, r3
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	3b01      	subs	r3, #1
 8004e80:	b29a      	uxth	r2, r3
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	691a      	ldr	r2, [r3, #16]
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e90:	b2d2      	uxtb	r2, r2
 8004e92:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e98:	1c5a      	adds	r2, r3, #1
 8004e9a:	68fb      	ldr	r3, [r7, #12]
 8004e9c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ea2:	3b01      	subs	r3, #1
 8004ea4:	b29a      	uxth	r2, r3
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004eae:	b29b      	uxth	r3, r3
 8004eb0:	3b01      	subs	r3, #1
 8004eb2:	b29a      	uxth	r2, r3
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004eb8:	e0c4      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004eba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec0:	2200      	movs	r2, #0
 8004ec2:	496c      	ldr	r1, [pc, #432]	@ (8005074 <HAL_I2C_Master_Receive+0x460>)
 8004ec4:	68f8      	ldr	r0, [r7, #12]
 8004ec6:	f000 ffff 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8004eca:	4603      	mov	r3, r0
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d001      	beq.n	8004ed4 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004ed0:	2301      	movs	r3, #1
 8004ed2:	e0cb      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	681a      	ldr	r2, [r3, #0]
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004ee2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	691a      	ldr	r2, [r3, #16]
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eee:	b2d2      	uxtb	r2, r2
 8004ef0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ef6:	1c5a      	adds	r2, r3, #1
 8004ef8:	68fb      	ldr	r3, [r7, #12]
 8004efa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f00:	3b01      	subs	r3, #1
 8004f02:	b29a      	uxth	r2, r3
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f0c:	b29b      	uxth	r3, r3
 8004f0e:	3b01      	subs	r3, #1
 8004f10:	b29a      	uxth	r2, r3
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f18:	9300      	str	r3, [sp, #0]
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	2200      	movs	r2, #0
 8004f1e:	4955      	ldr	r1, [pc, #340]	@ (8005074 <HAL_I2C_Master_Receive+0x460>)
 8004f20:	68f8      	ldr	r0, [r7, #12]
 8004f22:	f000 ffd1 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b00      	cmp	r3, #0
 8004f2a:	d001      	beq.n	8004f30 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004f2c:	2301      	movs	r3, #1
 8004f2e:	e09d      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	691a      	ldr	r2, [r3, #16]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f4a:	b2d2      	uxtb	r2, r2
 8004f4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f52:	1c5a      	adds	r2, r3, #1
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f5c:	3b01      	subs	r3, #1
 8004f5e:	b29a      	uxth	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f68:	b29b      	uxth	r3, r3
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	691a      	ldr	r2, [r3, #16]
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f7c:	b2d2      	uxtb	r2, r2
 8004f7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f84:	1c5a      	adds	r2, r3, #1
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f8a:	68fb      	ldr	r3, [r7, #12]
 8004f8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f8e:	3b01      	subs	r3, #1
 8004f90:	b29a      	uxth	r2, r3
 8004f92:	68fb      	ldr	r3, [r7, #12]
 8004f94:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f9a:	b29b      	uxth	r3, r3
 8004f9c:	3b01      	subs	r3, #1
 8004f9e:	b29a      	uxth	r2, r3
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004fa4:	e04e      	b.n	8005044 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fa6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fa8:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004faa:	68f8      	ldr	r0, [r7, #12]
 8004fac:	f001 f936 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fb0:	4603      	mov	r3, r0
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d001      	beq.n	8004fba <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e058      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc4:	b2d2      	uxtb	r2, r2
 8004fc6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fcc:	1c5a      	adds	r2, r3, #1
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004fde:	68fb      	ldr	r3, [r7, #12]
 8004fe0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fe2:	b29b      	uxth	r3, r3
 8004fe4:	3b01      	subs	r3, #1
 8004fe6:	b29a      	uxth	r2, r3
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	f003 0304 	and.w	r3, r3, #4
 8004ff6:	2b04      	cmp	r3, #4
 8004ff8:	d124      	bne.n	8005044 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ffe:	2b03      	cmp	r3, #3
 8005000:	d107      	bne.n	8005012 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005010:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	691a      	ldr	r2, [r3, #16]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501c:	b2d2      	uxtb	r2, r2
 800501e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005024:	1c5a      	adds	r2, r3, #1
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800502a:	68fb      	ldr	r3, [r7, #12]
 800502c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800502e:	3b01      	subs	r3, #1
 8005030:	b29a      	uxth	r2, r3
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800503a:	b29b      	uxth	r3, r3
 800503c:	3b01      	subs	r3, #1
 800503e:	b29a      	uxth	r2, r3
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	f47f aeb6 	bne.w	8004dba <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2220      	movs	r2, #32
 8005052:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	2200      	movs	r2, #0
 800505a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	2200      	movs	r2, #0
 8005062:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005066:	2300      	movs	r3, #0
 8005068:	e000      	b.n	800506c <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800506a:	2302      	movs	r3, #2
  }
}
 800506c:	4618      	mov	r0, r3
 800506e:	3728      	adds	r7, #40	@ 0x28
 8005070:	46bd      	mov	sp, r7
 8005072:	bd80      	pop	{r7, pc}
 8005074:	00010004 	.word	0x00010004

08005078 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b088      	sub	sp, #32
 800507c:	af02      	add	r7, sp, #8
 800507e:	60f8      	str	r0, [r7, #12]
 8005080:	4608      	mov	r0, r1
 8005082:	4611      	mov	r1, r2
 8005084:	461a      	mov	r2, r3
 8005086:	4603      	mov	r3, r0
 8005088:	817b      	strh	r3, [r7, #10]
 800508a:	460b      	mov	r3, r1
 800508c:	813b      	strh	r3, [r7, #8]
 800508e:	4613      	mov	r3, r2
 8005090:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005092:	f7ff f86d 	bl	8004170 <HAL_GetTick>
 8005096:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	2b20      	cmp	r3, #32
 80050a2:	f040 80d9 	bne.w	8005258 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80050a6:	697b      	ldr	r3, [r7, #20]
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	2319      	movs	r3, #25
 80050ac:	2201      	movs	r2, #1
 80050ae:	496d      	ldr	r1, [pc, #436]	@ (8005264 <HAL_I2C_Mem_Write+0x1ec>)
 80050b0:	68f8      	ldr	r0, [r7, #12]
 80050b2:	f000 ff09 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 80050b6:	4603      	mov	r3, r0
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d001      	beq.n	80050c0 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80050bc:	2302      	movs	r3, #2
 80050be:	e0cc      	b.n	800525a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80050c6:	2b01      	cmp	r3, #1
 80050c8:	d101      	bne.n	80050ce <HAL_I2C_Mem_Write+0x56>
 80050ca:	2302      	movs	r3, #2
 80050cc:	e0c5      	b.n	800525a <HAL_I2C_Mem_Write+0x1e2>
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f003 0301 	and.w	r3, r3, #1
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d007      	beq.n	80050f4 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	681a      	ldr	r2, [r3, #0]
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	f042 0201 	orr.w	r2, r2, #1
 80050f2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005102:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	2221      	movs	r2, #33	@ 0x21
 8005108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	2240      	movs	r2, #64	@ 0x40
 8005110:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	2200      	movs	r2, #0
 8005118:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	6a3a      	ldr	r2, [r7, #32]
 800511e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005124:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800512a:	b29a      	uxth	r2, r3
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	4a4d      	ldr	r2, [pc, #308]	@ (8005268 <HAL_I2C_Mem_Write+0x1f0>)
 8005134:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005136:	88f8      	ldrh	r0, [r7, #6]
 8005138:	893a      	ldrh	r2, [r7, #8]
 800513a:	8979      	ldrh	r1, [r7, #10]
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	9301      	str	r3, [sp, #4]
 8005140:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005142:	9300      	str	r3, [sp, #0]
 8005144:	4603      	mov	r3, r0
 8005146:	68f8      	ldr	r0, [r7, #12]
 8005148:	f000 fd40 	bl	8005bcc <I2C_RequestMemoryWrite>
 800514c:	4603      	mov	r3, r0
 800514e:	2b00      	cmp	r3, #0
 8005150:	d052      	beq.n	80051f8 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005152:	2301      	movs	r3, #1
 8005154:	e081      	b.n	800525a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800515a:	68f8      	ldr	r0, [r7, #12]
 800515c:	f000 ffce 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005160:	4603      	mov	r3, r0
 8005162:	2b00      	cmp	r3, #0
 8005164:	d00d      	beq.n	8005182 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800516a:	2b04      	cmp	r3, #4
 800516c:	d107      	bne.n	800517e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800517c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800517e:	2301      	movs	r3, #1
 8005180:	e06b      	b.n	800525a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005186:	781a      	ldrb	r2, [r3, #0]
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005192:	1c5a      	adds	r2, r3, #1
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519c:	3b01      	subs	r3, #1
 800519e:	b29a      	uxth	r2, r3
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a8:	b29b      	uxth	r3, r3
 80051aa:	3b01      	subs	r3, #1
 80051ac:	b29a      	uxth	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	695b      	ldr	r3, [r3, #20]
 80051b8:	f003 0304 	and.w	r3, r3, #4
 80051bc:	2b04      	cmp	r3, #4
 80051be:	d11b      	bne.n	80051f8 <HAL_I2C_Mem_Write+0x180>
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d017      	beq.n	80051f8 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051cc:	781a      	ldrb	r2, [r3, #0]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d1aa      	bne.n	8005156 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005204:	68f8      	ldr	r0, [r7, #12]
 8005206:	f000 ffc1 	bl	800618c <I2C_WaitOnBTFFlagUntilTimeout>
 800520a:	4603      	mov	r3, r0
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00d      	beq.n	800522c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005214:	2b04      	cmp	r3, #4
 8005216:	d107      	bne.n	8005228 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	681a      	ldr	r2, [r3, #0]
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005226:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005228:	2301      	movs	r3, #1
 800522a:	e016      	b.n	800525a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800523a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2220      	movs	r2, #32
 8005240:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	2200      	movs	r2, #0
 8005250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005254:	2300      	movs	r3, #0
 8005256:	e000      	b.n	800525a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005258:	2302      	movs	r3, #2
  }
}
 800525a:	4618      	mov	r0, r3
 800525c:	3718      	adds	r7, #24
 800525e:	46bd      	mov	sp, r7
 8005260:	bd80      	pop	{r7, pc}
 8005262:	bf00      	nop
 8005264:	00100002 	.word	0x00100002
 8005268:	ffff0000 	.word	0xffff0000

0800526c <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b08c      	sub	sp, #48	@ 0x30
 8005270:	af02      	add	r7, sp, #8
 8005272:	60f8      	str	r0, [r7, #12]
 8005274:	4608      	mov	r0, r1
 8005276:	4611      	mov	r1, r2
 8005278:	461a      	mov	r2, r3
 800527a:	4603      	mov	r3, r0
 800527c:	817b      	strh	r3, [r7, #10]
 800527e:	460b      	mov	r3, r1
 8005280:	813b      	strh	r3, [r7, #8]
 8005282:	4613      	mov	r3, r2
 8005284:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005286:	f7fe ff73 	bl	8004170 <HAL_GetTick>
 800528a:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b20      	cmp	r3, #32
 8005296:	f040 8214 	bne.w	80056c2 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800529a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800529c:	9300      	str	r3, [sp, #0]
 800529e:	2319      	movs	r3, #25
 80052a0:	2201      	movs	r2, #1
 80052a2:	497b      	ldr	r1, [pc, #492]	@ (8005490 <HAL_I2C_Mem_Read+0x224>)
 80052a4:	68f8      	ldr	r0, [r7, #12]
 80052a6:	f000 fe0f 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 80052aa:	4603      	mov	r3, r0
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d001      	beq.n	80052b4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80052b0:	2302      	movs	r3, #2
 80052b2:	e207      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80052ba:	2b01      	cmp	r3, #1
 80052bc:	d101      	bne.n	80052c2 <HAL_I2C_Mem_Read+0x56>
 80052be:	2302      	movs	r3, #2
 80052c0:	e200      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	2201      	movs	r2, #1
 80052c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f003 0301 	and.w	r3, r3, #1
 80052d4:	2b01      	cmp	r3, #1
 80052d6:	d007      	beq.n	80052e8 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	681a      	ldr	r2, [r3, #0]
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	f042 0201 	orr.w	r2, r2, #1
 80052e6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	681a      	ldr	r2, [r3, #0]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052f6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	2222      	movs	r2, #34	@ 0x22
 80052fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	2240      	movs	r2, #64	@ 0x40
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2200      	movs	r2, #0
 800530c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005312:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005318:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800531e:	b29a      	uxth	r2, r3
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	4a5b      	ldr	r2, [pc, #364]	@ (8005494 <HAL_I2C_Mem_Read+0x228>)
 8005328:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800532a:	88f8      	ldrh	r0, [r7, #6]
 800532c:	893a      	ldrh	r2, [r7, #8]
 800532e:	8979      	ldrh	r1, [r7, #10]
 8005330:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005332:	9301      	str	r3, [sp, #4]
 8005334:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005336:	9300      	str	r3, [sp, #0]
 8005338:	4603      	mov	r3, r0
 800533a:	68f8      	ldr	r0, [r7, #12]
 800533c:	f000 fcdc 	bl	8005cf8 <I2C_RequestMemoryRead>
 8005340:	4603      	mov	r3, r0
 8005342:	2b00      	cmp	r3, #0
 8005344:	d001      	beq.n	800534a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005346:	2301      	movs	r3, #1
 8005348:	e1bc      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800534e:	2b00      	cmp	r3, #0
 8005350:	d113      	bne.n	800537a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005352:	2300      	movs	r3, #0
 8005354:	623b      	str	r3, [r7, #32]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	695b      	ldr	r3, [r3, #20]
 800535c:	623b      	str	r3, [r7, #32]
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	699b      	ldr	r3, [r3, #24]
 8005364:	623b      	str	r3, [r7, #32]
 8005366:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	681a      	ldr	r2, [r3, #0]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005376:	601a      	str	r2, [r3, #0]
 8005378:	e190      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800537e:	2b01      	cmp	r3, #1
 8005380:	d11b      	bne.n	80053ba <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681a      	ldr	r2, [r3, #0]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005390:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005392:	2300      	movs	r3, #0
 8005394:	61fb      	str	r3, [r7, #28]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	695b      	ldr	r3, [r3, #20]
 800539c:	61fb      	str	r3, [r7, #28]
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	699b      	ldr	r3, [r3, #24]
 80053a4:	61fb      	str	r3, [r7, #28]
 80053a6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	681a      	ldr	r2, [r3, #0]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80053b6:	601a      	str	r2, [r3, #0]
 80053b8:	e170      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053be:	2b02      	cmp	r3, #2
 80053c0:	d11b      	bne.n	80053fa <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	681a      	ldr	r2, [r3, #0]
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053d0:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053e0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053e2:	2300      	movs	r3, #0
 80053e4:	61bb      	str	r3, [r7, #24]
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	695b      	ldr	r3, [r3, #20]
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	699b      	ldr	r3, [r3, #24]
 80053f4:	61bb      	str	r3, [r7, #24]
 80053f6:	69bb      	ldr	r3, [r7, #24]
 80053f8:	e150      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80053fa:	2300      	movs	r3, #0
 80053fc:	617b      	str	r3, [r7, #20]
 80053fe:	68fb      	ldr	r3, [r7, #12]
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	617b      	str	r3, [r7, #20]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	699b      	ldr	r3, [r3, #24]
 800540c:	617b      	str	r3, [r7, #20]
 800540e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005410:	e144      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005416:	2b03      	cmp	r3, #3
 8005418:	f200 80f1 	bhi.w	80055fe <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005420:	2b01      	cmp	r3, #1
 8005422:	d123      	bne.n	800546c <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005424:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005426:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005428:	68f8      	ldr	r0, [r7, #12]
 800542a:	f000 fef7 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 800542e:	4603      	mov	r3, r0
 8005430:	2b00      	cmp	r3, #0
 8005432:	d001      	beq.n	8005438 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005434:	2301      	movs	r3, #1
 8005436:	e145      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	691a      	ldr	r2, [r3, #16]
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005442:	b2d2      	uxtb	r2, r2
 8005444:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800544a:	1c5a      	adds	r2, r3, #1
 800544c:	68fb      	ldr	r3, [r7, #12]
 800544e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005454:	3b01      	subs	r3, #1
 8005456:	b29a      	uxth	r2, r3
 8005458:	68fb      	ldr	r3, [r7, #12]
 800545a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005460:	b29b      	uxth	r3, r3
 8005462:	3b01      	subs	r3, #1
 8005464:	b29a      	uxth	r2, r3
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800546a:	e117      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 800546c:	68fb      	ldr	r3, [r7, #12]
 800546e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005470:	2b02      	cmp	r3, #2
 8005472:	d14e      	bne.n	8005512 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005474:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005476:	9300      	str	r3, [sp, #0]
 8005478:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800547a:	2200      	movs	r2, #0
 800547c:	4906      	ldr	r1, [pc, #24]	@ (8005498 <HAL_I2C_Mem_Read+0x22c>)
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 fd22 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d008      	beq.n	800549c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800548a:	2301      	movs	r3, #1
 800548c:	e11a      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
 800548e:	bf00      	nop
 8005490:	00100002 	.word	0x00100002
 8005494:	ffff0000 	.word	0xffff0000
 8005498:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	681a      	ldr	r2, [r3, #0]
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054aa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	691a      	ldr	r2, [r3, #16]
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054b6:	b2d2      	uxtb	r2, r2
 80054b8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054be:	1c5a      	adds	r2, r3, #1
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054c4:	68fb      	ldr	r3, [r7, #12]
 80054c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054c8:	3b01      	subs	r3, #1
 80054ca:	b29a      	uxth	r2, r3
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80054d4:	b29b      	uxth	r3, r3
 80054d6:	3b01      	subs	r3, #1
 80054d8:	b29a      	uxth	r2, r3
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80054de:	68fb      	ldr	r3, [r7, #12]
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	691a      	ldr	r2, [r3, #16]
 80054e4:	68fb      	ldr	r3, [r7, #12]
 80054e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054e8:	b2d2      	uxtb	r2, r2
 80054ea:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054f0:	1c5a      	adds	r2, r3, #1
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80054fa:	3b01      	subs	r3, #1
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005506:	b29b      	uxth	r3, r3
 8005508:	3b01      	subs	r3, #1
 800550a:	b29a      	uxth	r2, r3
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005510:	e0c4      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	9300      	str	r3, [sp, #0]
 8005516:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005518:	2200      	movs	r2, #0
 800551a:	496c      	ldr	r1, [pc, #432]	@ (80056cc <HAL_I2C_Mem_Read+0x460>)
 800551c:	68f8      	ldr	r0, [r7, #12]
 800551e:	f000 fcd3 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005522:	4603      	mov	r3, r0
 8005524:	2b00      	cmp	r3, #0
 8005526:	d001      	beq.n	800552c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005528:	2301      	movs	r3, #1
 800552a:	e0cb      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	681a      	ldr	r2, [r3, #0]
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800553a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	691a      	ldr	r2, [r3, #16]
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005546:	b2d2      	uxtb	r2, r2
 8005548:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800554e:	1c5a      	adds	r2, r3, #1
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005558:	3b01      	subs	r3, #1
 800555a:	b29a      	uxth	r2, r3
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005564:	b29b      	uxth	r3, r3
 8005566:	3b01      	subs	r3, #1
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800556e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005570:	9300      	str	r3, [sp, #0]
 8005572:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005574:	2200      	movs	r2, #0
 8005576:	4955      	ldr	r1, [pc, #340]	@ (80056cc <HAL_I2C_Mem_Read+0x460>)
 8005578:	68f8      	ldr	r0, [r7, #12]
 800557a:	f000 fca5 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 800557e:	4603      	mov	r3, r0
 8005580:	2b00      	cmp	r3, #0
 8005582:	d001      	beq.n	8005588 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005584:	2301      	movs	r3, #1
 8005586:	e09d      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	681a      	ldr	r2, [r3, #0]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005596:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	691a      	ldr	r2, [r3, #16]
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055a2:	b2d2      	uxtb	r2, r2
 80055a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055aa:	1c5a      	adds	r2, r3, #1
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055b4:	3b01      	subs	r3, #1
 80055b6:	b29a      	uxth	r2, r3
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055c0:	b29b      	uxth	r3, r3
 80055c2:	3b01      	subs	r3, #1
 80055c4:	b29a      	uxth	r2, r3
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	691a      	ldr	r2, [r3, #16]
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d4:	b2d2      	uxtb	r2, r2
 80055d6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055dc:	1c5a      	adds	r2, r3, #1
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055e6:	3b01      	subs	r3, #1
 80055e8:	b29a      	uxth	r2, r3
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055f2:	b29b      	uxth	r3, r3
 80055f4:	3b01      	subs	r3, #1
 80055f6:	b29a      	uxth	r2, r3
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80055fc:	e04e      	b.n	800569c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005600:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005602:	68f8      	ldr	r0, [r7, #12]
 8005604:	f000 fe0a 	bl	800621c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005608:	4603      	mov	r3, r0
 800560a:	2b00      	cmp	r3, #0
 800560c:	d001      	beq.n	8005612 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800560e:	2301      	movs	r3, #1
 8005610:	e058      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	691a      	ldr	r2, [r3, #16]
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800561c:	b2d2      	uxtb	r2, r2
 800561e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	695b      	ldr	r3, [r3, #20]
 800564a:	f003 0304 	and.w	r3, r3, #4
 800564e:	2b04      	cmp	r3, #4
 8005650:	d124      	bne.n	800569c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005656:	2b03      	cmp	r3, #3
 8005658:	d107      	bne.n	800566a <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	681a      	ldr	r2, [r3, #0]
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005668:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	691a      	ldr	r2, [r3, #16]
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005674:	b2d2      	uxtb	r2, r2
 8005676:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800567c:	1c5a      	adds	r2, r3, #1
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005686:	3b01      	subs	r3, #1
 8005688:	b29a      	uxth	r2, r3
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005692:	b29b      	uxth	r3, r3
 8005694:	3b01      	subs	r3, #1
 8005696:	b29a      	uxth	r2, r3
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800569c:	68fb      	ldr	r3, [r7, #12]
 800569e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	f47f aeb6 	bne.w	8005412 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80056a6:	68fb      	ldr	r3, [r7, #12]
 80056a8:	2220      	movs	r2, #32
 80056aa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	2200      	movs	r2, #0
 80056ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056be:	2300      	movs	r3, #0
 80056c0:	e000      	b.n	80056c4 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 80056c2:	2302      	movs	r3, #2
  }
}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3728      	adds	r7, #40	@ 0x28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}
 80056cc:	00010004 	.word	0x00010004

080056d0 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b08a      	sub	sp, #40	@ 0x28
 80056d4:	af02      	add	r7, sp, #8
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	607a      	str	r2, [r7, #4]
 80056da:	603b      	str	r3, [r7, #0]
 80056dc:	460b      	mov	r3, r1
 80056de:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80056e0:	f7fe fd46 	bl	8004170 <HAL_GetTick>
 80056e4:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056f0:	b2db      	uxtb	r3, r3
 80056f2:	2b20      	cmp	r3, #32
 80056f4:	f040 8111 	bne.w	800591a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056f8:	69fb      	ldr	r3, [r7, #28]
 80056fa:	9300      	str	r3, [sp, #0]
 80056fc:	2319      	movs	r3, #25
 80056fe:	2201      	movs	r2, #1
 8005700:	4988      	ldr	r1, [pc, #544]	@ (8005924 <HAL_I2C_IsDeviceReady+0x254>)
 8005702:	68f8      	ldr	r0, [r7, #12]
 8005704:	f000 fbe0 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800570e:	2302      	movs	r3, #2
 8005710:	e104      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005718:	2b01      	cmp	r3, #1
 800571a:	d101      	bne.n	8005720 <HAL_I2C_IsDeviceReady+0x50>
 800571c:	2302      	movs	r3, #2
 800571e:	e0fd      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	2201      	movs	r2, #1
 8005724:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f003 0301 	and.w	r3, r3, #1
 8005732:	2b01      	cmp	r3, #1
 8005734:	d007      	beq.n	8005746 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f042 0201 	orr.w	r2, r2, #1
 8005744:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005754:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2224      	movs	r2, #36	@ 0x24
 800575a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	2200      	movs	r2, #0
 8005762:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	4a70      	ldr	r2, [pc, #448]	@ (8005928 <HAL_I2C_IsDeviceReady+0x258>)
 8005768:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	681a      	ldr	r2, [r3, #0]
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005778:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800577a:	69fb      	ldr	r3, [r7, #28]
 800577c:	9300      	str	r3, [sp, #0]
 800577e:	683b      	ldr	r3, [r7, #0]
 8005780:	2200      	movs	r2, #0
 8005782:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fb9e 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00d      	beq.n	80057ae <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800579c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057a0:	d103      	bne.n	80057aa <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80057a8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 80057aa:	2303      	movs	r3, #3
 80057ac:	e0b6      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057ae:	897b      	ldrh	r3, [r7, #10]
 80057b0:	b2db      	uxtb	r3, r3
 80057b2:	461a      	mov	r2, r3
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80057bc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 80057be:	f7fe fcd7 	bl	8004170 <HAL_GetTick>
 80057c2:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	695b      	ldr	r3, [r3, #20]
 80057ca:	f003 0302 	and.w	r3, r3, #2
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	bf0c      	ite	eq
 80057d2:	2301      	moveq	r3, #1
 80057d4:	2300      	movne	r3, #0
 80057d6:	b2db      	uxtb	r3, r3
 80057d8:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	695b      	ldr	r3, [r3, #20]
 80057e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057e4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80057e8:	bf0c      	ite	eq
 80057ea:	2301      	moveq	r3, #1
 80057ec:	2300      	movne	r3, #0
 80057ee:	b2db      	uxtb	r3, r3
 80057f0:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80057f2:	e025      	b.n	8005840 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80057f4:	f7fe fcbc 	bl	8004170 <HAL_GetTick>
 80057f8:	4602      	mov	r2, r0
 80057fa:	69fb      	ldr	r3, [r7, #28]
 80057fc:	1ad3      	subs	r3, r2, r3
 80057fe:	683a      	ldr	r2, [r7, #0]
 8005800:	429a      	cmp	r2, r3
 8005802:	d302      	bcc.n	800580a <HAL_I2C_IsDeviceReady+0x13a>
 8005804:	683b      	ldr	r3, [r7, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d103      	bne.n	8005812 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	22a0      	movs	r2, #160	@ 0xa0
 800580e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	695b      	ldr	r3, [r3, #20]
 8005818:	f003 0302 	and.w	r3, r3, #2
 800581c:	2b02      	cmp	r3, #2
 800581e:	bf0c      	ite	eq
 8005820:	2301      	moveq	r3, #1
 8005822:	2300      	movne	r3, #0
 8005824:	b2db      	uxtb	r3, r3
 8005826:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005832:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005836:	bf0c      	ite	eq
 8005838:	2301      	moveq	r3, #1
 800583a:	2300      	movne	r3, #0
 800583c:	b2db      	uxtb	r3, r3
 800583e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005846:	b2db      	uxtb	r3, r3
 8005848:	2ba0      	cmp	r3, #160	@ 0xa0
 800584a:	d005      	beq.n	8005858 <HAL_I2C_IsDeviceReady+0x188>
 800584c:	7dfb      	ldrb	r3, [r7, #23]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <HAL_I2C_IsDeviceReady+0x188>
 8005852:	7dbb      	ldrb	r3, [r7, #22]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d0cd      	beq.n	80057f4 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2220      	movs	r2, #32
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	695b      	ldr	r3, [r3, #20]
 8005866:	f003 0302 	and.w	r3, r3, #2
 800586a:	2b02      	cmp	r3, #2
 800586c:	d129      	bne.n	80058c2 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587e:	2300      	movs	r3, #0
 8005880:	613b      	str	r3, [r7, #16]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	695b      	ldr	r3, [r3, #20]
 8005888:	613b      	str	r3, [r7, #16]
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	699b      	ldr	r3, [r3, #24]
 8005890:	613b      	str	r3, [r7, #16]
 8005892:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	9300      	str	r3, [sp, #0]
 8005898:	2319      	movs	r3, #25
 800589a:	2201      	movs	r2, #1
 800589c:	4921      	ldr	r1, [pc, #132]	@ (8005924 <HAL_I2C_IsDeviceReady+0x254>)
 800589e:	68f8      	ldr	r0, [r7, #12]
 80058a0:	f000 fb12 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 80058a4:	4603      	mov	r3, r0
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d001      	beq.n	80058ae <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e036      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2220      	movs	r2, #32
 80058b2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 80058be:	2300      	movs	r3, #0
 80058c0:	e02c      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681a      	ldr	r2, [r3, #0]
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058d0:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80058da:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	9300      	str	r3, [sp, #0]
 80058e0:	2319      	movs	r3, #25
 80058e2:	2201      	movs	r2, #1
 80058e4:	490f      	ldr	r1, [pc, #60]	@ (8005924 <HAL_I2C_IsDeviceReady+0x254>)
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f000 faee 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 80058ec:	4603      	mov	r3, r0
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d001      	beq.n	80058f6 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80058f2:	2301      	movs	r3, #1
 80058f4:	e012      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	3301      	adds	r3, #1
 80058fa:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	429a      	cmp	r2, r3
 8005902:	f4ff af32 	bcc.w	800576a <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2200      	movs	r2, #0
 8005912:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 800591a:	2302      	movs	r3, #2
  }
}
 800591c:	4618      	mov	r0, r3
 800591e:	3720      	adds	r7, #32
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}
 8005924:	00100002 	.word	0x00100002
 8005928:	ffff0000 	.word	0xffff0000

0800592c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b088      	sub	sp, #32
 8005930:	af02      	add	r7, sp, #8
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	607a      	str	r2, [r7, #4]
 8005936:	603b      	str	r3, [r7, #0]
 8005938:	460b      	mov	r3, r1
 800593a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005940:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005942:	697b      	ldr	r3, [r7, #20]
 8005944:	2b08      	cmp	r3, #8
 8005946:	d006      	beq.n	8005956 <I2C_MasterRequestWrite+0x2a>
 8005948:	697b      	ldr	r3, [r7, #20]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d003      	beq.n	8005956 <I2C_MasterRequestWrite+0x2a>
 800594e:	697b      	ldr	r3, [r7, #20]
 8005950:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005954:	d108      	bne.n	8005968 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	681a      	ldr	r2, [r3, #0]
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005964:	601a      	str	r2, [r3, #0]
 8005966:	e00b      	b.n	8005980 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800596c:	2b12      	cmp	r3, #18
 800596e:	d107      	bne.n	8005980 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	681a      	ldr	r2, [r3, #0]
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800597e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005980:	683b      	ldr	r3, [r7, #0]
 8005982:	9300      	str	r3, [sp, #0]
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2200      	movs	r2, #0
 8005988:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800598c:	68f8      	ldr	r0, [r7, #12]
 800598e:	f000 fa9b 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005992:	4603      	mov	r3, r0
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00d      	beq.n	80059b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80059a6:	d103      	bne.n	80059b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80059ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80059b0:	2303      	movs	r3, #3
 80059b2:	e035      	b.n	8005a20 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	691b      	ldr	r3, [r3, #16]
 80059b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80059bc:	d108      	bne.n	80059d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80059be:	897b      	ldrh	r3, [r7, #10]
 80059c0:	b2db      	uxtb	r3, r3
 80059c2:	461a      	mov	r2, r3
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80059cc:	611a      	str	r2, [r3, #16]
 80059ce:	e01b      	b.n	8005a08 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80059d0:	897b      	ldrh	r3, [r7, #10]
 80059d2:	11db      	asrs	r3, r3, #7
 80059d4:	b2db      	uxtb	r3, r3
 80059d6:	f003 0306 	and.w	r3, r3, #6
 80059da:	b2db      	uxtb	r3, r3
 80059dc:	f063 030f 	orn	r3, r3, #15
 80059e0:	b2da      	uxtb	r2, r3
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80059e8:	683b      	ldr	r3, [r7, #0]
 80059ea:	687a      	ldr	r2, [r7, #4]
 80059ec:	490e      	ldr	r1, [pc, #56]	@ (8005a28 <I2C_MasterRequestWrite+0xfc>)
 80059ee:	68f8      	ldr	r0, [r7, #12]
 80059f0:	f000 fae4 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80059f4:	4603      	mov	r3, r0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d001      	beq.n	80059fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80059fa:	2301      	movs	r3, #1
 80059fc:	e010      	b.n	8005a20 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80059fe:	897b      	ldrh	r3, [r7, #10]
 8005a00:	b2da      	uxtb	r2, r3
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	687a      	ldr	r2, [r7, #4]
 8005a0c:	4907      	ldr	r1, [pc, #28]	@ (8005a2c <I2C_MasterRequestWrite+0x100>)
 8005a0e:	68f8      	ldr	r0, [r7, #12]
 8005a10:	f000 fad4 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005a14:	4603      	mov	r3, r0
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8005a1e:	2300      	movs	r3, #0
}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3718      	adds	r7, #24
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}
 8005a28:	00010008 	.word	0x00010008
 8005a2c:	00010002 	.word	0x00010002

08005a30 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005a30:	b580      	push	{r7, lr}
 8005a32:	b088      	sub	sp, #32
 8005a34:	af02      	add	r7, sp, #8
 8005a36:	60f8      	str	r0, [r7, #12]
 8005a38:	607a      	str	r2, [r7, #4]
 8005a3a:	603b      	str	r3, [r7, #0]
 8005a3c:	460b      	mov	r3, r1
 8005a3e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005a44:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005a54:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005a56:	697b      	ldr	r3, [r7, #20]
 8005a58:	2b08      	cmp	r3, #8
 8005a5a:	d006      	beq.n	8005a6a <I2C_MasterRequestRead+0x3a>
 8005a5c:	697b      	ldr	r3, [r7, #20]
 8005a5e:	2b01      	cmp	r3, #1
 8005a60:	d003      	beq.n	8005a6a <I2C_MasterRequestRead+0x3a>
 8005a62:	697b      	ldr	r3, [r7, #20]
 8005a64:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005a68:	d108      	bne.n	8005a7c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a78:	601a      	str	r2, [r3, #0]
 8005a7a:	e00b      	b.n	8005a94 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005a80:	2b11      	cmp	r3, #17
 8005a82:	d107      	bne.n	8005a94 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	681a      	ldr	r2, [r3, #0]
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005a92:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	9300      	str	r3, [sp, #0]
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fa11 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00d      	beq.n	8005ac8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ab6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005aba:	d103      	bne.n	8005ac4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005ac2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ac4:	2303      	movs	r3, #3
 8005ac6:	e079      	b.n	8005bbc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	691b      	ldr	r3, [r3, #16]
 8005acc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ad0:	d108      	bne.n	8005ae4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005ad2:	897b      	ldrh	r3, [r7, #10]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	f043 0301 	orr.w	r3, r3, #1
 8005ada:	b2da      	uxtb	r2, r3
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	611a      	str	r2, [r3, #16]
 8005ae2:	e05f      	b.n	8005ba4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8005ae4:	897b      	ldrh	r3, [r7, #10]
 8005ae6:	11db      	asrs	r3, r3, #7
 8005ae8:	b2db      	uxtb	r3, r3
 8005aea:	f003 0306 	and.w	r3, r3, #6
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	f063 030f 	orn	r3, r3, #15
 8005af4:	b2da      	uxtb	r2, r3
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	681b      	ldr	r3, [r3, #0]
 8005afa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	687a      	ldr	r2, [r7, #4]
 8005b00:	4930      	ldr	r1, [pc, #192]	@ (8005bc4 <I2C_MasterRequestRead+0x194>)
 8005b02:	68f8      	ldr	r0, [r7, #12]
 8005b04:	f000 fa5a 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b08:	4603      	mov	r3, r0
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d001      	beq.n	8005b12 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e054      	b.n	8005bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8005b12:	897b      	ldrh	r3, [r7, #10]
 8005b14:	b2da      	uxtb	r2, r3
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	687a      	ldr	r2, [r7, #4]
 8005b20:	4929      	ldr	r1, [pc, #164]	@ (8005bc8 <I2C_MasterRequestRead+0x198>)
 8005b22:	68f8      	ldr	r0, [r7, #12]
 8005b24:	f000 fa4a 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d001      	beq.n	8005b32 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	e044      	b.n	8005bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b32:	2300      	movs	r3, #0
 8005b34:	613b      	str	r3, [r7, #16]
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	695b      	ldr	r3, [r3, #20]
 8005b3c:	613b      	str	r3, [r7, #16]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	699b      	ldr	r3, [r3, #24]
 8005b44:	613b      	str	r3, [r7, #16]
 8005b46:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	681a      	ldr	r2, [r3, #0]
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b56:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	9300      	str	r3, [sp, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	2200      	movs	r2, #0
 8005b60:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005b64:	68f8      	ldr	r0, [r7, #12]
 8005b66:	f000 f9af 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005b6a:	4603      	mov	r3, r0
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d00d      	beq.n	8005b8c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005b7e:	d103      	bne.n	8005b88 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005b86:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8005b88:	2303      	movs	r3, #3
 8005b8a:	e017      	b.n	8005bbc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8005b8c:	897b      	ldrh	r3, [r7, #10]
 8005b8e:	11db      	asrs	r3, r3, #7
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	f003 0306 	and.w	r3, r3, #6
 8005b96:	b2db      	uxtb	r3, r3
 8005b98:	f063 030e 	orn	r3, r3, #14
 8005b9c:	b2da      	uxtb	r2, r3
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	687a      	ldr	r2, [r7, #4]
 8005ba8:	4907      	ldr	r1, [pc, #28]	@ (8005bc8 <I2C_MasterRequestRead+0x198>)
 8005baa:	68f8      	ldr	r0, [r7, #12]
 8005bac:	f000 fa06 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005bb0:	4603      	mov	r3, r0
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d001      	beq.n	8005bba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	e000      	b.n	8005bbc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8005bba:	2300      	movs	r3, #0
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3718      	adds	r7, #24
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	00010008 	.word	0x00010008
 8005bc8:	00010002 	.word	0x00010002

08005bcc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005bcc:	b580      	push	{r7, lr}
 8005bce:	b088      	sub	sp, #32
 8005bd0:	af02      	add	r7, sp, #8
 8005bd2:	60f8      	str	r0, [r7, #12]
 8005bd4:	4608      	mov	r0, r1
 8005bd6:	4611      	mov	r1, r2
 8005bd8:	461a      	mov	r2, r3
 8005bda:	4603      	mov	r3, r0
 8005bdc:	817b      	strh	r3, [r7, #10]
 8005bde:	460b      	mov	r3, r1
 8005be0:	813b      	strh	r3, [r7, #8]
 8005be2:	4613      	mov	r3, r2
 8005be4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	681a      	ldr	r2, [r3, #0]
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005bf4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bf8:	9300      	str	r3, [sp, #0]
 8005bfa:	6a3b      	ldr	r3, [r7, #32]
 8005bfc:	2200      	movs	r2, #0
 8005bfe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005c02:	68f8      	ldr	r0, [r7, #12]
 8005c04:	f000 f960 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005c08:	4603      	mov	r3, r0
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00d      	beq.n	8005c2a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005c18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005c1c:	d103      	bne.n	8005c26 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005c24:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005c26:	2303      	movs	r3, #3
 8005c28:	e05f      	b.n	8005cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005c2a:	897b      	ldrh	r3, [r7, #10]
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	461a      	mov	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005c38:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005c3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c3c:	6a3a      	ldr	r2, [r7, #32]
 8005c3e:	492d      	ldr	r1, [pc, #180]	@ (8005cf4 <I2C_RequestMemoryWrite+0x128>)
 8005c40:	68f8      	ldr	r0, [r7, #12]
 8005c42:	f000 f9bb 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005c46:	4603      	mov	r3, r0
 8005c48:	2b00      	cmp	r3, #0
 8005c4a:	d001      	beq.n	8005c50 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005c4c:	2301      	movs	r3, #1
 8005c4e:	e04c      	b.n	8005cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c50:	2300      	movs	r3, #0
 8005c52:	617b      	str	r3, [r7, #20]
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	695b      	ldr	r3, [r3, #20]
 8005c5a:	617b      	str	r3, [r7, #20]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	699b      	ldr	r3, [r3, #24]
 8005c62:	617b      	str	r3, [r7, #20]
 8005c64:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005c66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c68:	6a39      	ldr	r1, [r7, #32]
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f000 fa46 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d00d      	beq.n	8005c92 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c7a:	2b04      	cmp	r3, #4
 8005c7c:	d107      	bne.n	8005c8e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	681a      	ldr	r2, [r3, #0]
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c8c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005c8e:	2301      	movs	r3, #1
 8005c90:	e02b      	b.n	8005cea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005c92:	88fb      	ldrh	r3, [r7, #6]
 8005c94:	2b01      	cmp	r3, #1
 8005c96:	d105      	bne.n	8005ca4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005c98:	893b      	ldrh	r3, [r7, #8]
 8005c9a:	b2da      	uxtb	r2, r3
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	681b      	ldr	r3, [r3, #0]
 8005ca0:	611a      	str	r2, [r3, #16]
 8005ca2:	e021      	b.n	8005ce8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005ca4:	893b      	ldrh	r3, [r7, #8]
 8005ca6:	0a1b      	lsrs	r3, r3, #8
 8005ca8:	b29b      	uxth	r3, r3
 8005caa:	b2da      	uxtb	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005cb2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005cb4:	6a39      	ldr	r1, [r7, #32]
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fa20 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d00d      	beq.n	8005cde <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d107      	bne.n	8005cda <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681a      	ldr	r2, [r3, #0]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005cd8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005cda:	2301      	movs	r3, #1
 8005cdc:	e005      	b.n	8005cea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005cde:	893b      	ldrh	r3, [r7, #8]
 8005ce0:	b2da      	uxtb	r2, r3
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005ce8:	2300      	movs	r3, #0
}
 8005cea:	4618      	mov	r0, r3
 8005cec:	3718      	adds	r7, #24
 8005cee:	46bd      	mov	sp, r7
 8005cf0:	bd80      	pop	{r7, pc}
 8005cf2:	bf00      	nop
 8005cf4:	00010002 	.word	0x00010002

08005cf8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005cf8:	b580      	push	{r7, lr}
 8005cfa:	b088      	sub	sp, #32
 8005cfc:	af02      	add	r7, sp, #8
 8005cfe:	60f8      	str	r0, [r7, #12]
 8005d00:	4608      	mov	r0, r1
 8005d02:	4611      	mov	r1, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	4603      	mov	r3, r0
 8005d08:	817b      	strh	r3, [r7, #10]
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	813b      	strh	r3, [r7, #8]
 8005d0e:	4613      	mov	r3, r2
 8005d10:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	681a      	ldr	r2, [r3, #0]
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8005d20:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	681a      	ldr	r2, [r3, #0]
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005d30:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	6a3b      	ldr	r3, [r7, #32]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005d3e:	68f8      	ldr	r0, [r7, #12]
 8005d40:	f000 f8c2 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005d44:	4603      	mov	r3, r0
 8005d46:	2b00      	cmp	r3, #0
 8005d48:	d00d      	beq.n	8005d66 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005d4a:	68fb      	ldr	r3, [r7, #12]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005d54:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005d58:	d103      	bne.n	8005d62 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005d60:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005d62:	2303      	movs	r3, #3
 8005d64:	e0aa      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005d66:	897b      	ldrh	r3, [r7, #10]
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	461a      	mov	r2, r3
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	681b      	ldr	r3, [r3, #0]
 8005d70:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005d74:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005d76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d78:	6a3a      	ldr	r2, [r7, #32]
 8005d7a:	4952      	ldr	r1, [pc, #328]	@ (8005ec4 <I2C_RequestMemoryRead+0x1cc>)
 8005d7c:	68f8      	ldr	r0, [r7, #12]
 8005d7e:	f000 f91d 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005d88:	2301      	movs	r3, #1
 8005d8a:	e097      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	617b      	str	r3, [r7, #20]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	695b      	ldr	r3, [r3, #20]
 8005d96:	617b      	str	r3, [r7, #20]
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	699b      	ldr	r3, [r3, #24]
 8005d9e:	617b      	str	r3, [r7, #20]
 8005da0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005da2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005da4:	6a39      	ldr	r1, [r7, #32]
 8005da6:	68f8      	ldr	r0, [r7, #12]
 8005da8:	f000 f9a8 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005dac:	4603      	mov	r3, r0
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d00d      	beq.n	8005dce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005db2:	68fb      	ldr	r3, [r7, #12]
 8005db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005db6:	2b04      	cmp	r3, #4
 8005db8:	d107      	bne.n	8005dca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005dc8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	e076      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005dce:	88fb      	ldrh	r3, [r7, #6]
 8005dd0:	2b01      	cmp	r3, #1
 8005dd2:	d105      	bne.n	8005de0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005dd4:	893b      	ldrh	r3, [r7, #8]
 8005dd6:	b2da      	uxtb	r2, r3
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	611a      	str	r2, [r3, #16]
 8005dde:	e021      	b.n	8005e24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005de0:	893b      	ldrh	r3, [r7, #8]
 8005de2:	0a1b      	lsrs	r3, r3, #8
 8005de4:	b29b      	uxth	r3, r3
 8005de6:	b2da      	uxtb	r2, r3
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005dee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005df0:	6a39      	ldr	r1, [r7, #32]
 8005df2:	68f8      	ldr	r0, [r7, #12]
 8005df4:	f000 f982 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005df8:	4603      	mov	r3, r0
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d00d      	beq.n	8005e1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005dfe:	68fb      	ldr	r3, [r7, #12]
 8005e00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e02:	2b04      	cmp	r3, #4
 8005e04:	d107      	bne.n	8005e16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e06:	68fb      	ldr	r3, [r7, #12]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	681a      	ldr	r2, [r3, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005e16:	2301      	movs	r3, #1
 8005e18:	e050      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005e1a:	893b      	ldrh	r3, [r7, #8]
 8005e1c:	b2da      	uxtb	r2, r3
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005e24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e26:	6a39      	ldr	r1, [r7, #32]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 f967 	bl	80060fc <I2C_WaitOnTXEFlagUntilTimeout>
 8005e2e:	4603      	mov	r3, r0
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00d      	beq.n	8005e50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e38:	2b04      	cmp	r3, #4
 8005e3a:	d107      	bne.n	8005e4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	e035      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005e50:	68fb      	ldr	r3, [r7, #12]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	681a      	ldr	r2, [r3, #0]
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005e60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005e62:	9300      	str	r3, [sp, #0]
 8005e64:	6a3b      	ldr	r3, [r7, #32]
 8005e66:	2200      	movs	r2, #0
 8005e68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f000 f82b 	bl	8005ec8 <I2C_WaitOnFlagUntilTimeout>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00d      	beq.n	8005e94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e86:	d103      	bne.n	8005e90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005e90:	2303      	movs	r3, #3
 8005e92:	e013      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005e94:	897b      	ldrh	r3, [r7, #10]
 8005e96:	b2db      	uxtb	r3, r3
 8005e98:	f043 0301 	orr.w	r3, r3, #1
 8005e9c:	b2da      	uxtb	r2, r3
 8005e9e:	68fb      	ldr	r3, [r7, #12]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005ea4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ea6:	6a3a      	ldr	r2, [r7, #32]
 8005ea8:	4906      	ldr	r1, [pc, #24]	@ (8005ec4 <I2C_RequestMemoryRead+0x1cc>)
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	f000 f886 	bl	8005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005eb0:	4603      	mov	r3, r0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d001      	beq.n	8005eba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005eba:	2300      	movs	r3, #0
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3718      	adds	r7, #24
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	00010002 	.word	0x00010002

08005ec8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b084      	sub	sp, #16
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	603b      	str	r3, [r7, #0]
 8005ed4:	4613      	mov	r3, r2
 8005ed6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005ed8:	e048      	b.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005ee0:	d044      	beq.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005ee2:	f7fe f945 	bl	8004170 <HAL_GetTick>
 8005ee6:	4602      	mov	r2, r0
 8005ee8:	69bb      	ldr	r3, [r7, #24]
 8005eea:	1ad3      	subs	r3, r2, r3
 8005eec:	683a      	ldr	r2, [r7, #0]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d302      	bcc.n	8005ef8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d139      	bne.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8005ef8:	68bb      	ldr	r3, [r7, #8]
 8005efa:	0c1b      	lsrs	r3, r3, #16
 8005efc:	b2db      	uxtb	r3, r3
 8005efe:	2b01      	cmp	r3, #1
 8005f00:	d10d      	bne.n	8005f1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	695b      	ldr	r3, [r3, #20]
 8005f08:	43da      	mvns	r2, r3
 8005f0a:	68bb      	ldr	r3, [r7, #8]
 8005f0c:	4013      	ands	r3, r2
 8005f0e:	b29b      	uxth	r3, r3
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	bf0c      	ite	eq
 8005f14:	2301      	moveq	r3, #1
 8005f16:	2300      	movne	r3, #0
 8005f18:	b2db      	uxtb	r3, r3
 8005f1a:	461a      	mov	r2, r3
 8005f1c:	e00c      	b.n	8005f38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8005f1e:	68fb      	ldr	r3, [r7, #12]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	699b      	ldr	r3, [r3, #24]
 8005f24:	43da      	mvns	r2, r3
 8005f26:	68bb      	ldr	r3, [r7, #8]
 8005f28:	4013      	ands	r3, r2
 8005f2a:	b29b      	uxth	r3, r3
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	bf0c      	ite	eq
 8005f30:	2301      	moveq	r3, #1
 8005f32:	2300      	movne	r3, #0
 8005f34:	b2db      	uxtb	r3, r3
 8005f36:	461a      	mov	r2, r3
 8005f38:	79fb      	ldrb	r3, [r7, #7]
 8005f3a:	429a      	cmp	r2, r3
 8005f3c:	d116      	bne.n	8005f6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2200      	movs	r2, #0
 8005f42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2220      	movs	r2, #32
 8005f48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f58:	f043 0220 	orr.w	r2, r3, #32
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	2200      	movs	r2, #0
 8005f64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005f68:	2301      	movs	r3, #1
 8005f6a:	e023      	b.n	8005fb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	0c1b      	lsrs	r3, r3, #16
 8005f70:	b2db      	uxtb	r3, r3
 8005f72:	2b01      	cmp	r3, #1
 8005f74:	d10d      	bne.n	8005f92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	695b      	ldr	r3, [r3, #20]
 8005f7c:	43da      	mvns	r2, r3
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	4013      	ands	r3, r2
 8005f82:	b29b      	uxth	r3, r3
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	bf0c      	ite	eq
 8005f88:	2301      	moveq	r3, #1
 8005f8a:	2300      	movne	r3, #0
 8005f8c:	b2db      	uxtb	r3, r3
 8005f8e:	461a      	mov	r2, r3
 8005f90:	e00c      	b.n	8005fac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	699b      	ldr	r3, [r3, #24]
 8005f98:	43da      	mvns	r2, r3
 8005f9a:	68bb      	ldr	r3, [r7, #8]
 8005f9c:	4013      	ands	r3, r2
 8005f9e:	b29b      	uxth	r3, r3
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	bf0c      	ite	eq
 8005fa4:	2301      	moveq	r3, #1
 8005fa6:	2300      	movne	r3, #0
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	461a      	mov	r2, r3
 8005fac:	79fb      	ldrb	r3, [r7, #7]
 8005fae:	429a      	cmp	r2, r3
 8005fb0:	d093      	beq.n	8005eda <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005fb2:	2300      	movs	r3, #0
}
 8005fb4:	4618      	mov	r0, r3
 8005fb6:	3710      	adds	r7, #16
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	bd80      	pop	{r7, pc}

08005fbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005fbc:	b580      	push	{r7, lr}
 8005fbe:	b084      	sub	sp, #16
 8005fc0:	af00      	add	r7, sp, #0
 8005fc2:	60f8      	str	r0, [r7, #12]
 8005fc4:	60b9      	str	r1, [r7, #8]
 8005fc6:	607a      	str	r2, [r7, #4]
 8005fc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005fca:	e071      	b.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005fcc:	68fb      	ldr	r3, [r7, #12]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	695b      	ldr	r3, [r3, #20]
 8005fd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005fd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005fda:	d123      	bne.n	8006024 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	681a      	ldr	r2, [r3, #0]
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005ff4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	2220      	movs	r2, #32
 8006000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	2200      	movs	r2, #0
 8006008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	f043 0204 	orr.w	r2, r3, #4
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	2200      	movs	r2, #0
 800601c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006020:	2301      	movs	r3, #1
 8006022:	e067      	b.n	80060f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f1b3 3fff 	cmp.w	r3, #4294967295
 800602a:	d041      	beq.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800602c:	f7fe f8a0 	bl	8004170 <HAL_GetTick>
 8006030:	4602      	mov	r2, r0
 8006032:	683b      	ldr	r3, [r7, #0]
 8006034:	1ad3      	subs	r3, r2, r3
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	429a      	cmp	r2, r3
 800603a:	d302      	bcc.n	8006042 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d136      	bne.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	0c1b      	lsrs	r3, r3, #16
 8006046:	b2db      	uxtb	r3, r3
 8006048:	2b01      	cmp	r3, #1
 800604a:	d10c      	bne.n	8006066 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	695b      	ldr	r3, [r3, #20]
 8006052:	43da      	mvns	r2, r3
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	4013      	ands	r3, r2
 8006058:	b29b      	uxth	r3, r3
 800605a:	2b00      	cmp	r3, #0
 800605c:	bf14      	ite	ne
 800605e:	2301      	movne	r3, #1
 8006060:	2300      	moveq	r3, #0
 8006062:	b2db      	uxtb	r3, r3
 8006064:	e00b      	b.n	800607e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	699b      	ldr	r3, [r3, #24]
 800606c:	43da      	mvns	r2, r3
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	4013      	ands	r3, r2
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b00      	cmp	r3, #0
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	2b00      	cmp	r3, #0
 8006080:	d016      	beq.n	80060b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	2200      	movs	r2, #0
 8006086:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006088:	68fb      	ldr	r3, [r7, #12]
 800608a:	2220      	movs	r2, #32
 800608c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	2200      	movs	r2, #0
 8006094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800609c:	f043 0220 	orr.w	r2, r3, #32
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	2200      	movs	r2, #0
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80060ac:	2301      	movs	r3, #1
 80060ae:	e021      	b.n	80060f4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80060b0:	68bb      	ldr	r3, [r7, #8]
 80060b2:	0c1b      	lsrs	r3, r3, #16
 80060b4:	b2db      	uxtb	r3, r3
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d10c      	bne.n	80060d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80060ba:	68fb      	ldr	r3, [r7, #12]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	695b      	ldr	r3, [r3, #20]
 80060c0:	43da      	mvns	r2, r3
 80060c2:	68bb      	ldr	r3, [r7, #8]
 80060c4:	4013      	ands	r3, r2
 80060c6:	b29b      	uxth	r3, r3
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	bf14      	ite	ne
 80060cc:	2301      	movne	r3, #1
 80060ce:	2300      	moveq	r3, #0
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	e00b      	b.n	80060ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	699b      	ldr	r3, [r3, #24]
 80060da:	43da      	mvns	r2, r3
 80060dc:	68bb      	ldr	r3, [r7, #8]
 80060de:	4013      	ands	r3, r2
 80060e0:	b29b      	uxth	r3, r3
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	bf14      	ite	ne
 80060e6:	2301      	movne	r3, #1
 80060e8:	2300      	moveq	r3, #0
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f47f af6d 	bne.w	8005fcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80060f2:	2300      	movs	r3, #0
}
 80060f4:	4618      	mov	r0, r3
 80060f6:	3710      	adds	r7, #16
 80060f8:	46bd      	mov	sp, r7
 80060fa:	bd80      	pop	{r7, pc}

080060fc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006108:	e034      	b.n	8006174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800610a:	68f8      	ldr	r0, [r7, #12]
 800610c:	f000 f8e3 	bl	80062d6 <I2C_IsAcknowledgeFailed>
 8006110:	4603      	mov	r3, r0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d001      	beq.n	800611a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006116:	2301      	movs	r3, #1
 8006118:	e034      	b.n	8006184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006120:	d028      	beq.n	8006174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006122:	f7fe f825 	bl	8004170 <HAL_GetTick>
 8006126:	4602      	mov	r2, r0
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	1ad3      	subs	r3, r2, r3
 800612c:	68ba      	ldr	r2, [r7, #8]
 800612e:	429a      	cmp	r2, r3
 8006130:	d302      	bcc.n	8006138 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d11d      	bne.n	8006174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	695b      	ldr	r3, [r3, #20]
 800613e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006142:	2b80      	cmp	r3, #128	@ 0x80
 8006144:	d016      	beq.n	8006174 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006146:	68fb      	ldr	r3, [r7, #12]
 8006148:	2200      	movs	r2, #0
 800614a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	2220      	movs	r2, #32
 8006150:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2200      	movs	r2, #0
 8006158:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006160:	f043 0220 	orr.w	r2, r3, #32
 8006164:	68fb      	ldr	r3, [r7, #12]
 8006166:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	2200      	movs	r2, #0
 800616c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006170:	2301      	movs	r3, #1
 8006172:	e007      	b.n	8006184 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	695b      	ldr	r3, [r3, #20]
 800617a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800617e:	2b80      	cmp	r3, #128	@ 0x80
 8006180:	d1c3      	bne.n	800610a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006182:	2300      	movs	r3, #0
}
 8006184:	4618      	mov	r0, r3
 8006186:	3710      	adds	r7, #16
 8006188:	46bd      	mov	sp, r7
 800618a:	bd80      	pop	{r7, pc}

0800618c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	60f8      	str	r0, [r7, #12]
 8006194:	60b9      	str	r1, [r7, #8]
 8006196:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006198:	e034      	b.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800619a:	68f8      	ldr	r0, [r7, #12]
 800619c:	f000 f89b 	bl	80062d6 <I2C_IsAcknowledgeFailed>
 80061a0:	4603      	mov	r3, r0
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d001      	beq.n	80061aa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80061a6:	2301      	movs	r3, #1
 80061a8:	e034      	b.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80061b0:	d028      	beq.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80061b2:	f7fd ffdd 	bl	8004170 <HAL_GetTick>
 80061b6:	4602      	mov	r2, r0
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	1ad3      	subs	r3, r2, r3
 80061bc:	68ba      	ldr	r2, [r7, #8]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d302      	bcc.n	80061c8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80061c2:	68bb      	ldr	r3, [r7, #8]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d11d      	bne.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	695b      	ldr	r3, [r3, #20]
 80061ce:	f003 0304 	and.w	r3, r3, #4
 80061d2:	2b04      	cmp	r3, #4
 80061d4:	d016      	beq.n	8006204 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	2200      	movs	r2, #0
 80061da:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	2220      	movs	r2, #32
 80061e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	2200      	movs	r2, #0
 80061e8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061f0:	f043 0220 	orr.w	r2, r3, #32
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	2200      	movs	r2, #0
 80061fc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006200:	2301      	movs	r3, #1
 8006202:	e007      	b.n	8006214 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	695b      	ldr	r3, [r3, #20]
 800620a:	f003 0304 	and.w	r3, r3, #4
 800620e:	2b04      	cmp	r3, #4
 8006210:	d1c3      	bne.n	800619a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006212:	2300      	movs	r3, #0
}
 8006214:	4618      	mov	r0, r3
 8006216:	3710      	adds	r7, #16
 8006218:	46bd      	mov	sp, r7
 800621a:	bd80      	pop	{r7, pc}

0800621c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800621c:	b580      	push	{r7, lr}
 800621e:	b084      	sub	sp, #16
 8006220:	af00      	add	r7, sp, #0
 8006222:	60f8      	str	r0, [r7, #12]
 8006224:	60b9      	str	r1, [r7, #8]
 8006226:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006228:	e049      	b.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	695b      	ldr	r3, [r3, #20]
 8006230:	f003 0310 	and.w	r3, r3, #16
 8006234:	2b10      	cmp	r3, #16
 8006236:	d119      	bne.n	800626c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	f06f 0210 	mvn.w	r2, #16
 8006240:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8006242:	68fb      	ldr	r3, [r7, #12]
 8006244:	2200      	movs	r2, #0
 8006246:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2220      	movs	r2, #32
 800624c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	2200      	movs	r2, #0
 8006254:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	2200      	movs	r2, #0
 8006264:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006268:	2301      	movs	r3, #1
 800626a:	e030      	b.n	80062ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800626c:	f7fd ff80 	bl	8004170 <HAL_GetTick>
 8006270:	4602      	mov	r2, r0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	1ad3      	subs	r3, r2, r3
 8006276:	68ba      	ldr	r2, [r7, #8]
 8006278:	429a      	cmp	r2, r3
 800627a:	d302      	bcc.n	8006282 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800627c:	68bb      	ldr	r3, [r7, #8]
 800627e:	2b00      	cmp	r3, #0
 8006280:	d11d      	bne.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	681b      	ldr	r3, [r3, #0]
 8006286:	695b      	ldr	r3, [r3, #20]
 8006288:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800628c:	2b40      	cmp	r3, #64	@ 0x40
 800628e:	d016      	beq.n	80062be <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	2200      	movs	r2, #0
 8006294:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	2220      	movs	r2, #32
 800629a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	2200      	movs	r2, #0
 80062a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80062a6:	68fb      	ldr	r3, [r7, #12]
 80062a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062aa:	f043 0220 	orr.w	r2, r3, #32
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2200      	movs	r2, #0
 80062b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e007      	b.n	80062ce <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	695b      	ldr	r3, [r3, #20]
 80062c4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80062c8:	2b40      	cmp	r3, #64	@ 0x40
 80062ca:	d1ae      	bne.n	800622a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3710      	adds	r7, #16
 80062d2:	46bd      	mov	sp, r7
 80062d4:	bd80      	pop	{r7, pc}

080062d6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80062d6:	b480      	push	{r7}
 80062d8:	b083      	sub	sp, #12
 80062da:	af00      	add	r7, sp, #0
 80062dc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	695b      	ldr	r3, [r3, #20]
 80062e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80062e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80062ec:	d11b      	bne.n	8006326 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80062f6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2200      	movs	r2, #0
 80062fc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	2220      	movs	r2, #32
 8006302:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006312:	f043 0204 	orr.w	r2, r3, #4
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2200      	movs	r2, #0
 800631e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8006322:	2301      	movs	r3, #1
 8006324:	e000      	b.n	8006328 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006326:	2300      	movs	r3, #0
}
 8006328:	4618      	mov	r0, r3
 800632a:	370c      	adds	r7, #12
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr

08006334 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b086      	sub	sp, #24
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e267      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	f003 0301 	and.w	r3, r3, #1
 800634e:	2b00      	cmp	r3, #0
 8006350:	d075      	beq.n	800643e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006352:	4b88      	ldr	r3, [pc, #544]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006354:	689b      	ldr	r3, [r3, #8]
 8006356:	f003 030c 	and.w	r3, r3, #12
 800635a:	2b04      	cmp	r3, #4
 800635c:	d00c      	beq.n	8006378 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800635e:	4b85      	ldr	r3, [pc, #532]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006366:	2b08      	cmp	r3, #8
 8006368:	d112      	bne.n	8006390 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800636a:	4b82      	ldr	r3, [pc, #520]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 800636c:	685b      	ldr	r3, [r3, #4]
 800636e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006376:	d10b      	bne.n	8006390 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006378:	4b7e      	ldr	r3, [pc, #504]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006380:	2b00      	cmp	r3, #0
 8006382:	d05b      	beq.n	800643c <HAL_RCC_OscConfig+0x108>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	685b      	ldr	r3, [r3, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d157      	bne.n	800643c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800638c:	2301      	movs	r3, #1
 800638e:	e242      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006398:	d106      	bne.n	80063a8 <HAL_RCC_OscConfig+0x74>
 800639a:	4b76      	ldr	r3, [pc, #472]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4a75      	ldr	r2, [pc, #468]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063a4:	6013      	str	r3, [r2, #0]
 80063a6:	e01d      	b.n	80063e4 <HAL_RCC_OscConfig+0xb0>
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	685b      	ldr	r3, [r3, #4]
 80063ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80063b0:	d10c      	bne.n	80063cc <HAL_RCC_OscConfig+0x98>
 80063b2:	4b70      	ldr	r3, [pc, #448]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	4a6f      	ldr	r2, [pc, #444]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80063bc:	6013      	str	r3, [r2, #0]
 80063be:	4b6d      	ldr	r3, [pc, #436]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	4a6c      	ldr	r2, [pc, #432]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80063c8:	6013      	str	r3, [r2, #0]
 80063ca:	e00b      	b.n	80063e4 <HAL_RCC_OscConfig+0xb0>
 80063cc:	4b69      	ldr	r3, [pc, #420]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	4a68      	ldr	r2, [pc, #416]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80063d6:	6013      	str	r3, [r2, #0]
 80063d8:	4b66      	ldr	r3, [pc, #408]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4a65      	ldr	r2, [pc, #404]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80063de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80063e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	685b      	ldr	r3, [r3, #4]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d013      	beq.n	8006414 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80063ec:	f7fd fec0 	bl	8004170 <HAL_GetTick>
 80063f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80063f2:	e008      	b.n	8006406 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80063f4:	f7fd febc 	bl	8004170 <HAL_GetTick>
 80063f8:	4602      	mov	r2, r0
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1ad3      	subs	r3, r2, r3
 80063fe:	2b64      	cmp	r3, #100	@ 0x64
 8006400:	d901      	bls.n	8006406 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8006402:	2303      	movs	r3, #3
 8006404:	e207      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006406:	4b5b      	ldr	r3, [pc, #364]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800640e:	2b00      	cmp	r3, #0
 8006410:	d0f0      	beq.n	80063f4 <HAL_RCC_OscConfig+0xc0>
 8006412:	e014      	b.n	800643e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006414:	f7fd feac 	bl	8004170 <HAL_GetTick>
 8006418:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800641a:	e008      	b.n	800642e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800641c:	f7fd fea8 	bl	8004170 <HAL_GetTick>
 8006420:	4602      	mov	r2, r0
 8006422:	693b      	ldr	r3, [r7, #16]
 8006424:	1ad3      	subs	r3, r2, r3
 8006426:	2b64      	cmp	r3, #100	@ 0x64
 8006428:	d901      	bls.n	800642e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800642a:	2303      	movs	r3, #3
 800642c:	e1f3      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800642e:	4b51      	ldr	r3, [pc, #324]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006436:	2b00      	cmp	r3, #0
 8006438:	d1f0      	bne.n	800641c <HAL_RCC_OscConfig+0xe8>
 800643a:	e000      	b.n	800643e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800643c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f003 0302 	and.w	r3, r3, #2
 8006446:	2b00      	cmp	r3, #0
 8006448:	d063      	beq.n	8006512 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800644a:	4b4a      	ldr	r3, [pc, #296]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 800644c:	689b      	ldr	r3, [r3, #8]
 800644e:	f003 030c 	and.w	r3, r3, #12
 8006452:	2b00      	cmp	r3, #0
 8006454:	d00b      	beq.n	800646e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006456:	4b47      	ldr	r3, [pc, #284]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006458:	689b      	ldr	r3, [r3, #8]
 800645a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800645e:	2b08      	cmp	r3, #8
 8006460:	d11c      	bne.n	800649c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006462:	4b44      	ldr	r3, [pc, #272]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006464:	685b      	ldr	r3, [r3, #4]
 8006466:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800646a:	2b00      	cmp	r3, #0
 800646c:	d116      	bne.n	800649c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800646e:	4b41      	ldr	r3, [pc, #260]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	f003 0302 	and.w	r3, r3, #2
 8006476:	2b00      	cmp	r3, #0
 8006478:	d005      	beq.n	8006486 <HAL_RCC_OscConfig+0x152>
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	68db      	ldr	r3, [r3, #12]
 800647e:	2b01      	cmp	r3, #1
 8006480:	d001      	beq.n	8006486 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006482:	2301      	movs	r3, #1
 8006484:	e1c7      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006486:	4b3b      	ldr	r3, [pc, #236]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	00db      	lsls	r3, r3, #3
 8006494:	4937      	ldr	r1, [pc, #220]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006496:	4313      	orrs	r3, r2
 8006498:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800649a:	e03a      	b.n	8006512 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	68db      	ldr	r3, [r3, #12]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d020      	beq.n	80064e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80064a4:	4b34      	ldr	r3, [pc, #208]	@ (8006578 <HAL_RCC_OscConfig+0x244>)
 80064a6:	2201      	movs	r2, #1
 80064a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064aa:	f7fd fe61 	bl	8004170 <HAL_GetTick>
 80064ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064b0:	e008      	b.n	80064c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064b2:	f7fd fe5d 	bl	8004170 <HAL_GetTick>
 80064b6:	4602      	mov	r2, r0
 80064b8:	693b      	ldr	r3, [r7, #16]
 80064ba:	1ad3      	subs	r3, r2, r3
 80064bc:	2b02      	cmp	r3, #2
 80064be:	d901      	bls.n	80064c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80064c0:	2303      	movs	r3, #3
 80064c2:	e1a8      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80064c4:	4b2b      	ldr	r3, [pc, #172]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	f003 0302 	and.w	r3, r3, #2
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d0f0      	beq.n	80064b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80064d0:	4b28      	ldr	r3, [pc, #160]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	691b      	ldr	r3, [r3, #16]
 80064dc:	00db      	lsls	r3, r3, #3
 80064de:	4925      	ldr	r1, [pc, #148]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 80064e0:	4313      	orrs	r3, r2
 80064e2:	600b      	str	r3, [r1, #0]
 80064e4:	e015      	b.n	8006512 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80064e6:	4b24      	ldr	r3, [pc, #144]	@ (8006578 <HAL_RCC_OscConfig+0x244>)
 80064e8:	2200      	movs	r2, #0
 80064ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80064ec:	f7fd fe40 	bl	8004170 <HAL_GetTick>
 80064f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80064f2:	e008      	b.n	8006506 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80064f4:	f7fd fe3c 	bl	8004170 <HAL_GetTick>
 80064f8:	4602      	mov	r2, r0
 80064fa:	693b      	ldr	r3, [r7, #16]
 80064fc:	1ad3      	subs	r3, r2, r3
 80064fe:	2b02      	cmp	r3, #2
 8006500:	d901      	bls.n	8006506 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006502:	2303      	movs	r3, #3
 8006504:	e187      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006506:	4b1b      	ldr	r3, [pc, #108]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f003 0302 	and.w	r3, r3, #2
 800650e:	2b00      	cmp	r3, #0
 8006510:	d1f0      	bne.n	80064f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	2b00      	cmp	r3, #0
 800651c:	d036      	beq.n	800658c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	695b      	ldr	r3, [r3, #20]
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006526:	4b15      	ldr	r3, [pc, #84]	@ (800657c <HAL_RCC_OscConfig+0x248>)
 8006528:	2201      	movs	r2, #1
 800652a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800652c:	f7fd fe20 	bl	8004170 <HAL_GetTick>
 8006530:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006532:	e008      	b.n	8006546 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006534:	f7fd fe1c 	bl	8004170 <HAL_GetTick>
 8006538:	4602      	mov	r2, r0
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	1ad3      	subs	r3, r2, r3
 800653e:	2b02      	cmp	r3, #2
 8006540:	d901      	bls.n	8006546 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006542:	2303      	movs	r3, #3
 8006544:	e167      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006546:	4b0b      	ldr	r3, [pc, #44]	@ (8006574 <HAL_RCC_OscConfig+0x240>)
 8006548:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800654a:	f003 0302 	and.w	r3, r3, #2
 800654e:	2b00      	cmp	r3, #0
 8006550:	d0f0      	beq.n	8006534 <HAL_RCC_OscConfig+0x200>
 8006552:	e01b      	b.n	800658c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006554:	4b09      	ldr	r3, [pc, #36]	@ (800657c <HAL_RCC_OscConfig+0x248>)
 8006556:	2200      	movs	r2, #0
 8006558:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800655a:	f7fd fe09 	bl	8004170 <HAL_GetTick>
 800655e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006560:	e00e      	b.n	8006580 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006562:	f7fd fe05 	bl	8004170 <HAL_GetTick>
 8006566:	4602      	mov	r2, r0
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	1ad3      	subs	r3, r2, r3
 800656c:	2b02      	cmp	r3, #2
 800656e:	d907      	bls.n	8006580 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006570:	2303      	movs	r3, #3
 8006572:	e150      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
 8006574:	40023800 	.word	0x40023800
 8006578:	42470000 	.word	0x42470000
 800657c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006580:	4b88      	ldr	r3, [pc, #544]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006582:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006584:	f003 0302 	and.w	r3, r3, #2
 8006588:	2b00      	cmp	r3, #0
 800658a:	d1ea      	bne.n	8006562 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	f003 0304 	and.w	r3, r3, #4
 8006594:	2b00      	cmp	r3, #0
 8006596:	f000 8097 	beq.w	80066c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800659a:	2300      	movs	r3, #0
 800659c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800659e:	4b81      	ldr	r3, [pc, #516]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065a6:	2b00      	cmp	r3, #0
 80065a8:	d10f      	bne.n	80065ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80065aa:	2300      	movs	r3, #0
 80065ac:	60bb      	str	r3, [r7, #8]
 80065ae:	4b7d      	ldr	r3, [pc, #500]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065b2:	4a7c      	ldr	r2, [pc, #496]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80065b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80065ba:	4b7a      	ldr	r3, [pc, #488]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80065bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80065be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80065c2:	60bb      	str	r3, [r7, #8]
 80065c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80065c6:	2301      	movs	r3, #1
 80065c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065ca:	4b77      	ldr	r3, [pc, #476]	@ (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80065d2:	2b00      	cmp	r3, #0
 80065d4:	d118      	bne.n	8006608 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80065d6:	4b74      	ldr	r3, [pc, #464]	@ (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4a73      	ldr	r2, [pc, #460]	@ (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80065e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80065e2:	f7fd fdc5 	bl	8004170 <HAL_GetTick>
 80065e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065e8:	e008      	b.n	80065fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80065ea:	f7fd fdc1 	bl	8004170 <HAL_GetTick>
 80065ee:	4602      	mov	r2, r0
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	1ad3      	subs	r3, r2, r3
 80065f4:	2b02      	cmp	r3, #2
 80065f6:	d901      	bls.n	80065fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80065f8:	2303      	movs	r3, #3
 80065fa:	e10c      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80065fc:	4b6a      	ldr	r3, [pc, #424]	@ (80067a8 <HAL_RCC_OscConfig+0x474>)
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006604:	2b00      	cmp	r3, #0
 8006606:	d0f0      	beq.n	80065ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	689b      	ldr	r3, [r3, #8]
 800660c:	2b01      	cmp	r3, #1
 800660e:	d106      	bne.n	800661e <HAL_RCC_OscConfig+0x2ea>
 8006610:	4b64      	ldr	r3, [pc, #400]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006612:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006614:	4a63      	ldr	r2, [pc, #396]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006616:	f043 0301 	orr.w	r3, r3, #1
 800661a:	6713      	str	r3, [r2, #112]	@ 0x70
 800661c:	e01c      	b.n	8006658 <HAL_RCC_OscConfig+0x324>
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	689b      	ldr	r3, [r3, #8]
 8006622:	2b05      	cmp	r3, #5
 8006624:	d10c      	bne.n	8006640 <HAL_RCC_OscConfig+0x30c>
 8006626:	4b5f      	ldr	r3, [pc, #380]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006628:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800662a:	4a5e      	ldr	r2, [pc, #376]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 800662c:	f043 0304 	orr.w	r3, r3, #4
 8006630:	6713      	str	r3, [r2, #112]	@ 0x70
 8006632:	4b5c      	ldr	r3, [pc, #368]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006636:	4a5b      	ldr	r2, [pc, #364]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006638:	f043 0301 	orr.w	r3, r3, #1
 800663c:	6713      	str	r3, [r2, #112]	@ 0x70
 800663e:	e00b      	b.n	8006658 <HAL_RCC_OscConfig+0x324>
 8006640:	4b58      	ldr	r3, [pc, #352]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006644:	4a57      	ldr	r2, [pc, #348]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006646:	f023 0301 	bic.w	r3, r3, #1
 800664a:	6713      	str	r3, [r2, #112]	@ 0x70
 800664c:	4b55      	ldr	r3, [pc, #340]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 800664e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006650:	4a54      	ldr	r2, [pc, #336]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006652:	f023 0304 	bic.w	r3, r3, #4
 8006656:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	2b00      	cmp	r3, #0
 800665e:	d015      	beq.n	800668c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006660:	f7fd fd86 	bl	8004170 <HAL_GetTick>
 8006664:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006666:	e00a      	b.n	800667e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006668:	f7fd fd82 	bl	8004170 <HAL_GetTick>
 800666c:	4602      	mov	r2, r0
 800666e:	693b      	ldr	r3, [r7, #16]
 8006670:	1ad3      	subs	r3, r2, r3
 8006672:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006676:	4293      	cmp	r3, r2
 8006678:	d901      	bls.n	800667e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800667a:	2303      	movs	r3, #3
 800667c:	e0cb      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800667e:	4b49      	ldr	r3, [pc, #292]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006680:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006682:	f003 0302 	and.w	r3, r3, #2
 8006686:	2b00      	cmp	r3, #0
 8006688:	d0ee      	beq.n	8006668 <HAL_RCC_OscConfig+0x334>
 800668a:	e014      	b.n	80066b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800668c:	f7fd fd70 	bl	8004170 <HAL_GetTick>
 8006690:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006692:	e00a      	b.n	80066aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006694:	f7fd fd6c 	bl	8004170 <HAL_GetTick>
 8006698:	4602      	mov	r2, r0
 800669a:	693b      	ldr	r3, [r7, #16]
 800669c:	1ad3      	subs	r3, r2, r3
 800669e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80066a2:	4293      	cmp	r3, r2
 80066a4:	d901      	bls.n	80066aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80066a6:	2303      	movs	r3, #3
 80066a8:	e0b5      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80066aa:	4b3e      	ldr	r3, [pc, #248]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80066ae:	f003 0302 	and.w	r3, r3, #2
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d1ee      	bne.n	8006694 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80066b6:	7dfb      	ldrb	r3, [r7, #23]
 80066b8:	2b01      	cmp	r3, #1
 80066ba:	d105      	bne.n	80066c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80066bc:	4b39      	ldr	r3, [pc, #228]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066c0:	4a38      	ldr	r2, [pc, #224]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80066c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	f000 80a1 	beq.w	8006814 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80066d2:	4b34      	ldr	r3, [pc, #208]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 80066d4:	689b      	ldr	r3, [r3, #8]
 80066d6:	f003 030c 	and.w	r3, r3, #12
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d05c      	beq.n	8006798 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	699b      	ldr	r3, [r3, #24]
 80066e2:	2b02      	cmp	r3, #2
 80066e4:	d141      	bne.n	800676a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80066e6:	4b31      	ldr	r3, [pc, #196]	@ (80067ac <HAL_RCC_OscConfig+0x478>)
 80066e8:	2200      	movs	r2, #0
 80066ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80066ec:	f7fd fd40 	bl	8004170 <HAL_GetTick>
 80066f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80066f2:	e008      	b.n	8006706 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80066f4:	f7fd fd3c 	bl	8004170 <HAL_GetTick>
 80066f8:	4602      	mov	r2, r0
 80066fa:	693b      	ldr	r3, [r7, #16]
 80066fc:	1ad3      	subs	r3, r2, r3
 80066fe:	2b02      	cmp	r3, #2
 8006700:	d901      	bls.n	8006706 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006702:	2303      	movs	r3, #3
 8006704:	e087      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006706:	4b27      	ldr	r3, [pc, #156]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800670e:	2b00      	cmp	r3, #0
 8006710:	d1f0      	bne.n	80066f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	69da      	ldr	r2, [r3, #28]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	6a1b      	ldr	r3, [r3, #32]
 800671a:	431a      	orrs	r2, r3
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006720:	019b      	lsls	r3, r3, #6
 8006722:	431a      	orrs	r2, r3
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006728:	085b      	lsrs	r3, r3, #1
 800672a:	3b01      	subs	r3, #1
 800672c:	041b      	lsls	r3, r3, #16
 800672e:	431a      	orrs	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006734:	061b      	lsls	r3, r3, #24
 8006736:	491b      	ldr	r1, [pc, #108]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 8006738:	4313      	orrs	r3, r2
 800673a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800673c:	4b1b      	ldr	r3, [pc, #108]	@ (80067ac <HAL_RCC_OscConfig+0x478>)
 800673e:	2201      	movs	r2, #1
 8006740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006742:	f7fd fd15 	bl	8004170 <HAL_GetTick>
 8006746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006748:	e008      	b.n	800675c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800674a:	f7fd fd11 	bl	8004170 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	693b      	ldr	r3, [r7, #16]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d901      	bls.n	800675c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006758:	2303      	movs	r3, #3
 800675a:	e05c      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800675c:	4b11      	ldr	r3, [pc, #68]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 800675e:	681b      	ldr	r3, [r3, #0]
 8006760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006764:	2b00      	cmp	r3, #0
 8006766:	d0f0      	beq.n	800674a <HAL_RCC_OscConfig+0x416>
 8006768:	e054      	b.n	8006814 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800676a:	4b10      	ldr	r3, [pc, #64]	@ (80067ac <HAL_RCC_OscConfig+0x478>)
 800676c:	2200      	movs	r2, #0
 800676e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006770:	f7fd fcfe 	bl	8004170 <HAL_GetTick>
 8006774:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006776:	e008      	b.n	800678a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006778:	f7fd fcfa 	bl	8004170 <HAL_GetTick>
 800677c:	4602      	mov	r2, r0
 800677e:	693b      	ldr	r3, [r7, #16]
 8006780:	1ad3      	subs	r3, r2, r3
 8006782:	2b02      	cmp	r3, #2
 8006784:	d901      	bls.n	800678a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006786:	2303      	movs	r3, #3
 8006788:	e045      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800678a:	4b06      	ldr	r3, [pc, #24]	@ (80067a4 <HAL_RCC_OscConfig+0x470>)
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006792:	2b00      	cmp	r3, #0
 8006794:	d1f0      	bne.n	8006778 <HAL_RCC_OscConfig+0x444>
 8006796:	e03d      	b.n	8006814 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	699b      	ldr	r3, [r3, #24]
 800679c:	2b01      	cmp	r3, #1
 800679e:	d107      	bne.n	80067b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80067a0:	2301      	movs	r3, #1
 80067a2:	e038      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
 80067a4:	40023800 	.word	0x40023800
 80067a8:	40007000 	.word	0x40007000
 80067ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80067b0:	4b1b      	ldr	r3, [pc, #108]	@ (8006820 <HAL_RCC_OscConfig+0x4ec>)
 80067b2:	685b      	ldr	r3, [r3, #4]
 80067b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	699b      	ldr	r3, [r3, #24]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d028      	beq.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80067c8:	429a      	cmp	r2, r3
 80067ca:	d121      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80067d6:	429a      	cmp	r2, r3
 80067d8:	d11a      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067da:	68fa      	ldr	r2, [r7, #12]
 80067dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80067e0:	4013      	ands	r3, r2
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80067e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d111      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	3b01      	subs	r3, #1
 80067fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80067fc:	429a      	cmp	r2, r3
 80067fe:	d107      	bne.n	8006810 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800680a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800680c:	429a      	cmp	r2, r3
 800680e:	d001      	beq.n	8006814 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	e000      	b.n	8006816 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3718      	adds	r7, #24
 800681a:	46bd      	mov	sp, r7
 800681c:	bd80      	pop	{r7, pc}
 800681e:	bf00      	nop
 8006820:	40023800 	.word	0x40023800

08006824 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b084      	sub	sp, #16
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
 800682c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2b00      	cmp	r3, #0
 8006832:	d101      	bne.n	8006838 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006834:	2301      	movs	r3, #1
 8006836:	e0cc      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006838:	4b68      	ldr	r3, [pc, #416]	@ (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f003 0307 	and.w	r3, r3, #7
 8006840:	683a      	ldr	r2, [r7, #0]
 8006842:	429a      	cmp	r2, r3
 8006844:	d90c      	bls.n	8006860 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006846:	4b65      	ldr	r3, [pc, #404]	@ (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006848:	683a      	ldr	r2, [r7, #0]
 800684a:	b2d2      	uxtb	r2, r2
 800684c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800684e:	4b63      	ldr	r3, [pc, #396]	@ (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006850:	681b      	ldr	r3, [r3, #0]
 8006852:	f003 0307 	and.w	r3, r3, #7
 8006856:	683a      	ldr	r2, [r7, #0]
 8006858:	429a      	cmp	r2, r3
 800685a:	d001      	beq.n	8006860 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800685c:	2301      	movs	r3, #1
 800685e:	e0b8      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f003 0302 	and.w	r3, r3, #2
 8006868:	2b00      	cmp	r3, #0
 800686a:	d020      	beq.n	80068ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	f003 0304 	and.w	r3, r3, #4
 8006874:	2b00      	cmp	r3, #0
 8006876:	d005      	beq.n	8006884 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006878:	4b59      	ldr	r3, [pc, #356]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800687a:	689b      	ldr	r3, [r3, #8]
 800687c:	4a58      	ldr	r2, [pc, #352]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800687e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006882:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	f003 0308 	and.w	r3, r3, #8
 800688c:	2b00      	cmp	r3, #0
 800688e:	d005      	beq.n	800689c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006890:	4b53      	ldr	r3, [pc, #332]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006892:	689b      	ldr	r3, [r3, #8]
 8006894:	4a52      	ldr	r2, [pc, #328]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006896:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800689a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800689c:	4b50      	ldr	r3, [pc, #320]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	689b      	ldr	r3, [r3, #8]
 80068a8:	494d      	ldr	r1, [pc, #308]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068aa:	4313      	orrs	r3, r2
 80068ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	f003 0301 	and.w	r3, r3, #1
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d044      	beq.n	8006944 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d107      	bne.n	80068d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068c2:	4b47      	ldr	r3, [pc, #284]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d119      	bne.n	8006902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e07f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	685b      	ldr	r3, [r3, #4]
 80068d6:	2b02      	cmp	r3, #2
 80068d8:	d003      	beq.n	80068e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80068de:	2b03      	cmp	r3, #3
 80068e0:	d107      	bne.n	80068f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80068e2:	4b3f      	ldr	r3, [pc, #252]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d109      	bne.n	8006902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068ee:	2301      	movs	r3, #1
 80068f0:	e06f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80068f2:	4b3b      	ldr	r3, [pc, #236]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	f003 0302 	and.w	r3, r3, #2
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d101      	bne.n	8006902 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80068fe:	2301      	movs	r3, #1
 8006900:	e067      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006902:	4b37      	ldr	r3, [pc, #220]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	f023 0203 	bic.w	r2, r3, #3
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	685b      	ldr	r3, [r3, #4]
 800690e:	4934      	ldr	r1, [pc, #208]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006910:	4313      	orrs	r3, r2
 8006912:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006914:	f7fd fc2c 	bl	8004170 <HAL_GetTick>
 8006918:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800691a:	e00a      	b.n	8006932 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800691c:	f7fd fc28 	bl	8004170 <HAL_GetTick>
 8006920:	4602      	mov	r2, r0
 8006922:	68fb      	ldr	r3, [r7, #12]
 8006924:	1ad3      	subs	r3, r2, r3
 8006926:	f241 3288 	movw	r2, #5000	@ 0x1388
 800692a:	4293      	cmp	r3, r2
 800692c:	d901      	bls.n	8006932 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800692e:	2303      	movs	r3, #3
 8006930:	e04f      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006932:	4b2b      	ldr	r3, [pc, #172]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 020c 	and.w	r2, r3, #12
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	685b      	ldr	r3, [r3, #4]
 800693e:	009b      	lsls	r3, r3, #2
 8006940:	429a      	cmp	r2, r3
 8006942:	d1eb      	bne.n	800691c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006944:	4b25      	ldr	r3, [pc, #148]	@ (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	f003 0307 	and.w	r3, r3, #7
 800694c:	683a      	ldr	r2, [r7, #0]
 800694e:	429a      	cmp	r2, r3
 8006950:	d20c      	bcs.n	800696c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006952:	4b22      	ldr	r3, [pc, #136]	@ (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 8006954:	683a      	ldr	r2, [r7, #0]
 8006956:	b2d2      	uxtb	r2, r2
 8006958:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800695a:	4b20      	ldr	r3, [pc, #128]	@ (80069dc <HAL_RCC_ClockConfig+0x1b8>)
 800695c:	681b      	ldr	r3, [r3, #0]
 800695e:	f003 0307 	and.w	r3, r3, #7
 8006962:	683a      	ldr	r2, [r7, #0]
 8006964:	429a      	cmp	r2, r3
 8006966:	d001      	beq.n	800696c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006968:	2301      	movs	r3, #1
 800696a:	e032      	b.n	80069d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f003 0304 	and.w	r3, r3, #4
 8006974:	2b00      	cmp	r3, #0
 8006976:	d008      	beq.n	800698a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006978:	4b19      	ldr	r3, [pc, #100]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 800697a:	689b      	ldr	r3, [r3, #8]
 800697c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	68db      	ldr	r3, [r3, #12]
 8006984:	4916      	ldr	r1, [pc, #88]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006986:	4313      	orrs	r3, r2
 8006988:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f003 0308 	and.w	r3, r3, #8
 8006992:	2b00      	cmp	r3, #0
 8006994:	d009      	beq.n	80069aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006996:	4b12      	ldr	r3, [pc, #72]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	691b      	ldr	r3, [r3, #16]
 80069a2:	00db      	lsls	r3, r3, #3
 80069a4:	490e      	ldr	r1, [pc, #56]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80069a6:	4313      	orrs	r3, r2
 80069a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80069aa:	f000 f821 	bl	80069f0 <HAL_RCC_GetSysClockFreq>
 80069ae:	4602      	mov	r2, r0
 80069b0:	4b0b      	ldr	r3, [pc, #44]	@ (80069e0 <HAL_RCC_ClockConfig+0x1bc>)
 80069b2:	689b      	ldr	r3, [r3, #8]
 80069b4:	091b      	lsrs	r3, r3, #4
 80069b6:	f003 030f 	and.w	r3, r3, #15
 80069ba:	490a      	ldr	r1, [pc, #40]	@ (80069e4 <HAL_RCC_ClockConfig+0x1c0>)
 80069bc:	5ccb      	ldrb	r3, [r1, r3]
 80069be:	fa22 f303 	lsr.w	r3, r2, r3
 80069c2:	4a09      	ldr	r2, [pc, #36]	@ (80069e8 <HAL_RCC_ClockConfig+0x1c4>)
 80069c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80069c6:	4b09      	ldr	r3, [pc, #36]	@ (80069ec <HAL_RCC_ClockConfig+0x1c8>)
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd fb8c 	bl	80040e8 <HAL_InitTick>

  return HAL_OK;
 80069d0:	2300      	movs	r3, #0
}
 80069d2:	4618      	mov	r0, r3
 80069d4:	3710      	adds	r7, #16
 80069d6:	46bd      	mov	sp, r7
 80069d8:	bd80      	pop	{r7, pc}
 80069da:	bf00      	nop
 80069dc:	40023c00 	.word	0x40023c00
 80069e0:	40023800 	.word	0x40023800
 80069e4:	0800bcd8 	.word	0x0800bcd8
 80069e8:	2000001c 	.word	0x2000001c
 80069ec:	20000020 	.word	0x20000020

080069f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80069f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80069f4:	b090      	sub	sp, #64	@ 0x40
 80069f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80069f8:	2300      	movs	r3, #0
 80069fa:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 80069fc:	2300      	movs	r3, #0
 80069fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8006a00:	2300      	movs	r3, #0
 8006a02:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8006a04:	2300      	movs	r3, #0
 8006a06:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006a08:	4b59      	ldr	r3, [pc, #356]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a0a:	689b      	ldr	r3, [r3, #8]
 8006a0c:	f003 030c 	and.w	r3, r3, #12
 8006a10:	2b08      	cmp	r3, #8
 8006a12:	d00d      	beq.n	8006a30 <HAL_RCC_GetSysClockFreq+0x40>
 8006a14:	2b08      	cmp	r3, #8
 8006a16:	f200 80a1 	bhi.w	8006b5c <HAL_RCC_GetSysClockFreq+0x16c>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d002      	beq.n	8006a24 <HAL_RCC_GetSysClockFreq+0x34>
 8006a1e:	2b04      	cmp	r3, #4
 8006a20:	d003      	beq.n	8006a2a <HAL_RCC_GetSysClockFreq+0x3a>
 8006a22:	e09b      	b.n	8006b5c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006a24:	4b53      	ldr	r3, [pc, #332]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8006a26:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a28:	e09b      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006a2a:	4b53      	ldr	r3, [pc, #332]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a2c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006a2e:	e098      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006a30:	4b4f      	ldr	r3, [pc, #316]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006a38:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006a3a:	4b4d      	ldr	r3, [pc, #308]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a3c:	685b      	ldr	r3, [r3, #4]
 8006a3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d028      	beq.n	8006a98 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a46:	4b4a      	ldr	r3, [pc, #296]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a48:	685b      	ldr	r3, [r3, #4]
 8006a4a:	099b      	lsrs	r3, r3, #6
 8006a4c:	2200      	movs	r2, #0
 8006a4e:	623b      	str	r3, [r7, #32]
 8006a50:	627a      	str	r2, [r7, #36]	@ 0x24
 8006a52:	6a3b      	ldr	r3, [r7, #32]
 8006a54:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006a58:	2100      	movs	r1, #0
 8006a5a:	4b47      	ldr	r3, [pc, #284]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a5c:	fb03 f201 	mul.w	r2, r3, r1
 8006a60:	2300      	movs	r3, #0
 8006a62:	fb00 f303 	mul.w	r3, r0, r3
 8006a66:	4413      	add	r3, r2
 8006a68:	4a43      	ldr	r2, [pc, #268]	@ (8006b78 <HAL_RCC_GetSysClockFreq+0x188>)
 8006a6a:	fba0 1202 	umull	r1, r2, r0, r2
 8006a6e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006a70:	460a      	mov	r2, r1
 8006a72:	62ba      	str	r2, [r7, #40]	@ 0x28
 8006a74:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006a76:	4413      	add	r3, r2
 8006a78:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006a7a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a7c:	2200      	movs	r2, #0
 8006a7e:	61bb      	str	r3, [r7, #24]
 8006a80:	61fa      	str	r2, [r7, #28]
 8006a82:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006a86:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8006a8a:	f7fa f8ad 	bl	8000be8 <__aeabi_uldivmod>
 8006a8e:	4602      	mov	r2, r0
 8006a90:	460b      	mov	r3, r1
 8006a92:	4613      	mov	r3, r2
 8006a94:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006a96:	e053      	b.n	8006b40 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006a98:	4b35      	ldr	r3, [pc, #212]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006a9a:	685b      	ldr	r3, [r3, #4]
 8006a9c:	099b      	lsrs	r3, r3, #6
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	613b      	str	r3, [r7, #16]
 8006aa2:	617a      	str	r2, [r7, #20]
 8006aa4:	693b      	ldr	r3, [r7, #16]
 8006aa6:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8006aaa:	f04f 0b00 	mov.w	fp, #0
 8006aae:	4652      	mov	r2, sl
 8006ab0:	465b      	mov	r3, fp
 8006ab2:	f04f 0000 	mov.w	r0, #0
 8006ab6:	f04f 0100 	mov.w	r1, #0
 8006aba:	0159      	lsls	r1, r3, #5
 8006abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006ac0:	0150      	lsls	r0, r2, #5
 8006ac2:	4602      	mov	r2, r0
 8006ac4:	460b      	mov	r3, r1
 8006ac6:	ebb2 080a 	subs.w	r8, r2, sl
 8006aca:	eb63 090b 	sbc.w	r9, r3, fp
 8006ace:	f04f 0200 	mov.w	r2, #0
 8006ad2:	f04f 0300 	mov.w	r3, #0
 8006ad6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8006ada:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8006ade:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8006ae2:	ebb2 0408 	subs.w	r4, r2, r8
 8006ae6:	eb63 0509 	sbc.w	r5, r3, r9
 8006aea:	f04f 0200 	mov.w	r2, #0
 8006aee:	f04f 0300 	mov.w	r3, #0
 8006af2:	00eb      	lsls	r3, r5, #3
 8006af4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006af8:	00e2      	lsls	r2, r4, #3
 8006afa:	4614      	mov	r4, r2
 8006afc:	461d      	mov	r5, r3
 8006afe:	eb14 030a 	adds.w	r3, r4, sl
 8006b02:	603b      	str	r3, [r7, #0]
 8006b04:	eb45 030b 	adc.w	r3, r5, fp
 8006b08:	607b      	str	r3, [r7, #4]
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006b16:	4629      	mov	r1, r5
 8006b18:	028b      	lsls	r3, r1, #10
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006b20:	4621      	mov	r1, r4
 8006b22:	028a      	lsls	r2, r1, #10
 8006b24:	4610      	mov	r0, r2
 8006b26:	4619      	mov	r1, r3
 8006b28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b2a:	2200      	movs	r2, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	60fa      	str	r2, [r7, #12]
 8006b30:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006b34:	f7fa f858 	bl	8000be8 <__aeabi_uldivmod>
 8006b38:	4602      	mov	r2, r0
 8006b3a:	460b      	mov	r3, r1
 8006b3c:	4613      	mov	r3, r2
 8006b3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8006b40:	4b0b      	ldr	r3, [pc, #44]	@ (8006b70 <HAL_RCC_GetSysClockFreq+0x180>)
 8006b42:	685b      	ldr	r3, [r3, #4]
 8006b44:	0c1b      	lsrs	r3, r3, #16
 8006b46:	f003 0303 	and.w	r3, r3, #3
 8006b4a:	3301      	adds	r3, #1
 8006b4c:	005b      	lsls	r3, r3, #1
 8006b4e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8006b50:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8006b52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b54:	fbb2 f3f3 	udiv	r3, r2, r3
 8006b58:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b5a:	e002      	b.n	8006b62 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006b5c:	4b05      	ldr	r3, [pc, #20]	@ (8006b74 <HAL_RCC_GetSysClockFreq+0x184>)
 8006b5e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8006b60:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006b62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3740      	adds	r7, #64	@ 0x40
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b6e:	bf00      	nop
 8006b70:	40023800 	.word	0x40023800
 8006b74:	00f42400 	.word	0x00f42400
 8006b78:	017d7840 	.word	0x017d7840

08006b7c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006b7c:	b480      	push	{r7}
 8006b7e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006b80:	4b03      	ldr	r3, [pc, #12]	@ (8006b90 <HAL_RCC_GetHCLKFreq+0x14>)
 8006b82:	681b      	ldr	r3, [r3, #0]
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	2000001c 	.word	0x2000001c

08006b94 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8006b98:	f7ff fff0 	bl	8006b7c <HAL_RCC_GetHCLKFreq>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	4b05      	ldr	r3, [pc, #20]	@ (8006bb4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006ba0:	689b      	ldr	r3, [r3, #8]
 8006ba2:	0a9b      	lsrs	r3, r3, #10
 8006ba4:	f003 0307 	and.w	r3, r3, #7
 8006ba8:	4903      	ldr	r1, [pc, #12]	@ (8006bb8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006baa:	5ccb      	ldrb	r3, [r1, r3]
 8006bac:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006bb0:	4618      	mov	r0, r3
 8006bb2:	bd80      	pop	{r7, pc}
 8006bb4:	40023800 	.word	0x40023800
 8006bb8:	0800bce8 	.word	0x0800bce8

08006bbc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d101      	bne.n	8006bce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8006bca:	2301      	movs	r3, #1
 8006bcc:	e07b      	b.n	8006cc6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d108      	bne.n	8006be8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	685b      	ldr	r3, [r3, #4]
 8006bda:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006bde:	d009      	beq.n	8006bf4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	2200      	movs	r2, #0
 8006be4:	61da      	str	r2, [r3, #28]
 8006be6:	e005      	b.n	8006bf4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	2200      	movs	r2, #0
 8006bec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2200      	movs	r2, #0
 8006bf2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	2200      	movs	r2, #0
 8006bf8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d106      	bne.n	8006c14 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fc ffa6 	bl	8003b60 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2202      	movs	r2, #2
 8006c18:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	681a      	ldr	r2, [r3, #0]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006c2a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	685b      	ldr	r3, [r3, #4]
 8006c30:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	689b      	ldr	r3, [r3, #8]
 8006c38:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006c3c:	431a      	orrs	r2, r3
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	68db      	ldr	r3, [r3, #12]
 8006c42:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c46:	431a      	orrs	r2, r3
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	691b      	ldr	r3, [r3, #16]
 8006c4c:	f003 0302 	and.w	r3, r3, #2
 8006c50:	431a      	orrs	r2, r3
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	695b      	ldr	r3, [r3, #20]
 8006c56:	f003 0301 	and.w	r3, r3, #1
 8006c5a:	431a      	orrs	r2, r3
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	699b      	ldr	r3, [r3, #24]
 8006c60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006c64:	431a      	orrs	r2, r3
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	69db      	ldr	r3, [r3, #28]
 8006c6a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006c6e:	431a      	orrs	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6a1b      	ldr	r3, [r3, #32]
 8006c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006c78:	ea42 0103 	orr.w	r1, r2, r3
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c80:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	430a      	orrs	r2, r1
 8006c8a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	699b      	ldr	r3, [r3, #24]
 8006c90:	0c1b      	lsrs	r3, r3, #16
 8006c92:	f003 0104 	and.w	r1, r3, #4
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006c9a:	f003 0210 	and.w	r2, r3, #16
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	430a      	orrs	r2, r1
 8006ca4:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	69da      	ldr	r2, [r3, #28]
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006cb4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	2200      	movs	r2, #0
 8006cba:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	2201      	movs	r2, #1
 8006cc0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8006cc4:	2300      	movs	r3, #0
}
 8006cc6:	4618      	mov	r0, r3
 8006cc8:	3708      	adds	r7, #8
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}

08006cce <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006cce:	b580      	push	{r7, lr}
 8006cd0:	b088      	sub	sp, #32
 8006cd2:	af00      	add	r7, sp, #0
 8006cd4:	60f8      	str	r0, [r7, #12]
 8006cd6:	60b9      	str	r1, [r7, #8]
 8006cd8:	603b      	str	r3, [r7, #0]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006cde:	f7fd fa47 	bl	8004170 <HAL_GetTick>
 8006ce2:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8006ce4:	88fb      	ldrh	r3, [r7, #6]
 8006ce6:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006cee:	b2db      	uxtb	r3, r3
 8006cf0:	2b01      	cmp	r3, #1
 8006cf2:	d001      	beq.n	8006cf8 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8006cf4:	2302      	movs	r3, #2
 8006cf6:	e12a      	b.n	8006f4e <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8006cf8:	68bb      	ldr	r3, [r7, #8]
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d002      	beq.n	8006d04 <HAL_SPI_Transmit+0x36>
 8006cfe:	88fb      	ldrh	r3, [r7, #6]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d101      	bne.n	8006d08 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8006d04:	2301      	movs	r3, #1
 8006d06:	e122      	b.n	8006f4e <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d101      	bne.n	8006d16 <HAL_SPI_Transmit+0x48>
 8006d12:	2302      	movs	r3, #2
 8006d14:	e11b      	b.n	8006f4e <HAL_SPI_Transmit+0x280>
 8006d16:	68fb      	ldr	r3, [r7, #12]
 8006d18:	2201      	movs	r2, #1
 8006d1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	2203      	movs	r2, #3
 8006d22:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8006d2c:	68fb      	ldr	r3, [r7, #12]
 8006d2e:	68ba      	ldr	r2, [r7, #8]
 8006d30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	88fa      	ldrh	r2, [r7, #6]
 8006d36:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	88fa      	ldrh	r2, [r7, #6]
 8006d3c:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	2200      	movs	r2, #0
 8006d42:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	2200      	movs	r2, #0
 8006d48:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8006d4a:	68fb      	ldr	r3, [r7, #12]
 8006d4c:	2200      	movs	r2, #0
 8006d4e:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2200      	movs	r2, #0
 8006d54:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8006d56:	68fb      	ldr	r3, [r7, #12]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	689b      	ldr	r3, [r3, #8]
 8006d60:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006d64:	d10f      	bne.n	8006d86 <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8006d66:	68fb      	ldr	r3, [r7, #12]
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	681a      	ldr	r2, [r3, #0]
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006d74:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006d84:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d90:	2b40      	cmp	r3, #64	@ 0x40
 8006d92:	d007      	beq.n	8006da4 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	681a      	ldr	r2, [r3, #0]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006da2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	68db      	ldr	r3, [r3, #12]
 8006da8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dac:	d152      	bne.n	8006e54 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d002      	beq.n	8006dbc <HAL_SPI_Transmit+0xee>
 8006db6:	8b7b      	ldrh	r3, [r7, #26]
 8006db8:	2b01      	cmp	r3, #1
 8006dba:	d145      	bne.n	8006e48 <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc0:	881a      	ldrh	r2, [r3, #0]
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	681b      	ldr	r3, [r3, #0]
 8006dc6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dcc:	1c9a      	adds	r2, r3, #2
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006dd6:	b29b      	uxth	r3, r3
 8006dd8:	3b01      	subs	r3, #1
 8006dda:	b29a      	uxth	r2, r3
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8006de0:	e032      	b.n	8006e48 <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	f003 0302 	and.w	r3, r3, #2
 8006dec:	2b02      	cmp	r3, #2
 8006dee:	d112      	bne.n	8006e16 <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006df4:	881a      	ldrh	r2, [r3, #0]
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e00:	1c9a      	adds	r2, r3, #2
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e0a:	b29b      	uxth	r3, r3
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	b29a      	uxth	r2, r3
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006e14:	e018      	b.n	8006e48 <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006e16:	f7fd f9ab 	bl	8004170 <HAL_GetTick>
 8006e1a:	4602      	mov	r2, r0
 8006e1c:	69fb      	ldr	r3, [r7, #28]
 8006e1e:	1ad3      	subs	r3, r2, r3
 8006e20:	683a      	ldr	r2, [r7, #0]
 8006e22:	429a      	cmp	r2, r3
 8006e24:	d803      	bhi.n	8006e2e <HAL_SPI_Transmit+0x160>
 8006e26:	683b      	ldr	r3, [r7, #0]
 8006e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e2c:	d102      	bne.n	8006e34 <HAL_SPI_Transmit+0x166>
 8006e2e:	683b      	ldr	r3, [r7, #0]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d109      	bne.n	8006e48 <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	2201      	movs	r2, #1
 8006e38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e082      	b.n	8006f4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1c7      	bne.n	8006de2 <HAL_SPI_Transmit+0x114>
 8006e52:	e053      	b.n	8006efc <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e54:	68fb      	ldr	r3, [r7, #12]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d002      	beq.n	8006e62 <HAL_SPI_Transmit+0x194>
 8006e5c:	8b7b      	ldrh	r3, [r7, #26]
 8006e5e:	2b01      	cmp	r3, #1
 8006e60:	d147      	bne.n	8006ef2 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	330c      	adds	r3, #12
 8006e6c:	7812      	ldrb	r2, [r2, #0]
 8006e6e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e74:	1c5a      	adds	r2, r3, #1
 8006e76:	68fb      	ldr	r3, [r7, #12]
 8006e78:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006e7e:	b29b      	uxth	r3, r3
 8006e80:	3b01      	subs	r3, #1
 8006e82:	b29a      	uxth	r2, r3
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8006e88:	e033      	b.n	8006ef2 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	f003 0302 	and.w	r3, r3, #2
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d113      	bne.n	8006ec0 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8006e98:	68fb      	ldr	r3, [r7, #12]
 8006e9a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	681b      	ldr	r3, [r3, #0]
 8006ea0:	330c      	adds	r3, #12
 8006ea2:	7812      	ldrb	r2, [r2, #0]
 8006ea4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006eaa:	1c5a      	adds	r2, r3, #1
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006eb4:	b29b      	uxth	r3, r3
 8006eb6:	3b01      	subs	r3, #1
 8006eb8:	b29a      	uxth	r2, r3
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	86da      	strh	r2, [r3, #54]	@ 0x36
 8006ebe:	e018      	b.n	8006ef2 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ec0:	f7fd f956 	bl	8004170 <HAL_GetTick>
 8006ec4:	4602      	mov	r2, r0
 8006ec6:	69fb      	ldr	r3, [r7, #28]
 8006ec8:	1ad3      	subs	r3, r2, r3
 8006eca:	683a      	ldr	r2, [r7, #0]
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d803      	bhi.n	8006ed8 <HAL_SPI_Transmit+0x20a>
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ed6:	d102      	bne.n	8006ede <HAL_SPI_Transmit+0x210>
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	d109      	bne.n	8006ef2 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	2201      	movs	r2, #1
 8006ee2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	2200      	movs	r2, #0
 8006eea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8006eee:	2303      	movs	r3, #3
 8006ef0:	e02d      	b.n	8006f4e <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8006ef6:	b29b      	uxth	r3, r3
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1c6      	bne.n	8006e8a <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006efc:	69fa      	ldr	r2, [r7, #28]
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	68f8      	ldr	r0, [r7, #12]
 8006f02:	f000 fbd9 	bl	80076b8 <SPI_EndRxTxTransaction>
 8006f06:	4603      	mov	r3, r0
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d002      	beq.n	8006f12 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	2220      	movs	r2, #32
 8006f10:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10a      	bne.n	8006f30 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006f1a:	2300      	movs	r3, #0
 8006f1c:	617b      	str	r3, [r7, #20]
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	68db      	ldr	r3, [r3, #12]
 8006f24:	617b      	str	r3, [r7, #20]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	689b      	ldr	r3, [r3, #8]
 8006f2c:	617b      	str	r3, [r7, #20]
 8006f2e:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	2201      	movs	r2, #1
 8006f34:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006f38:	68fb      	ldr	r3, [r7, #12]
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d001      	beq.n	8006f4c <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8006f48:	2301      	movs	r3, #1
 8006f4a:	e000      	b.n	8006f4e <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8006f4c:	2300      	movs	r3, #0
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3720      	adds	r7, #32
 8006f52:	46bd      	mov	sp, r7
 8006f54:	bd80      	pop	{r7, pc}

08006f56 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006f56:	b580      	push	{r7, lr}
 8006f58:	b088      	sub	sp, #32
 8006f5a:	af02      	add	r7, sp, #8
 8006f5c:	60f8      	str	r0, [r7, #12]
 8006f5e:	60b9      	str	r1, [r7, #8]
 8006f60:	603b      	str	r3, [r7, #0]
 8006f62:	4613      	mov	r3, r2
 8006f64:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8006f6c:	b2db      	uxtb	r3, r3
 8006f6e:	2b01      	cmp	r3, #1
 8006f70:	d001      	beq.n	8006f76 <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8006f72:	2302      	movs	r3, #2
 8006f74:	e104      	b.n	8007180 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	685b      	ldr	r3, [r3, #4]
 8006f7a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006f7e:	d112      	bne.n	8006fa6 <HAL_SPI_Receive+0x50>
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	689b      	ldr	r3, [r3, #8]
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d10e      	bne.n	8006fa6 <HAL_SPI_Receive+0x50>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	2204      	movs	r2, #4
 8006f8c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f90:	88fa      	ldrh	r2, [r7, #6]
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	9300      	str	r3, [sp, #0]
 8006f96:	4613      	mov	r3, r2
 8006f98:	68ba      	ldr	r2, [r7, #8]
 8006f9a:	68b9      	ldr	r1, [r7, #8]
 8006f9c:	68f8      	ldr	r0, [r7, #12]
 8006f9e:	f000 f8f3 	bl	8007188 <HAL_SPI_TransmitReceive>
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	e0ec      	b.n	8007180 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8006fa6:	f7fd f8e3 	bl	8004170 <HAL_GetTick>
 8006faa:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8006fac:	68bb      	ldr	r3, [r7, #8]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d002      	beq.n	8006fb8 <HAL_SPI_Receive+0x62>
 8006fb2:	88fb      	ldrh	r3, [r7, #6]
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d101      	bne.n	8006fbc <HAL_SPI_Receive+0x66>
  {
    return HAL_ERROR;
 8006fb8:	2301      	movs	r3, #1
 8006fba:	e0e1      	b.n	8007180 <HAL_SPI_Receive+0x22a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8006fc2:	2b01      	cmp	r3, #1
 8006fc4:	d101      	bne.n	8006fca <HAL_SPI_Receive+0x74>
 8006fc6:	2302      	movs	r3, #2
 8006fc8:	e0da      	b.n	8007180 <HAL_SPI_Receive+0x22a>
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	2201      	movs	r2, #1
 8006fce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	2204      	movs	r2, #4
 8006fd6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
 8006fe2:	68ba      	ldr	r2, [r7, #8]
 8006fe4:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	88fa      	ldrh	r2, [r7, #6]
 8006fea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	88fa      	ldrh	r2, [r7, #6]
 8006ff0:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	2200      	movs	r2, #0
 8006ff6:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2200      	movs	r2, #0
 8006ffc:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	2200      	movs	r2, #0
 8007002:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	2200      	movs	r2, #0
 8007008:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	2200      	movs	r2, #0
 800700e:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	689b      	ldr	r3, [r3, #8]
 8007014:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007018:	d10f      	bne.n	800703a <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	68fb      	ldr	r3, [r7, #12]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007028:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800702a:	68fb      	ldr	r3, [r7, #12]
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	681a      	ldr	r2, [r3, #0]
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8007038:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007044:	2b40      	cmp	r3, #64	@ 0x40
 8007046:	d007      	beq.n	8007058 <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	681a      	ldr	r2, [r3, #0]
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007056:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8007058:	68fb      	ldr	r3, [r7, #12]
 800705a:	68db      	ldr	r3, [r3, #12]
 800705c:	2b00      	cmp	r3, #0
 800705e:	d170      	bne.n	8007142 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8007060:	e035      	b.n	80070ce <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	689b      	ldr	r3, [r3, #8]
 8007068:	f003 0301 	and.w	r3, r3, #1
 800706c:	2b01      	cmp	r3, #1
 800706e:	d115      	bne.n	800709c <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	681b      	ldr	r3, [r3, #0]
 8007074:	f103 020c 	add.w	r2, r3, #12
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800707c:	7812      	ldrb	r2, [r2, #0]
 800707e:	b2d2      	uxtb	r2, r2
 8007080:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007086:	1c5a      	adds	r2, r3, #1
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007090:	b29b      	uxth	r3, r3
 8007092:	3b01      	subs	r3, #1
 8007094:	b29a      	uxth	r2, r3
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800709a:	e018      	b.n	80070ce <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800709c:	f7fd f868 	bl	8004170 <HAL_GetTick>
 80070a0:	4602      	mov	r2, r0
 80070a2:	697b      	ldr	r3, [r7, #20]
 80070a4:	1ad3      	subs	r3, r2, r3
 80070a6:	683a      	ldr	r2, [r7, #0]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d803      	bhi.n	80070b4 <HAL_SPI_Receive+0x15e>
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80070b2:	d102      	bne.n	80070ba <HAL_SPI_Receive+0x164>
 80070b4:	683b      	ldr	r3, [r7, #0]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	d109      	bne.n	80070ce <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	2201      	movs	r2, #1
 80070be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	2200      	movs	r2, #0
 80070c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80070ca:	2303      	movs	r3, #3
 80070cc:	e058      	b.n	8007180 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80070d2:	b29b      	uxth	r3, r3
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d1c4      	bne.n	8007062 <HAL_SPI_Receive+0x10c>
 80070d8:	e038      	b.n	800714c <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	689b      	ldr	r3, [r3, #8]
 80070e0:	f003 0301 	and.w	r3, r3, #1
 80070e4:	2b01      	cmp	r3, #1
 80070e6:	d113      	bne.n	8007110 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	681b      	ldr	r3, [r3, #0]
 80070ec:	68da      	ldr	r2, [r3, #12]
 80070ee:	68fb      	ldr	r3, [r7, #12]
 80070f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070f2:	b292      	uxth	r2, r2
 80070f4:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80070fa:	1c9a      	adds	r2, r3, #2
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007104:	b29b      	uxth	r3, r3
 8007106:	3b01      	subs	r3, #1
 8007108:	b29a      	uxth	r2, r3
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800710e:	e018      	b.n	8007142 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8007110:	f7fd f82e 	bl	8004170 <HAL_GetTick>
 8007114:	4602      	mov	r2, r0
 8007116:	697b      	ldr	r3, [r7, #20]
 8007118:	1ad3      	subs	r3, r2, r3
 800711a:	683a      	ldr	r2, [r7, #0]
 800711c:	429a      	cmp	r2, r3
 800711e:	d803      	bhi.n	8007128 <HAL_SPI_Receive+0x1d2>
 8007120:	683b      	ldr	r3, [r7, #0]
 8007122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007126:	d102      	bne.n	800712e <HAL_SPI_Receive+0x1d8>
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d109      	bne.n	8007142 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	2201      	movs	r2, #1
 8007132:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	2200      	movs	r2, #0
 800713a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 800713e:	2303      	movs	r3, #3
 8007140:	e01e      	b.n	8007180 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007146:	b29b      	uxth	r3, r3
 8007148:	2b00      	cmp	r3, #0
 800714a:	d1c6      	bne.n	80070da <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800714c:	697a      	ldr	r2, [r7, #20]
 800714e:	6839      	ldr	r1, [r7, #0]
 8007150:	68f8      	ldr	r0, [r7, #12]
 8007152:	f000 fa4b 	bl	80075ec <SPI_EndRxTransaction>
 8007156:	4603      	mov	r3, r0
 8007158:	2b00      	cmp	r3, #0
 800715a:	d002      	beq.n	8007162 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	2220      	movs	r2, #32
 8007160:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8007162:	68fb      	ldr	r3, [r7, #12]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	2200      	movs	r2, #0
 800716e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8007172:	68fb      	ldr	r3, [r7, #12]
 8007174:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007176:	2b00      	cmp	r3, #0
 8007178:	d001      	beq.n	800717e <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800717a:	2301      	movs	r3, #1
 800717c:	e000      	b.n	8007180 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 800717e:	2300      	movs	r3, #0
  }
}
 8007180:	4618      	mov	r0, r3
 8007182:	3718      	adds	r7, #24
 8007184:	46bd      	mov	sp, r7
 8007186:	bd80      	pop	{r7, pc}

08007188 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007188:	b580      	push	{r7, lr}
 800718a:	b08a      	sub	sp, #40	@ 0x28
 800718c:	af00      	add	r7, sp, #0
 800718e:	60f8      	str	r0, [r7, #12]
 8007190:	60b9      	str	r1, [r7, #8]
 8007192:	607a      	str	r2, [r7, #4]
 8007194:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8007196:	2301      	movs	r3, #1
 8007198:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800719a:	f7fc ffe9 	bl	8004170 <HAL_GetTick>
 800719e:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80071a6:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	685b      	ldr	r3, [r3, #4]
 80071ac:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80071ae:	887b      	ldrh	r3, [r7, #2]
 80071b0:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80071b2:	7ffb      	ldrb	r3, [r7, #31]
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d00c      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x4a>
 80071b8:	69bb      	ldr	r3, [r7, #24]
 80071ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80071be:	d106      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	689b      	ldr	r3, [r3, #8]
 80071c4:	2b00      	cmp	r3, #0
 80071c6:	d102      	bne.n	80071ce <HAL_SPI_TransmitReceive+0x46>
 80071c8:	7ffb      	ldrb	r3, [r7, #31]
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d001      	beq.n	80071d2 <HAL_SPI_TransmitReceive+0x4a>
  {
    return HAL_BUSY;
 80071ce:	2302      	movs	r3, #2
 80071d0:	e17f      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	2b00      	cmp	r3, #0
 80071d6:	d005      	beq.n	80071e4 <HAL_SPI_TransmitReceive+0x5c>
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2b00      	cmp	r3, #0
 80071dc:	d002      	beq.n	80071e4 <HAL_SPI_TransmitReceive+0x5c>
 80071de:	887b      	ldrh	r3, [r7, #2]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d101      	bne.n	80071e8 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80071e4:	2301      	movs	r3, #1
 80071e6:	e174      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80071e8:	68fb      	ldr	r3, [r7, #12]
 80071ea:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80071ee:	2b01      	cmp	r3, #1
 80071f0:	d101      	bne.n	80071f6 <HAL_SPI_TransmitReceive+0x6e>
 80071f2:	2302      	movs	r3, #2
 80071f4:	e16d      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	2201      	movs	r2, #1
 80071fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b04      	cmp	r3, #4
 8007208:	d003      	beq.n	8007212 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	2205      	movs	r2, #5
 800720e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	2200      	movs	r2, #0
 8007216:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	687a      	ldr	r2, [r7, #4]
 800721c:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	887a      	ldrh	r2, [r7, #2]
 8007222:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	887a      	ldrh	r2, [r7, #2]
 8007228:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	68ba      	ldr	r2, [r7, #8]
 800722e:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	887a      	ldrh	r2, [r7, #2]
 8007234:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8007236:	68fb      	ldr	r3, [r7, #12]
 8007238:	887a      	ldrh	r2, [r7, #2]
 800723a:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	2200      	movs	r2, #0
 8007240:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	2200      	movs	r2, #0
 8007246:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8007248:	68fb      	ldr	r3, [r7, #12]
 800724a:	681b      	ldr	r3, [r3, #0]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007252:	2b40      	cmp	r3, #64	@ 0x40
 8007254:	d007      	beq.n	8007266 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	681a      	ldr	r2, [r3, #0]
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007264:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	68db      	ldr	r3, [r3, #12]
 800726a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800726e:	d17e      	bne.n	800736e <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	685b      	ldr	r3, [r3, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d002      	beq.n	800727e <HAL_SPI_TransmitReceive+0xf6>
 8007278:	8afb      	ldrh	r3, [r7, #22]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d16c      	bne.n	8007358 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007282:	881a      	ldrh	r2, [r3, #0]
 8007284:	68fb      	ldr	r3, [r7, #12]
 8007286:	681b      	ldr	r3, [r3, #0]
 8007288:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800728a:	68fb      	ldr	r3, [r7, #12]
 800728c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800728e:	1c9a      	adds	r2, r3, #2
 8007290:	68fb      	ldr	r3, [r7, #12]
 8007292:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007294:	68fb      	ldr	r3, [r7, #12]
 8007296:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007298:	b29b      	uxth	r3, r3
 800729a:	3b01      	subs	r3, #1
 800729c:	b29a      	uxth	r2, r3
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80072a2:	e059      	b.n	8007358 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0302 	and.w	r3, r3, #2
 80072ae:	2b02      	cmp	r3, #2
 80072b0:	d11b      	bne.n	80072ea <HAL_SPI_TransmitReceive+0x162>
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072b6:	b29b      	uxth	r3, r3
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d016      	beq.n	80072ea <HAL_SPI_TransmitReceive+0x162>
 80072bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d113      	bne.n	80072ea <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80072c2:	68fb      	ldr	r3, [r7, #12]
 80072c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072c6:	881a      	ldrh	r2, [r3, #0]
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80072d2:	1c9a      	adds	r2, r3, #2
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80072d8:	68fb      	ldr	r3, [r7, #12]
 80072da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80072dc:	b29b      	uxth	r3, r3
 80072de:	3b01      	subs	r3, #1
 80072e0:	b29a      	uxth	r2, r3
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80072e6:	2300      	movs	r3, #0
 80072e8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	689b      	ldr	r3, [r3, #8]
 80072f0:	f003 0301 	and.w	r3, r3, #1
 80072f4:	2b01      	cmp	r3, #1
 80072f6:	d119      	bne.n	800732c <HAL_SPI_TransmitReceive+0x1a4>
 80072f8:	68fb      	ldr	r3, [r7, #12]
 80072fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80072fc:	b29b      	uxth	r3, r3
 80072fe:	2b00      	cmp	r3, #0
 8007300:	d014      	beq.n	800732c <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	68da      	ldr	r2, [r3, #12]
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800730c:	b292      	uxth	r2, r2
 800730e:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007314:	1c9a      	adds	r2, r3, #2
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800731e:	b29b      	uxth	r3, r3
 8007320:	3b01      	subs	r3, #1
 8007322:	b29a      	uxth	r2, r3
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8007328:	2301      	movs	r3, #1
 800732a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800732c:	f7fc ff20 	bl	8004170 <HAL_GetTick>
 8007330:	4602      	mov	r2, r0
 8007332:	6a3b      	ldr	r3, [r7, #32]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007338:	429a      	cmp	r2, r3
 800733a:	d80d      	bhi.n	8007358 <HAL_SPI_TransmitReceive+0x1d0>
 800733c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800733e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007342:	d009      	beq.n	8007358 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	2201      	movs	r2, #1
 8007348:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	2200      	movs	r2, #0
 8007350:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8007354:	2303      	movs	r3, #3
 8007356:	e0bc      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800735c:	b29b      	uxth	r3, r3
 800735e:	2b00      	cmp	r3, #0
 8007360:	d1a0      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x11c>
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007366:	b29b      	uxth	r3, r3
 8007368:	2b00      	cmp	r3, #0
 800736a:	d19b      	bne.n	80072a4 <HAL_SPI_TransmitReceive+0x11c>
 800736c:	e082      	b.n	8007474 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d002      	beq.n	800737c <HAL_SPI_TransmitReceive+0x1f4>
 8007376:	8afb      	ldrh	r3, [r7, #22]
 8007378:	2b01      	cmp	r3, #1
 800737a:	d171      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800737c:	68fb      	ldr	r3, [r7, #12]
 800737e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	330c      	adds	r3, #12
 8007386:	7812      	ldrb	r2, [r2, #0]
 8007388:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800738e:	1c5a      	adds	r2, r3, #1
 8007390:	68fb      	ldr	r3, [r7, #12]
 8007392:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007398:	b29b      	uxth	r3, r3
 800739a:	3b01      	subs	r3, #1
 800739c:	b29a      	uxth	r2, r3
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80073a2:	e05d      	b.n	8007460 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	f003 0302 	and.w	r3, r3, #2
 80073ae:	2b02      	cmp	r3, #2
 80073b0:	d11c      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x264>
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d017      	beq.n	80073ec <HAL_SPI_TransmitReceive+0x264>
 80073bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073be:	2b01      	cmp	r3, #1
 80073c0:	d114      	bne.n	80073ec <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	330c      	adds	r3, #12
 80073cc:	7812      	ldrb	r2, [r2, #0]
 80073ce:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80073d4:	1c5a      	adds	r2, r3, #1
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80073da:	68fb      	ldr	r3, [r7, #12]
 80073dc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80073de:	b29b      	uxth	r3, r3
 80073e0:	3b01      	subs	r3, #1
 80073e2:	b29a      	uxth	r2, r3
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	f003 0301 	and.w	r3, r3, #1
 80073f6:	2b01      	cmp	r3, #1
 80073f8:	d119      	bne.n	800742e <HAL_SPI_TransmitReceive+0x2a6>
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80073fe:	b29b      	uxth	r3, r3
 8007400:	2b00      	cmp	r3, #0
 8007402:	d014      	beq.n	800742e <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	68da      	ldr	r2, [r3, #12]
 800740a:	68fb      	ldr	r3, [r7, #12]
 800740c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800740e:	b2d2      	uxtb	r2, r2
 8007410:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8007412:	68fb      	ldr	r3, [r7, #12]
 8007414:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007416:	1c5a      	adds	r2, r3, #1
 8007418:	68fb      	ldr	r3, [r7, #12]
 800741a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8007420:	b29b      	uxth	r3, r3
 8007422:	3b01      	subs	r3, #1
 8007424:	b29a      	uxth	r2, r3
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800742a:	2301      	movs	r3, #1
 800742c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800742e:	f7fc fe9f 	bl	8004170 <HAL_GetTick>
 8007432:	4602      	mov	r2, r0
 8007434:	6a3b      	ldr	r3, [r7, #32]
 8007436:	1ad3      	subs	r3, r2, r3
 8007438:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800743a:	429a      	cmp	r2, r3
 800743c:	d803      	bhi.n	8007446 <HAL_SPI_TransmitReceive+0x2be>
 800743e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007440:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007444:	d102      	bne.n	800744c <HAL_SPI_TransmitReceive+0x2c4>
 8007446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007448:	2b00      	cmp	r3, #0
 800744a:	d109      	bne.n	8007460 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8007454:	68fb      	ldr	r3, [r7, #12]
 8007456:	2200      	movs	r2, #0
 8007458:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800745c:	2303      	movs	r3, #3
 800745e:	e038      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8007464:	b29b      	uxth	r3, r3
 8007466:	2b00      	cmp	r3, #0
 8007468:	d19c      	bne.n	80073a4 <HAL_SPI_TransmitReceive+0x21c>
 800746a:	68fb      	ldr	r3, [r7, #12]
 800746c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800746e:	b29b      	uxth	r3, r3
 8007470:	2b00      	cmp	r3, #0
 8007472:	d197      	bne.n	80073a4 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8007474:	6a3a      	ldr	r2, [r7, #32]
 8007476:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8007478:	68f8      	ldr	r0, [r7, #12]
 800747a:	f000 f91d 	bl	80076b8 <SPI_EndRxTxTransaction>
 800747e:	4603      	mov	r3, r0
 8007480:	2b00      	cmp	r3, #0
 8007482:	d008      	beq.n	8007496 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	2220      	movs	r2, #32
 8007488:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	2200      	movs	r2, #0
 800748e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8007492:	2301      	movs	r3, #1
 8007494:	e01d      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8007496:	68fb      	ldr	r3, [r7, #12]
 8007498:	689b      	ldr	r3, [r3, #8]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800749e:	2300      	movs	r3, #0
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	68db      	ldr	r3, [r3, #12]
 80074a8:	613b      	str	r3, [r7, #16]
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	681b      	ldr	r3, [r3, #0]
 80074ae:	689b      	ldr	r3, [r3, #8]
 80074b0:	613b      	str	r3, [r7, #16]
 80074b2:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	2201      	movs	r2, #1
 80074b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	2200      	movs	r2, #0
 80074c0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80074c8:	2b00      	cmp	r3, #0
 80074ca:	d001      	beq.n	80074d0 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80074cc:	2301      	movs	r3, #1
 80074ce:	e000      	b.n	80074d2 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80074d0:	2300      	movs	r3, #0
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3728      	adds	r7, #40	@ 0x28
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	b088      	sub	sp, #32
 80074e0:	af00      	add	r7, sp, #0
 80074e2:	60f8      	str	r0, [r7, #12]
 80074e4:	60b9      	str	r1, [r7, #8]
 80074e6:	603b      	str	r3, [r7, #0]
 80074e8:	4613      	mov	r3, r2
 80074ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80074ec:	f7fc fe40 	bl	8004170 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	683a      	ldr	r2, [r7, #0]
 80074f8:	4413      	add	r3, r2
 80074fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80074fc:	f7fc fe38 	bl	8004170 <HAL_GetTick>
 8007500:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8007502:	4b39      	ldr	r3, [pc, #228]	@ (80075e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	015b      	lsls	r3, r3, #5
 8007508:	0d1b      	lsrs	r3, r3, #20
 800750a:	69fa      	ldr	r2, [r7, #28]
 800750c:	fb02 f303 	mul.w	r3, r2, r3
 8007510:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8007512:	e054      	b.n	80075be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8007514:	683b      	ldr	r3, [r7, #0]
 8007516:	f1b3 3fff 	cmp.w	r3, #4294967295
 800751a:	d050      	beq.n	80075be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800751c:	f7fc fe28 	bl	8004170 <HAL_GetTick>
 8007520:	4602      	mov	r2, r0
 8007522:	69bb      	ldr	r3, [r7, #24]
 8007524:	1ad3      	subs	r3, r2, r3
 8007526:	69fa      	ldr	r2, [r7, #28]
 8007528:	429a      	cmp	r2, r3
 800752a:	d902      	bls.n	8007532 <SPI_WaitFlagStateUntilTimeout+0x56>
 800752c:	69fb      	ldr	r3, [r7, #28]
 800752e:	2b00      	cmp	r3, #0
 8007530:	d13d      	bne.n	80075ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8007540:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	685b      	ldr	r3, [r3, #4]
 8007546:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800754a:	d111      	bne.n	8007570 <SPI_WaitFlagStateUntilTimeout+0x94>
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	689b      	ldr	r3, [r3, #8]
 8007550:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007554:	d004      	beq.n	8007560 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	689b      	ldr	r3, [r3, #8]
 800755a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800755e:	d107      	bne.n	8007570 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	681a      	ldr	r2, [r3, #0]
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800756e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007574:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007578:	d10f      	bne.n	800759a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	681a      	ldr	r2, [r3, #0]
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007588:	601a      	str	r2, [r3, #0]
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	681a      	ldr	r2, [r3, #0]
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	681b      	ldr	r3, [r3, #0]
 8007594:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007598:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	2201      	movs	r2, #1
 800759e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	2200      	movs	r2, #0
 80075a6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80075aa:	2303      	movs	r3, #3
 80075ac:	e017      	b.n	80075de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80075ae:	697b      	ldr	r3, [r7, #20]
 80075b0:	2b00      	cmp	r3, #0
 80075b2:	d101      	bne.n	80075b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80075b4:	2300      	movs	r3, #0
 80075b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80075b8:	697b      	ldr	r3, [r7, #20]
 80075ba:	3b01      	subs	r3, #1
 80075bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	689a      	ldr	r2, [r3, #8]
 80075c4:	68bb      	ldr	r3, [r7, #8]
 80075c6:	4013      	ands	r3, r2
 80075c8:	68ba      	ldr	r2, [r7, #8]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	bf0c      	ite	eq
 80075ce:	2301      	moveq	r3, #1
 80075d0:	2300      	movne	r3, #0
 80075d2:	b2db      	uxtb	r3, r3
 80075d4:	461a      	mov	r2, r3
 80075d6:	79fb      	ldrb	r3, [r7, #7]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d19b      	bne.n	8007514 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80075dc:	2300      	movs	r3, #0
}
 80075de:	4618      	mov	r0, r3
 80075e0:	3720      	adds	r7, #32
 80075e2:	46bd      	mov	sp, r7
 80075e4:	bd80      	pop	{r7, pc}
 80075e6:	bf00      	nop
 80075e8:	2000001c 	.word	0x2000001c

080075ec <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b086      	sub	sp, #24
 80075f0:	af02      	add	r7, sp, #8
 80075f2:	60f8      	str	r0, [r7, #12]
 80075f4:	60b9      	str	r1, [r7, #8]
 80075f6:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007600:	d111      	bne.n	8007626 <SPI_EndRxTransaction+0x3a>
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	689b      	ldr	r3, [r3, #8]
 8007606:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800760a:	d004      	beq.n	8007616 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800760c:	68fb      	ldr	r3, [r7, #12]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007614:	d107      	bne.n	8007626 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	681a      	ldr	r2, [r3, #0]
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8007624:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	685b      	ldr	r3, [r3, #4]
 800762a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800762e:	d12a      	bne.n	8007686 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007638:	d012      	beq.n	8007660 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	68bb      	ldr	r3, [r7, #8]
 8007640:	2200      	movs	r2, #0
 8007642:	2180      	movs	r1, #128	@ 0x80
 8007644:	68f8      	ldr	r0, [r7, #12]
 8007646:	f7ff ff49 	bl	80074dc <SPI_WaitFlagStateUntilTimeout>
 800764a:	4603      	mov	r3, r0
 800764c:	2b00      	cmp	r3, #0
 800764e:	d02d      	beq.n	80076ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007654:	f043 0220 	orr.w	r2, r3, #32
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800765c:	2303      	movs	r3, #3
 800765e:	e026      	b.n	80076ae <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	9300      	str	r3, [sp, #0]
 8007664:	68bb      	ldr	r3, [r7, #8]
 8007666:	2200      	movs	r2, #0
 8007668:	2101      	movs	r1, #1
 800766a:	68f8      	ldr	r0, [r7, #12]
 800766c:	f7ff ff36 	bl	80074dc <SPI_WaitFlagStateUntilTimeout>
 8007670:	4603      	mov	r3, r0
 8007672:	2b00      	cmp	r3, #0
 8007674:	d01a      	beq.n	80076ac <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800767a:	f043 0220 	orr.w	r2, r3, #32
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8007682:	2303      	movs	r3, #3
 8007684:	e013      	b.n	80076ae <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	9300      	str	r3, [sp, #0]
 800768a:	68bb      	ldr	r3, [r7, #8]
 800768c:	2200      	movs	r2, #0
 800768e:	2101      	movs	r1, #1
 8007690:	68f8      	ldr	r0, [r7, #12]
 8007692:	f7ff ff23 	bl	80074dc <SPI_WaitFlagStateUntilTimeout>
 8007696:	4603      	mov	r3, r0
 8007698:	2b00      	cmp	r3, #0
 800769a:	d007      	beq.n	80076ac <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076a0:	f043 0220 	orr.w	r2, r3, #32
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80076a8:	2303      	movs	r3, #3
 80076aa:	e000      	b.n	80076ae <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80076ac:	2300      	movs	r3, #0
}
 80076ae:	4618      	mov	r0, r3
 80076b0:	3710      	adds	r7, #16
 80076b2:	46bd      	mov	sp, r7
 80076b4:	bd80      	pop	{r7, pc}
	...

080076b8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80076b8:	b580      	push	{r7, lr}
 80076ba:	b088      	sub	sp, #32
 80076bc:	af02      	add	r7, sp, #8
 80076be:	60f8      	str	r0, [r7, #12]
 80076c0:	60b9      	str	r1, [r7, #8]
 80076c2:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80076c4:	687b      	ldr	r3, [r7, #4]
 80076c6:	9300      	str	r3, [sp, #0]
 80076c8:	68bb      	ldr	r3, [r7, #8]
 80076ca:	2201      	movs	r2, #1
 80076cc:	2102      	movs	r1, #2
 80076ce:	68f8      	ldr	r0, [r7, #12]
 80076d0:	f7ff ff04 	bl	80074dc <SPI_WaitFlagStateUntilTimeout>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d007      	beq.n	80076ea <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80076de:	f043 0220 	orr.w	r2, r3, #32
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80076e6:	2303      	movs	r3, #3
 80076e8:	e032      	b.n	8007750 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80076ea:	4b1b      	ldr	r3, [pc, #108]	@ (8007758 <SPI_EndRxTxTransaction+0xa0>)
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	4a1b      	ldr	r2, [pc, #108]	@ (800775c <SPI_EndRxTxTransaction+0xa4>)
 80076f0:	fba2 2303 	umull	r2, r3, r2, r3
 80076f4:	0d5b      	lsrs	r3, r3, #21
 80076f6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80076fa:	fb02 f303 	mul.w	r3, r2, r3
 80076fe:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	685b      	ldr	r3, [r3, #4]
 8007704:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8007708:	d112      	bne.n	8007730 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	9300      	str	r3, [sp, #0]
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	2200      	movs	r2, #0
 8007712:	2180      	movs	r1, #128	@ 0x80
 8007714:	68f8      	ldr	r0, [r7, #12]
 8007716:	f7ff fee1 	bl	80074dc <SPI_WaitFlagStateUntilTimeout>
 800771a:	4603      	mov	r3, r0
 800771c:	2b00      	cmp	r3, #0
 800771e:	d016      	beq.n	800774e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007724:	f043 0220 	orr.w	r2, r3, #32
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e00f      	b.n	8007750 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8007730:	697b      	ldr	r3, [r7, #20]
 8007732:	2b00      	cmp	r3, #0
 8007734:	d00a      	beq.n	800774c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8007736:	697b      	ldr	r3, [r7, #20]
 8007738:	3b01      	subs	r3, #1
 800773a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	689b      	ldr	r3, [r3, #8]
 8007742:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007746:	2b80      	cmp	r3, #128	@ 0x80
 8007748:	d0f2      	beq.n	8007730 <SPI_EndRxTxTransaction+0x78>
 800774a:	e000      	b.n	800774e <SPI_EndRxTxTransaction+0x96>
        break;
 800774c:	bf00      	nop
  }

  return HAL_OK;
 800774e:	2300      	movs	r3, #0
}
 8007750:	4618      	mov	r0, r3
 8007752:	3718      	adds	r7, #24
 8007754:	46bd      	mov	sp, r7
 8007756:	bd80      	pop	{r7, pc}
 8007758:	2000001c 	.word	0x2000001c
 800775c:	165e9f81 	.word	0x165e9f81

08007760 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b082      	sub	sp, #8
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2b00      	cmp	r3, #0
 800776c:	d101      	bne.n	8007772 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e041      	b.n	80077f6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007778:	b2db      	uxtb	r3, r3
 800777a:	2b00      	cmp	r3, #0
 800777c:	d106      	bne.n	800778c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	2200      	movs	r2, #0
 8007782:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f7fc fa88 	bl	8003c9c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2202      	movs	r2, #2
 8007790:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	681a      	ldr	r2, [r3, #0]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	3304      	adds	r3, #4
 800779c:	4619      	mov	r1, r3
 800779e:	4610      	mov	r0, r2
 80077a0:	f000 fcca 	bl	8008138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	2201      	movs	r2, #1
 80077a8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	2201      	movs	r2, #1
 80077b0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	2201      	movs	r2, #1
 80077b8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	2201      	movs	r2, #1
 80077c0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	2201      	movs	r2, #1
 80077c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	2201      	movs	r2, #1
 80077d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2201      	movs	r2, #1
 80077d8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	2201      	movs	r2, #1
 80077e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	2201      	movs	r2, #1
 80077e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80077f4:	2300      	movs	r3, #0
}
 80077f6:	4618      	mov	r0, r3
 80077f8:	3708      	adds	r7, #8
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
	...

08007800 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800780e:	b2db      	uxtb	r3, r3
 8007810:	2b01      	cmp	r3, #1
 8007812:	d001      	beq.n	8007818 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007814:	2301      	movs	r3, #1
 8007816:	e046      	b.n	80078a6 <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2202      	movs	r2, #2
 800781c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	4a23      	ldr	r2, [pc, #140]	@ (80078b4 <HAL_TIM_Base_Start+0xb4>)
 8007826:	4293      	cmp	r3, r2
 8007828:	d022      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007832:	d01d      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	4a1f      	ldr	r2, [pc, #124]	@ (80078b8 <HAL_TIM_Base_Start+0xb8>)
 800783a:	4293      	cmp	r3, r2
 800783c:	d018      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	4a1e      	ldr	r2, [pc, #120]	@ (80078bc <HAL_TIM_Base_Start+0xbc>)
 8007844:	4293      	cmp	r3, r2
 8007846:	d013      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	4a1c      	ldr	r2, [pc, #112]	@ (80078c0 <HAL_TIM_Base_Start+0xc0>)
 800784e:	4293      	cmp	r3, r2
 8007850:	d00e      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	4a1b      	ldr	r2, [pc, #108]	@ (80078c4 <HAL_TIM_Base_Start+0xc4>)
 8007858:	4293      	cmp	r3, r2
 800785a:	d009      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	4a19      	ldr	r2, [pc, #100]	@ (80078c8 <HAL_TIM_Base_Start+0xc8>)
 8007862:	4293      	cmp	r3, r2
 8007864:	d004      	beq.n	8007870 <HAL_TIM_Base_Start+0x70>
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	4a18      	ldr	r2, [pc, #96]	@ (80078cc <HAL_TIM_Base_Start+0xcc>)
 800786c:	4293      	cmp	r3, r2
 800786e:	d111      	bne.n	8007894 <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	689b      	ldr	r3, [r3, #8]
 8007876:	f003 0307 	and.w	r3, r3, #7
 800787a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	2b06      	cmp	r3, #6
 8007880:	d010      	beq.n	80078a4 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8007882:	687b      	ldr	r3, [r7, #4]
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	f042 0201 	orr.w	r2, r2, #1
 8007890:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007892:	e007      	b.n	80078a4 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	681a      	ldr	r2, [r3, #0]
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f042 0201 	orr.w	r2, r2, #1
 80078a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80078a4:	2300      	movs	r3, #0
}
 80078a6:	4618      	mov	r0, r3
 80078a8:	3714      	adds	r7, #20
 80078aa:	46bd      	mov	sp, r7
 80078ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b0:	4770      	bx	lr
 80078b2:	bf00      	nop
 80078b4:	40010000 	.word	0x40010000
 80078b8:	40000400 	.word	0x40000400
 80078bc:	40000800 	.word	0x40000800
 80078c0:	40000c00 	.word	0x40000c00
 80078c4:	40010400 	.word	0x40010400
 80078c8:	40014000 	.word	0x40014000
 80078cc:	40001800 	.word	0x40001800

080078d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b085      	sub	sp, #20
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80078de:	b2db      	uxtb	r3, r3
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d001      	beq.n	80078e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80078e4:	2301      	movs	r3, #1
 80078e6:	e04e      	b.n	8007986 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	2202      	movs	r2, #2
 80078ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	68da      	ldr	r2, [r3, #12]
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	f042 0201 	orr.w	r2, r2, #1
 80078fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	4a23      	ldr	r2, [pc, #140]	@ (8007994 <HAL_TIM_Base_Start_IT+0xc4>)
 8007906:	4293      	cmp	r3, r2
 8007908:	d022      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007912:	d01d      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	4a1f      	ldr	r2, [pc, #124]	@ (8007998 <HAL_TIM_Base_Start_IT+0xc8>)
 800791a:	4293      	cmp	r3, r2
 800791c:	d018      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	4a1e      	ldr	r2, [pc, #120]	@ (800799c <HAL_TIM_Base_Start_IT+0xcc>)
 8007924:	4293      	cmp	r3, r2
 8007926:	d013      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007928:	687b      	ldr	r3, [r7, #4]
 800792a:	681b      	ldr	r3, [r3, #0]
 800792c:	4a1c      	ldr	r2, [pc, #112]	@ (80079a0 <HAL_TIM_Base_Start_IT+0xd0>)
 800792e:	4293      	cmp	r3, r2
 8007930:	d00e      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	681b      	ldr	r3, [r3, #0]
 8007936:	4a1b      	ldr	r2, [pc, #108]	@ (80079a4 <HAL_TIM_Base_Start_IT+0xd4>)
 8007938:	4293      	cmp	r3, r2
 800793a:	d009      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	681b      	ldr	r3, [r3, #0]
 8007940:	4a19      	ldr	r2, [pc, #100]	@ (80079a8 <HAL_TIM_Base_Start_IT+0xd8>)
 8007942:	4293      	cmp	r3, r2
 8007944:	d004      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x80>
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	4a18      	ldr	r2, [pc, #96]	@ (80079ac <HAL_TIM_Base_Start_IT+0xdc>)
 800794c:	4293      	cmp	r3, r2
 800794e:	d111      	bne.n	8007974 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	689b      	ldr	r3, [r3, #8]
 8007956:	f003 0307 	and.w	r3, r3, #7
 800795a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800795c:	68fb      	ldr	r3, [r7, #12]
 800795e:	2b06      	cmp	r3, #6
 8007960:	d010      	beq.n	8007984 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 0201 	orr.w	r2, r2, #1
 8007970:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007972:	e007      	b.n	8007984 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f042 0201 	orr.w	r2, r2, #1
 8007982:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007984:	2300      	movs	r3, #0
}
 8007986:	4618      	mov	r0, r3
 8007988:	3714      	adds	r7, #20
 800798a:	46bd      	mov	sp, r7
 800798c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007990:	4770      	bx	lr
 8007992:	bf00      	nop
 8007994:	40010000 	.word	0x40010000
 8007998:	40000400 	.word	0x40000400
 800799c:	40000800 	.word	0x40000800
 80079a0:	40000c00 	.word	0x40000c00
 80079a4:	40010400 	.word	0x40010400
 80079a8:	40014000 	.word	0x40014000
 80079ac:	40001800 	.word	0x40001800

080079b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b082      	sub	sp, #8
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d101      	bne.n	80079c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80079be:	2301      	movs	r3, #1
 80079c0:	e041      	b.n	8007a46 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80079c8:	b2db      	uxtb	r3, r3
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d106      	bne.n	80079dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	2200      	movs	r2, #0
 80079d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80079d6:	6878      	ldr	r0, [r7, #4]
 80079d8:	f000 f839 	bl	8007a4e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2202      	movs	r2, #2
 80079e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681a      	ldr	r2, [r3, #0]
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	3304      	adds	r3, #4
 80079ec:	4619      	mov	r1, r3
 80079ee:	4610      	mov	r0, r2
 80079f0:	f000 fba2 	bl	8008138 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	2201      	movs	r2, #1
 80079f8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	2201      	movs	r2, #1
 8007a00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2201      	movs	r2, #1
 8007a08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2201      	movs	r2, #1
 8007a10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2201      	movs	r2, #1
 8007a18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2201      	movs	r2, #1
 8007a28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	2201      	movs	r2, #1
 8007a30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	2201      	movs	r2, #1
 8007a38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	2201      	movs	r2, #1
 8007a40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8007a44:	2300      	movs	r3, #0
}
 8007a46:	4618      	mov	r0, r3
 8007a48:	3708      	adds	r7, #8
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}

08007a4e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8007a4e:	b480      	push	{r7}
 8007a50:	b083      	sub	sp, #12
 8007a52:	af00      	add	r7, sp, #0
 8007a54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007a56:	bf00      	nop
 8007a58:	370c      	adds	r7, #12
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a60:	4770      	bx	lr
	...

08007a64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007a64:	b580      	push	{r7, lr}
 8007a66:	b084      	sub	sp, #16
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	6078      	str	r0, [r7, #4]
 8007a6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d109      	bne.n	8007a88 <HAL_TIM_PWM_Start+0x24>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007a7a:	b2db      	uxtb	r3, r3
 8007a7c:	2b01      	cmp	r3, #1
 8007a7e:	bf14      	ite	ne
 8007a80:	2301      	movne	r3, #1
 8007a82:	2300      	moveq	r3, #0
 8007a84:	b2db      	uxtb	r3, r3
 8007a86:	e022      	b.n	8007ace <HAL_TIM_PWM_Start+0x6a>
 8007a88:	683b      	ldr	r3, [r7, #0]
 8007a8a:	2b04      	cmp	r3, #4
 8007a8c:	d109      	bne.n	8007aa2 <HAL_TIM_PWM_Start+0x3e>
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	bf14      	ite	ne
 8007a9a:	2301      	movne	r3, #1
 8007a9c:	2300      	moveq	r3, #0
 8007a9e:	b2db      	uxtb	r3, r3
 8007aa0:	e015      	b.n	8007ace <HAL_TIM_PWM_Start+0x6a>
 8007aa2:	683b      	ldr	r3, [r7, #0]
 8007aa4:	2b08      	cmp	r3, #8
 8007aa6:	d109      	bne.n	8007abc <HAL_TIM_PWM_Start+0x58>
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8007aae:	b2db      	uxtb	r3, r3
 8007ab0:	2b01      	cmp	r3, #1
 8007ab2:	bf14      	ite	ne
 8007ab4:	2301      	movne	r3, #1
 8007ab6:	2300      	moveq	r3, #0
 8007ab8:	b2db      	uxtb	r3, r3
 8007aba:	e008      	b.n	8007ace <HAL_TIM_PWM_Start+0x6a>
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007ac2:	b2db      	uxtb	r3, r3
 8007ac4:	2b01      	cmp	r3, #1
 8007ac6:	bf14      	ite	ne
 8007ac8:	2301      	movne	r3, #1
 8007aca:	2300      	moveq	r3, #0
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	2b00      	cmp	r3, #0
 8007ad0:	d001      	beq.n	8007ad6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8007ad2:	2301      	movs	r3, #1
 8007ad4:	e07c      	b.n	8007bd0 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d104      	bne.n	8007ae6 <HAL_TIM_PWM_Start+0x82>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2202      	movs	r2, #2
 8007ae0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8007ae4:	e013      	b.n	8007b0e <HAL_TIM_PWM_Start+0xaa>
 8007ae6:	683b      	ldr	r3, [r7, #0]
 8007ae8:	2b04      	cmp	r3, #4
 8007aea:	d104      	bne.n	8007af6 <HAL_TIM_PWM_Start+0x92>
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2202      	movs	r2, #2
 8007af0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8007af4:	e00b      	b.n	8007b0e <HAL_TIM_PWM_Start+0xaa>
 8007af6:	683b      	ldr	r3, [r7, #0]
 8007af8:	2b08      	cmp	r3, #8
 8007afa:	d104      	bne.n	8007b06 <HAL_TIM_PWM_Start+0xa2>
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2202      	movs	r2, #2
 8007b00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8007b04:	e003      	b.n	8007b0e <HAL_TIM_PWM_Start+0xaa>
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	2202      	movs	r2, #2
 8007b0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2201      	movs	r2, #1
 8007b14:	6839      	ldr	r1, [r7, #0]
 8007b16:	4618      	mov	r0, r3
 8007b18:	f000 fe04 	bl	8008724 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	4a2d      	ldr	r2, [pc, #180]	@ (8007bd8 <HAL_TIM_PWM_Start+0x174>)
 8007b22:	4293      	cmp	r3, r2
 8007b24:	d004      	beq.n	8007b30 <HAL_TIM_PWM_Start+0xcc>
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	4a2c      	ldr	r2, [pc, #176]	@ (8007bdc <HAL_TIM_PWM_Start+0x178>)
 8007b2c:	4293      	cmp	r3, r2
 8007b2e:	d101      	bne.n	8007b34 <HAL_TIM_PWM_Start+0xd0>
 8007b30:	2301      	movs	r3, #1
 8007b32:	e000      	b.n	8007b36 <HAL_TIM_PWM_Start+0xd2>
 8007b34:	2300      	movs	r3, #0
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d007      	beq.n	8007b4a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	681b      	ldr	r3, [r3, #0]
 8007b44:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007b48:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	4a22      	ldr	r2, [pc, #136]	@ (8007bd8 <HAL_TIM_PWM_Start+0x174>)
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d022      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007b5c:	d01d      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	4a1f      	ldr	r2, [pc, #124]	@ (8007be0 <HAL_TIM_PWM_Start+0x17c>)
 8007b64:	4293      	cmp	r3, r2
 8007b66:	d018      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a1d      	ldr	r2, [pc, #116]	@ (8007be4 <HAL_TIM_PWM_Start+0x180>)
 8007b6e:	4293      	cmp	r3, r2
 8007b70:	d013      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4a1c      	ldr	r2, [pc, #112]	@ (8007be8 <HAL_TIM_PWM_Start+0x184>)
 8007b78:	4293      	cmp	r3, r2
 8007b7a:	d00e      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	4a16      	ldr	r2, [pc, #88]	@ (8007bdc <HAL_TIM_PWM_Start+0x178>)
 8007b82:	4293      	cmp	r3, r2
 8007b84:	d009      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a18      	ldr	r2, [pc, #96]	@ (8007bec <HAL_TIM_PWM_Start+0x188>)
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d004      	beq.n	8007b9a <HAL_TIM_PWM_Start+0x136>
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	4a16      	ldr	r2, [pc, #88]	@ (8007bf0 <HAL_TIM_PWM_Start+0x18c>)
 8007b96:	4293      	cmp	r3, r2
 8007b98:	d111      	bne.n	8007bbe <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	681b      	ldr	r3, [r3, #0]
 8007b9e:	689b      	ldr	r3, [r3, #8]
 8007ba0:	f003 0307 	and.w	r3, r3, #7
 8007ba4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	2b06      	cmp	r3, #6
 8007baa:	d010      	beq.n	8007bce <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	f042 0201 	orr.w	r2, r2, #1
 8007bba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bbc:	e007      	b.n	8007bce <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007bbe:	687b      	ldr	r3, [r7, #4]
 8007bc0:	681b      	ldr	r3, [r3, #0]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	f042 0201 	orr.w	r2, r2, #1
 8007bcc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007bce:	2300      	movs	r3, #0
}
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	3710      	adds	r7, #16
 8007bd4:	46bd      	mov	sp, r7
 8007bd6:	bd80      	pop	{r7, pc}
 8007bd8:	40010000 	.word	0x40010000
 8007bdc:	40010400 	.word	0x40010400
 8007be0:	40000400 	.word	0x40000400
 8007be4:	40000800 	.word	0x40000800
 8007be8:	40000c00 	.word	0x40000c00
 8007bec:	40014000 	.word	0x40014000
 8007bf0:	40001800 	.word	0x40001800

08007bf4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b084      	sub	sp, #16
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	68db      	ldr	r3, [r3, #12]
 8007c02:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	691b      	ldr	r3, [r3, #16]
 8007c0a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f003 0302 	and.w	r3, r3, #2
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d020      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8007c16:	68fb      	ldr	r3, [r7, #12]
 8007c18:	f003 0302 	and.w	r3, r3, #2
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d01b      	beq.n	8007c58 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	681b      	ldr	r3, [r3, #0]
 8007c24:	f06f 0202 	mvn.w	r2, #2
 8007c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2201      	movs	r2, #1
 8007c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	699b      	ldr	r3, [r3, #24]
 8007c36:	f003 0303 	and.w	r3, r3, #3
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d003      	beq.n	8007c46 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c3e:	6878      	ldr	r0, [r7, #4]
 8007c40:	f000 fa5b 	bl	80080fa <HAL_TIM_IC_CaptureCallback>
 8007c44:	e005      	b.n	8007c52 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 fa4d 	bl	80080e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c4c:	6878      	ldr	r0, [r7, #4]
 8007c4e:	f000 fa5e 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8007c58:	68bb      	ldr	r3, [r7, #8]
 8007c5a:	f003 0304 	and.w	r3, r3, #4
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d020      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0304 	and.w	r3, r3, #4
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01b      	beq.n	8007ca4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f06f 0204 	mvn.w	r2, #4
 8007c74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	2202      	movs	r2, #2
 8007c7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	699b      	ldr	r3, [r3, #24]
 8007c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	d003      	beq.n	8007c92 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c8a:	6878      	ldr	r0, [r7, #4]
 8007c8c:	f000 fa35 	bl	80080fa <HAL_TIM_IC_CaptureCallback>
 8007c90:	e005      	b.n	8007c9e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c92:	6878      	ldr	r0, [r7, #4]
 8007c94:	f000 fa27 	bl	80080e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c98:	6878      	ldr	r0, [r7, #4]
 8007c9a:	f000 fa38 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	2200      	movs	r2, #0
 8007ca2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8007ca4:	68bb      	ldr	r3, [r7, #8]
 8007ca6:	f003 0308 	and.w	r3, r3, #8
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d020      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	f003 0308 	and.w	r3, r3, #8
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d01b      	beq.n	8007cf0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f06f 0208 	mvn.w	r2, #8
 8007cc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	2204      	movs	r2, #4
 8007cc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f003 0303 	and.w	r3, r3, #3
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d003      	beq.n	8007cde <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 fa0f 	bl	80080fa <HAL_TIM_IC_CaptureCallback>
 8007cdc:	e005      	b.n	8007cea <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cde:	6878      	ldr	r0, [r7, #4]
 8007ce0:	f000 fa01 	bl	80080e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce4:	6878      	ldr	r0, [r7, #4]
 8007ce6:	f000 fa12 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	2200      	movs	r2, #0
 8007cee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8007cf0:	68bb      	ldr	r3, [r7, #8]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d020      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	f003 0310 	and.w	r3, r3, #16
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d01b      	beq.n	8007d3c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0210 	mvn.w	r2, #16
 8007d0c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2208      	movs	r2, #8
 8007d12:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	69db      	ldr	r3, [r3, #28]
 8007d1a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f9e9 	bl	80080fa <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f9db 	bl	80080e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f9ec 	bl	800810e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8007d3c:	68bb      	ldr	r3, [r7, #8]
 8007d3e:	f003 0301 	and.w	r3, r3, #1
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00c      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8007d46:	68fb      	ldr	r3, [r7, #12]
 8007d48:	f003 0301 	and.w	r3, r3, #1
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d007      	beq.n	8007d60 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	f06f 0201 	mvn.w	r2, #1
 8007d58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d5a:	6878      	ldr	r0, [r7, #4]
 8007d5c:	f7fb faf2 	bl	8003344 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8007d60:	68bb      	ldr	r3, [r7, #8]
 8007d62:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d00c      	beq.n	8007d84 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	d007      	beq.n	8007d84 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8007d7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 fdce 	bl	8008920 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007d84:	68bb      	ldr	r3, [r7, #8]
 8007d86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d8a:	2b00      	cmp	r3, #0
 8007d8c:	d00c      	beq.n	8007da8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d007      	beq.n	8007da8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007da0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007da2:	6878      	ldr	r0, [r7, #4]
 8007da4:	f000 f9bd 	bl	8008122 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8007da8:	68bb      	ldr	r3, [r7, #8]
 8007daa:	f003 0320 	and.w	r3, r3, #32
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d00c      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	f003 0320 	and.w	r3, r3, #32
 8007db8:	2b00      	cmp	r3, #0
 8007dba:	d007      	beq.n	8007dcc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f06f 0220 	mvn.w	r2, #32
 8007dc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dc6:	6878      	ldr	r0, [r7, #4]
 8007dc8:	f000 fda0 	bl	800890c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007dcc:	bf00      	nop
 8007dce:	3710      	adds	r7, #16
 8007dd0:	46bd      	mov	sp, r7
 8007dd2:	bd80      	pop	{r7, pc}

08007dd4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b086      	sub	sp, #24
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	60f8      	str	r0, [r7, #12]
 8007ddc:	60b9      	str	r1, [r7, #8]
 8007dde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007de0:	2300      	movs	r3, #0
 8007de2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007dea:	2b01      	cmp	r3, #1
 8007dec:	d101      	bne.n	8007df2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8007dee:	2302      	movs	r3, #2
 8007df0:	e0ae      	b.n	8007f50 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	2201      	movs	r2, #1
 8007df6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	2b0c      	cmp	r3, #12
 8007dfe:	f200 809f 	bhi.w	8007f40 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8007e02:	a201      	add	r2, pc, #4	@ (adr r2, 8007e08 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8007e04:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007e08:	08007e3d 	.word	0x08007e3d
 8007e0c:	08007f41 	.word	0x08007f41
 8007e10:	08007f41 	.word	0x08007f41
 8007e14:	08007f41 	.word	0x08007f41
 8007e18:	08007e7d 	.word	0x08007e7d
 8007e1c:	08007f41 	.word	0x08007f41
 8007e20:	08007f41 	.word	0x08007f41
 8007e24:	08007f41 	.word	0x08007f41
 8007e28:	08007ebf 	.word	0x08007ebf
 8007e2c:	08007f41 	.word	0x08007f41
 8007e30:	08007f41 	.word	0x08007f41
 8007e34:	08007f41 	.word	0x08007f41
 8007e38:	08007eff 	.word	0x08007eff
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	68b9      	ldr	r1, [r7, #8]
 8007e42:	4618      	mov	r0, r3
 8007e44:	f000 fa24 	bl	8008290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	699a      	ldr	r2, [r3, #24]
 8007e4e:	68fb      	ldr	r3, [r7, #12]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	f042 0208 	orr.w	r2, r2, #8
 8007e56:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007e58:	68fb      	ldr	r3, [r7, #12]
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	699a      	ldr	r2, [r3, #24]
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	f022 0204 	bic.w	r2, r2, #4
 8007e66:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	6999      	ldr	r1, [r3, #24]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	691a      	ldr	r2, [r3, #16]
 8007e72:	68fb      	ldr	r3, [r7, #12]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	430a      	orrs	r2, r1
 8007e78:	619a      	str	r2, [r3, #24]
      break;
 8007e7a:	e064      	b.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	68b9      	ldr	r1, [r7, #8]
 8007e82:	4618      	mov	r0, r3
 8007e84:	f000 fa74 	bl	8008370 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	681b      	ldr	r3, [r3, #0]
 8007e8c:	699a      	ldr	r2, [r3, #24]
 8007e8e:	68fb      	ldr	r3, [r7, #12]
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007e96:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007e98:	68fb      	ldr	r3, [r7, #12]
 8007e9a:	681b      	ldr	r3, [r3, #0]
 8007e9c:	699a      	ldr	r2, [r3, #24]
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ea6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	6999      	ldr	r1, [r3, #24]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	691b      	ldr	r3, [r3, #16]
 8007eb2:	021a      	lsls	r2, r3, #8
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	430a      	orrs	r2, r1
 8007eba:	619a      	str	r2, [r3, #24]
      break;
 8007ebc:	e043      	b.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007ebe:	68fb      	ldr	r3, [r7, #12]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	68b9      	ldr	r1, [r7, #8]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 fac9 	bl	800845c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	69da      	ldr	r2, [r3, #28]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	f042 0208 	orr.w	r2, r2, #8
 8007ed8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007eda:	68fb      	ldr	r3, [r7, #12]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	69da      	ldr	r2, [r3, #28]
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f022 0204 	bic.w	r2, r2, #4
 8007ee8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	69d9      	ldr	r1, [r3, #28]
 8007ef0:	68bb      	ldr	r3, [r7, #8]
 8007ef2:	691a      	ldr	r2, [r3, #16]
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	430a      	orrs	r2, r1
 8007efa:	61da      	str	r2, [r3, #28]
      break;
 8007efc:	e023      	b.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	68b9      	ldr	r1, [r7, #8]
 8007f04:	4618      	mov	r0, r3
 8007f06:	f000 fb1d 	bl	8008544 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007f0a:	68fb      	ldr	r3, [r7, #12]
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	69da      	ldr	r2, [r3, #28]
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8007f18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007f1a:	68fb      	ldr	r3, [r7, #12]
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	69da      	ldr	r2, [r3, #28]
 8007f20:	68fb      	ldr	r3, [r7, #12]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007f28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007f2a:	68fb      	ldr	r3, [r7, #12]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	69d9      	ldr	r1, [r3, #28]
 8007f30:	68bb      	ldr	r3, [r7, #8]
 8007f32:	691b      	ldr	r3, [r3, #16]
 8007f34:	021a      	lsls	r2, r3, #8
 8007f36:	68fb      	ldr	r3, [r7, #12]
 8007f38:	681b      	ldr	r3, [r3, #0]
 8007f3a:	430a      	orrs	r2, r1
 8007f3c:	61da      	str	r2, [r3, #28]
      break;
 8007f3e:	e002      	b.n	8007f46 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8007f40:	2301      	movs	r3, #1
 8007f42:	75fb      	strb	r3, [r7, #23]
      break;
 8007f44:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007f46:	68fb      	ldr	r3, [r7, #12]
 8007f48:	2200      	movs	r2, #0
 8007f4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8007f4e:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f50:	4618      	mov	r0, r3
 8007f52:	3718      	adds	r7, #24
 8007f54:	46bd      	mov	sp, r7
 8007f56:	bd80      	pop	{r7, pc}

08007f58 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f58:	b580      	push	{r7, lr}
 8007f5a:	b084      	sub	sp, #16
 8007f5c:	af00      	add	r7, sp, #0
 8007f5e:	6078      	str	r0, [r7, #4]
 8007f60:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f62:	2300      	movs	r3, #0
 8007f64:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8007f6c:	2b01      	cmp	r3, #1
 8007f6e:	d101      	bne.n	8007f74 <HAL_TIM_ConfigClockSource+0x1c>
 8007f70:	2302      	movs	r3, #2
 8007f72:	e0b4      	b.n	80080de <HAL_TIM_ConfigClockSource+0x186>
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	2201      	movs	r2, #1
 8007f78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	2202      	movs	r2, #2
 8007f80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	681b      	ldr	r3, [r3, #0]
 8007f88:	689b      	ldr	r3, [r3, #8]
 8007f8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f8c:	68bb      	ldr	r3, [r7, #8]
 8007f8e:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8007f92:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f94:	68bb      	ldr	r3, [r7, #8]
 8007f96:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8007f9a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	68ba      	ldr	r2, [r7, #8]
 8007fa2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fac:	d03e      	beq.n	800802c <HAL_TIM_ConfigClockSource+0xd4>
 8007fae:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007fb2:	f200 8087 	bhi.w	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fb6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fba:	f000 8086 	beq.w	80080ca <HAL_TIM_ConfigClockSource+0x172>
 8007fbe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007fc2:	d87f      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b70      	cmp	r3, #112	@ 0x70
 8007fc6:	d01a      	beq.n	8007ffe <HAL_TIM_ConfigClockSource+0xa6>
 8007fc8:	2b70      	cmp	r3, #112	@ 0x70
 8007fca:	d87b      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fcc:	2b60      	cmp	r3, #96	@ 0x60
 8007fce:	d050      	beq.n	8008072 <HAL_TIM_ConfigClockSource+0x11a>
 8007fd0:	2b60      	cmp	r3, #96	@ 0x60
 8007fd2:	d877      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fd4:	2b50      	cmp	r3, #80	@ 0x50
 8007fd6:	d03c      	beq.n	8008052 <HAL_TIM_ConfigClockSource+0xfa>
 8007fd8:	2b50      	cmp	r3, #80	@ 0x50
 8007fda:	d873      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fdc:	2b40      	cmp	r3, #64	@ 0x40
 8007fde:	d058      	beq.n	8008092 <HAL_TIM_ConfigClockSource+0x13a>
 8007fe0:	2b40      	cmp	r3, #64	@ 0x40
 8007fe2:	d86f      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fe4:	2b30      	cmp	r3, #48	@ 0x30
 8007fe6:	d064      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007fe8:	2b30      	cmp	r3, #48	@ 0x30
 8007fea:	d86b      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	d060      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ff0:	2b20      	cmp	r3, #32
 8007ff2:	d867      	bhi.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
 8007ff4:	2b00      	cmp	r3, #0
 8007ff6:	d05c      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ff8:	2b10      	cmp	r3, #16
 8007ffa:	d05a      	beq.n	80080b2 <HAL_TIM_ConfigClockSource+0x15a>
 8007ffc:	e062      	b.n	80080c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008002:	683b      	ldr	r3, [r7, #0]
 8008004:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008006:	683b      	ldr	r3, [r7, #0]
 8008008:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800800a:	683b      	ldr	r3, [r7, #0]
 800800c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800800e:	f000 fb69 	bl	80086e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008012:	687b      	ldr	r3, [r7, #4]
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	689b      	ldr	r3, [r3, #8]
 8008018:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800801a:	68bb      	ldr	r3, [r7, #8]
 800801c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8008020:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	68ba      	ldr	r2, [r7, #8]
 8008028:	609a      	str	r2, [r3, #8]
      break;
 800802a:	e04f      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8008038:	683b      	ldr	r3, [r7, #0]
 800803a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800803c:	f000 fb52 	bl	80086e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	689a      	ldr	r2, [r3, #8]
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800804e:	609a      	str	r2, [r3, #8]
      break;
 8008050:	e03c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008052:	687b      	ldr	r3, [r7, #4]
 8008054:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008056:	683b      	ldr	r3, [r7, #0]
 8008058:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800805a:	683b      	ldr	r3, [r7, #0]
 800805c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800805e:	461a      	mov	r2, r3
 8008060:	f000 fac6 	bl	80085f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	2150      	movs	r1, #80	@ 0x50
 800806a:	4618      	mov	r0, r3
 800806c:	f000 fb1f 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 8008070:	e02c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008076:	683b      	ldr	r3, [r7, #0]
 8008078:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800807e:	461a      	mov	r2, r3
 8008080:	f000 fae5 	bl	800864e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	2160      	movs	r1, #96	@ 0x60
 800808a:	4618      	mov	r0, r3
 800808c:	f000 fb0f 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 8008090:	e01c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8008096:	683b      	ldr	r3, [r7, #0]
 8008098:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800809a:	683b      	ldr	r3, [r7, #0]
 800809c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800809e:	461a      	mov	r2, r3
 80080a0:	f000 faa6 	bl	80085f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	2140      	movs	r1, #64	@ 0x40
 80080aa:	4618      	mov	r0, r3
 80080ac:	f000 faff 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 80080b0:	e00c      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	681a      	ldr	r2, [r3, #0]
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	4619      	mov	r1, r3
 80080bc:	4610      	mov	r0, r2
 80080be:	f000 faf6 	bl	80086ae <TIM_ITRx_SetConfig>
      break;
 80080c2:	e003      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
      break;
 80080c8:	e000      	b.n	80080cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2200      	movs	r2, #0
 80080d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80080dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80080de:	4618      	mov	r0, r3
 80080e0:	3710      	adds	r7, #16
 80080e2:	46bd      	mov	sp, r7
 80080e4:	bd80      	pop	{r7, pc}

080080e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr

0800810e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800810e:	b480      	push	{r7}
 8008110:	b083      	sub	sp, #12
 8008112:	af00      	add	r7, sp, #0
 8008114:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008116:	bf00      	nop
 8008118:	370c      	adds	r7, #12
 800811a:	46bd      	mov	sp, r7
 800811c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008120:	4770      	bx	lr

08008122 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008122:	b480      	push	{r7}
 8008124:	b083      	sub	sp, #12
 8008126:	af00      	add	r7, sp, #0
 8008128:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800812a:	bf00      	nop
 800812c:	370c      	adds	r7, #12
 800812e:	46bd      	mov	sp, r7
 8008130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008134:	4770      	bx	lr
	...

08008138 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008138:	b480      	push	{r7}
 800813a:	b085      	sub	sp, #20
 800813c:	af00      	add	r7, sp, #0
 800813e:	6078      	str	r0, [r7, #4]
 8008140:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a46      	ldr	r2, [pc, #280]	@ (8008264 <TIM_Base_SetConfig+0x12c>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d013      	beq.n	8008178 <TIM_Base_SetConfig+0x40>
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008156:	d00f      	beq.n	8008178 <TIM_Base_SetConfig+0x40>
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	4a43      	ldr	r2, [pc, #268]	@ (8008268 <TIM_Base_SetConfig+0x130>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d00b      	beq.n	8008178 <TIM_Base_SetConfig+0x40>
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	4a42      	ldr	r2, [pc, #264]	@ (800826c <TIM_Base_SetConfig+0x134>)
 8008164:	4293      	cmp	r3, r2
 8008166:	d007      	beq.n	8008178 <TIM_Base_SetConfig+0x40>
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	4a41      	ldr	r2, [pc, #260]	@ (8008270 <TIM_Base_SetConfig+0x138>)
 800816c:	4293      	cmp	r3, r2
 800816e:	d003      	beq.n	8008178 <TIM_Base_SetConfig+0x40>
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a40      	ldr	r2, [pc, #256]	@ (8008274 <TIM_Base_SetConfig+0x13c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d108      	bne.n	800818a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008178:	68fb      	ldr	r3, [r7, #12]
 800817a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800817e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	68fa      	ldr	r2, [r7, #12]
 8008186:	4313      	orrs	r3, r2
 8008188:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a35      	ldr	r2, [pc, #212]	@ (8008264 <TIM_Base_SetConfig+0x12c>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d02b      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008198:	d027      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a32      	ldr	r2, [pc, #200]	@ (8008268 <TIM_Base_SetConfig+0x130>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d023      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a31      	ldr	r2, [pc, #196]	@ (800826c <TIM_Base_SetConfig+0x134>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d01f      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a30      	ldr	r2, [pc, #192]	@ (8008270 <TIM_Base_SetConfig+0x138>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d01b      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a2f      	ldr	r2, [pc, #188]	@ (8008274 <TIM_Base_SetConfig+0x13c>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d017      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a2e      	ldr	r2, [pc, #184]	@ (8008278 <TIM_Base_SetConfig+0x140>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d013      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	4a2d      	ldr	r2, [pc, #180]	@ (800827c <TIM_Base_SetConfig+0x144>)
 80081c6:	4293      	cmp	r3, r2
 80081c8:	d00f      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	4a2c      	ldr	r2, [pc, #176]	@ (8008280 <TIM_Base_SetConfig+0x148>)
 80081ce:	4293      	cmp	r3, r2
 80081d0:	d00b      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	4a2b      	ldr	r2, [pc, #172]	@ (8008284 <TIM_Base_SetConfig+0x14c>)
 80081d6:	4293      	cmp	r3, r2
 80081d8:	d007      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081da:	687b      	ldr	r3, [r7, #4]
 80081dc:	4a2a      	ldr	r2, [pc, #168]	@ (8008288 <TIM_Base_SetConfig+0x150>)
 80081de:	4293      	cmp	r3, r2
 80081e0:	d003      	beq.n	80081ea <TIM_Base_SetConfig+0xb2>
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	4a29      	ldr	r2, [pc, #164]	@ (800828c <TIM_Base_SetConfig+0x154>)
 80081e6:	4293      	cmp	r3, r2
 80081e8:	d108      	bne.n	80081fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081ea:	68fb      	ldr	r3, [r7, #12]
 80081ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80081f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081f2:	683b      	ldr	r3, [r7, #0]
 80081f4:	68db      	ldr	r3, [r3, #12]
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4313      	orrs	r3, r2
 80081fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081fc:	68fb      	ldr	r3, [r7, #12]
 80081fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008202:	683b      	ldr	r3, [r7, #0]
 8008204:	695b      	ldr	r3, [r3, #20]
 8008206:	4313      	orrs	r3, r2
 8008208:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	68fa      	ldr	r2, [r7, #12]
 800820e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008210:	683b      	ldr	r3, [r7, #0]
 8008212:	689a      	ldr	r2, [r3, #8]
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008218:	683b      	ldr	r3, [r7, #0]
 800821a:	681a      	ldr	r2, [r3, #0]
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	4a10      	ldr	r2, [pc, #64]	@ (8008264 <TIM_Base_SetConfig+0x12c>)
 8008224:	4293      	cmp	r3, r2
 8008226:	d003      	beq.n	8008230 <TIM_Base_SetConfig+0xf8>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	4a12      	ldr	r2, [pc, #72]	@ (8008274 <TIM_Base_SetConfig+0x13c>)
 800822c:	4293      	cmp	r3, r2
 800822e:	d103      	bne.n	8008238 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008230:	683b      	ldr	r3, [r7, #0]
 8008232:	691a      	ldr	r2, [r3, #16]
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	2201      	movs	r2, #1
 800823c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	691b      	ldr	r3, [r3, #16]
 8008242:	f003 0301 	and.w	r3, r3, #1
 8008246:	2b01      	cmp	r3, #1
 8008248:	d105      	bne.n	8008256 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	f023 0201 	bic.w	r2, r3, #1
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	611a      	str	r2, [r3, #16]
  }
}
 8008256:	bf00      	nop
 8008258:	3714      	adds	r7, #20
 800825a:	46bd      	mov	sp, r7
 800825c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008260:	4770      	bx	lr
 8008262:	bf00      	nop
 8008264:	40010000 	.word	0x40010000
 8008268:	40000400 	.word	0x40000400
 800826c:	40000800 	.word	0x40000800
 8008270:	40000c00 	.word	0x40000c00
 8008274:	40010400 	.word	0x40010400
 8008278:	40014000 	.word	0x40014000
 800827c:	40014400 	.word	0x40014400
 8008280:	40014800 	.word	0x40014800
 8008284:	40001800 	.word	0x40001800
 8008288:	40001c00 	.word	0x40001c00
 800828c:	40002000 	.word	0x40002000

08008290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008290:	b480      	push	{r7}
 8008292:	b087      	sub	sp, #28
 8008294:	af00      	add	r7, sp, #0
 8008296:	6078      	str	r0, [r7, #4]
 8008298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	6a1b      	ldr	r3, [r3, #32]
 80082a4:	f023 0201 	bic.w	r2, r3, #1
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	685b      	ldr	r3, [r3, #4]
 80082b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	699b      	ldr	r3, [r3, #24]
 80082b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80082be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	681b      	ldr	r3, [r3, #0]
 80082cc:	68fa      	ldr	r2, [r7, #12]
 80082ce:	4313      	orrs	r3, r2
 80082d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f023 0302 	bic.w	r3, r3, #2
 80082d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	689b      	ldr	r3, [r3, #8]
 80082de:	697a      	ldr	r2, [r7, #20]
 80082e0:	4313      	orrs	r3, r2
 80082e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	4a20      	ldr	r2, [pc, #128]	@ (8008368 <TIM_OC1_SetConfig+0xd8>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d003      	beq.n	80082f4 <TIM_OC1_SetConfig+0x64>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	4a1f      	ldr	r2, [pc, #124]	@ (800836c <TIM_OC1_SetConfig+0xdc>)
 80082f0:	4293      	cmp	r3, r2
 80082f2:	d10c      	bne.n	800830e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80082f4:	697b      	ldr	r3, [r7, #20]
 80082f6:	f023 0308 	bic.w	r3, r3, #8
 80082fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80082fc:	683b      	ldr	r3, [r7, #0]
 80082fe:	68db      	ldr	r3, [r3, #12]
 8008300:	697a      	ldr	r2, [r7, #20]
 8008302:	4313      	orrs	r3, r2
 8008304:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8008306:	697b      	ldr	r3, [r7, #20]
 8008308:	f023 0304 	bic.w	r3, r3, #4
 800830c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a15      	ldr	r2, [pc, #84]	@ (8008368 <TIM_OC1_SetConfig+0xd8>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d003      	beq.n	800831e <TIM_OC1_SetConfig+0x8e>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a14      	ldr	r2, [pc, #80]	@ (800836c <TIM_OC1_SetConfig+0xdc>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d111      	bne.n	8008342 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800831e:	693b      	ldr	r3, [r7, #16]
 8008320:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8008324:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8008326:	693b      	ldr	r3, [r7, #16]
 8008328:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800832c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	695b      	ldr	r3, [r3, #20]
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8008338:	683b      	ldr	r3, [r7, #0]
 800833a:	699b      	ldr	r3, [r3, #24]
 800833c:	693a      	ldr	r2, [r7, #16]
 800833e:	4313      	orrs	r3, r2
 8008340:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	693a      	ldr	r2, [r7, #16]
 8008346:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800834e:	683b      	ldr	r3, [r7, #0]
 8008350:	685a      	ldr	r2, [r3, #4]
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	697a      	ldr	r2, [r7, #20]
 800835a:	621a      	str	r2, [r3, #32]
}
 800835c:	bf00      	nop
 800835e:	371c      	adds	r7, #28
 8008360:	46bd      	mov	sp, r7
 8008362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008366:	4770      	bx	lr
 8008368:	40010000 	.word	0x40010000
 800836c:	40010400 	.word	0x40010400

08008370 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008370:	b480      	push	{r7}
 8008372:	b087      	sub	sp, #28
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
 8008378:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	6a1b      	ldr	r3, [r3, #32]
 800837e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	6a1b      	ldr	r3, [r3, #32]
 8008384:	f023 0210 	bic.w	r2, r3, #16
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	685b      	ldr	r3, [r3, #4]
 8008390:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	699b      	ldr	r3, [r3, #24]
 8008396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800839e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80083a0:	68fb      	ldr	r3, [r7, #12]
 80083a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80083a6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80083a8:	683b      	ldr	r3, [r7, #0]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	021b      	lsls	r3, r3, #8
 80083ae:	68fa      	ldr	r2, [r7, #12]
 80083b0:	4313      	orrs	r3, r2
 80083b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80083b4:	697b      	ldr	r3, [r7, #20]
 80083b6:	f023 0320 	bic.w	r3, r3, #32
 80083ba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	689b      	ldr	r3, [r3, #8]
 80083c0:	011b      	lsls	r3, r3, #4
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	4313      	orrs	r3, r2
 80083c6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	4a22      	ldr	r2, [pc, #136]	@ (8008454 <TIM_OC2_SetConfig+0xe4>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d003      	beq.n	80083d8 <TIM_OC2_SetConfig+0x68>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	4a21      	ldr	r2, [pc, #132]	@ (8008458 <TIM_OC2_SetConfig+0xe8>)
 80083d4:	4293      	cmp	r3, r2
 80083d6:	d10d      	bne.n	80083f4 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80083d8:	697b      	ldr	r3, [r7, #20]
 80083da:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80083de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80083e0:	683b      	ldr	r3, [r7, #0]
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	011b      	lsls	r3, r3, #4
 80083e6:	697a      	ldr	r2, [r7, #20]
 80083e8:	4313      	orrs	r3, r2
 80083ea:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80083f2:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	4a17      	ldr	r2, [pc, #92]	@ (8008454 <TIM_OC2_SetConfig+0xe4>)
 80083f8:	4293      	cmp	r3, r2
 80083fa:	d003      	beq.n	8008404 <TIM_OC2_SetConfig+0x94>
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	4a16      	ldr	r2, [pc, #88]	@ (8008458 <TIM_OC2_SetConfig+0xe8>)
 8008400:	4293      	cmp	r3, r2
 8008402:	d113      	bne.n	800842c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8008404:	693b      	ldr	r3, [r7, #16]
 8008406:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800840a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800840c:	693b      	ldr	r3, [r7, #16]
 800840e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8008412:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008414:	683b      	ldr	r3, [r7, #0]
 8008416:	695b      	ldr	r3, [r3, #20]
 8008418:	009b      	lsls	r3, r3, #2
 800841a:	693a      	ldr	r2, [r7, #16]
 800841c:	4313      	orrs	r3, r2
 800841e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8008420:	683b      	ldr	r3, [r7, #0]
 8008422:	699b      	ldr	r3, [r3, #24]
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	693a      	ldr	r2, [r7, #16]
 8008428:	4313      	orrs	r3, r2
 800842a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	693a      	ldr	r2, [r7, #16]
 8008430:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	68fa      	ldr	r2, [r7, #12]
 8008436:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008438:	683b      	ldr	r3, [r7, #0]
 800843a:	685a      	ldr	r2, [r3, #4]
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	697a      	ldr	r2, [r7, #20]
 8008444:	621a      	str	r2, [r3, #32]
}
 8008446:	bf00      	nop
 8008448:	371c      	adds	r7, #28
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40010000 	.word	0x40010000
 8008458:	40010400 	.word	0x40010400

0800845c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800845c:	b480      	push	{r7}
 800845e:	b087      	sub	sp, #28
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	6a1b      	ldr	r3, [r3, #32]
 800846a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6a1b      	ldr	r3, [r3, #32]
 8008470:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	685b      	ldr	r3, [r3, #4]
 800847c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	69db      	ldr	r3, [r3, #28]
 8008482:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8008484:	68fb      	ldr	r3, [r7, #12]
 8008486:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800848a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	f023 0303 	bic.w	r3, r3, #3
 8008492:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8008494:	683b      	ldr	r3, [r7, #0]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	68fa      	ldr	r2, [r7, #12]
 800849a:	4313      	orrs	r3, r2
 800849c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800849e:	697b      	ldr	r3, [r7, #20]
 80084a0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80084a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	689b      	ldr	r3, [r3, #8]
 80084aa:	021b      	lsls	r3, r3, #8
 80084ac:	697a      	ldr	r2, [r7, #20]
 80084ae:	4313      	orrs	r3, r2
 80084b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	4a21      	ldr	r2, [pc, #132]	@ (800853c <TIM_OC3_SetConfig+0xe0>)
 80084b6:	4293      	cmp	r3, r2
 80084b8:	d003      	beq.n	80084c2 <TIM_OC3_SetConfig+0x66>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	4a20      	ldr	r2, [pc, #128]	@ (8008540 <TIM_OC3_SetConfig+0xe4>)
 80084be:	4293      	cmp	r3, r2
 80084c0:	d10d      	bne.n	80084de <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80084c2:	697b      	ldr	r3, [r7, #20]
 80084c4:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80084c8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80084ca:	683b      	ldr	r3, [r7, #0]
 80084cc:	68db      	ldr	r3, [r3, #12]
 80084ce:	021b      	lsls	r3, r3, #8
 80084d0:	697a      	ldr	r2, [r7, #20]
 80084d2:	4313      	orrs	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80084d6:	697b      	ldr	r3, [r7, #20]
 80084d8:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80084dc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	4a16      	ldr	r2, [pc, #88]	@ (800853c <TIM_OC3_SetConfig+0xe0>)
 80084e2:	4293      	cmp	r3, r2
 80084e4:	d003      	beq.n	80084ee <TIM_OC3_SetConfig+0x92>
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	4a15      	ldr	r2, [pc, #84]	@ (8008540 <TIM_OC3_SetConfig+0xe4>)
 80084ea:	4293      	cmp	r3, r2
 80084ec:	d113      	bne.n	8008516 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80084ee:	693b      	ldr	r3, [r7, #16]
 80084f0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80084f4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80084f6:	693b      	ldr	r3, [r7, #16]
 80084f8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80084fc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80084fe:	683b      	ldr	r3, [r7, #0]
 8008500:	695b      	ldr	r3, [r3, #20]
 8008502:	011b      	lsls	r3, r3, #4
 8008504:	693a      	ldr	r2, [r7, #16]
 8008506:	4313      	orrs	r3, r2
 8008508:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800850a:	683b      	ldr	r3, [r7, #0]
 800850c:	699b      	ldr	r3, [r3, #24]
 800850e:	011b      	lsls	r3, r3, #4
 8008510:	693a      	ldr	r2, [r7, #16]
 8008512:	4313      	orrs	r3, r2
 8008514:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	693a      	ldr	r2, [r7, #16]
 800851a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8008522:	683b      	ldr	r3, [r7, #0]
 8008524:	685a      	ldr	r2, [r3, #4]
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	697a      	ldr	r2, [r7, #20]
 800852e:	621a      	str	r2, [r3, #32]
}
 8008530:	bf00      	nop
 8008532:	371c      	adds	r7, #28
 8008534:	46bd      	mov	sp, r7
 8008536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853a:	4770      	bx	lr
 800853c:	40010000 	.word	0x40010000
 8008540:	40010400 	.word	0x40010400

08008544 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8008544:	b480      	push	{r7}
 8008546:	b087      	sub	sp, #28
 8008548:	af00      	add	r7, sp, #0
 800854a:	6078      	str	r0, [r7, #4]
 800854c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	6a1b      	ldr	r3, [r3, #32]
 8008552:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	6a1b      	ldr	r3, [r3, #32]
 8008558:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	685b      	ldr	r3, [r3, #4]
 8008564:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	69db      	ldr	r3, [r3, #28]
 800856a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800856c:	68fb      	ldr	r3, [r7, #12]
 800856e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8008572:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800857a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800857c:	683b      	ldr	r3, [r7, #0]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	021b      	lsls	r3, r3, #8
 8008582:	68fa      	ldr	r2, [r7, #12]
 8008584:	4313      	orrs	r3, r2
 8008586:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008588:	693b      	ldr	r3, [r7, #16]
 800858a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800858e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008590:	683b      	ldr	r3, [r7, #0]
 8008592:	689b      	ldr	r3, [r3, #8]
 8008594:	031b      	lsls	r3, r3, #12
 8008596:	693a      	ldr	r2, [r7, #16]
 8008598:	4313      	orrs	r3, r2
 800859a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	4a12      	ldr	r2, [pc, #72]	@ (80085e8 <TIM_OC4_SetConfig+0xa4>)
 80085a0:	4293      	cmp	r3, r2
 80085a2:	d003      	beq.n	80085ac <TIM_OC4_SetConfig+0x68>
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	4a11      	ldr	r2, [pc, #68]	@ (80085ec <TIM_OC4_SetConfig+0xa8>)
 80085a8:	4293      	cmp	r3, r2
 80085aa:	d109      	bne.n	80085c0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80085b2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	695b      	ldr	r3, [r3, #20]
 80085b8:	019b      	lsls	r3, r3, #6
 80085ba:	697a      	ldr	r2, [r7, #20]
 80085bc:	4313      	orrs	r3, r2
 80085be:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	697a      	ldr	r2, [r7, #20]
 80085c4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	68fa      	ldr	r2, [r7, #12]
 80085ca:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80085cc:	683b      	ldr	r3, [r7, #0]
 80085ce:	685a      	ldr	r2, [r3, #4]
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	693a      	ldr	r2, [r7, #16]
 80085d8:	621a      	str	r2, [r3, #32]
}
 80085da:	bf00      	nop
 80085dc:	371c      	adds	r7, #28
 80085de:	46bd      	mov	sp, r7
 80085e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085e4:	4770      	bx	lr
 80085e6:	bf00      	nop
 80085e8:	40010000 	.word	0x40010000
 80085ec:	40010400 	.word	0x40010400

080085f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b087      	sub	sp, #28
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	60f8      	str	r0, [r7, #12]
 80085f8:	60b9      	str	r1, [r7, #8]
 80085fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80085fc:	68fb      	ldr	r3, [r7, #12]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008602:	68fb      	ldr	r3, [r7, #12]
 8008604:	6a1b      	ldr	r3, [r3, #32]
 8008606:	f023 0201 	bic.w	r2, r3, #1
 800860a:	68fb      	ldr	r3, [r7, #12]
 800860c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800860e:	68fb      	ldr	r3, [r7, #12]
 8008610:	699b      	ldr	r3, [r3, #24]
 8008612:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008614:	693b      	ldr	r3, [r7, #16]
 8008616:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800861a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	011b      	lsls	r3, r3, #4
 8008620:	693a      	ldr	r2, [r7, #16]
 8008622:	4313      	orrs	r3, r2
 8008624:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008626:	697b      	ldr	r3, [r7, #20]
 8008628:	f023 030a 	bic.w	r3, r3, #10
 800862c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800862e:	697a      	ldr	r2, [r7, #20]
 8008630:	68bb      	ldr	r3, [r7, #8]
 8008632:	4313      	orrs	r3, r2
 8008634:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008636:	68fb      	ldr	r3, [r7, #12]
 8008638:	693a      	ldr	r2, [r7, #16]
 800863a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	697a      	ldr	r2, [r7, #20]
 8008640:	621a      	str	r2, [r3, #32]
}
 8008642:	bf00      	nop
 8008644:	371c      	adds	r7, #28
 8008646:	46bd      	mov	sp, r7
 8008648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800864c:	4770      	bx	lr

0800864e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800864e:	b480      	push	{r7}
 8008650:	b087      	sub	sp, #28
 8008652:	af00      	add	r7, sp, #0
 8008654:	60f8      	str	r0, [r7, #12]
 8008656:	60b9      	str	r1, [r7, #8]
 8008658:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800865a:	68fb      	ldr	r3, [r7, #12]
 800865c:	6a1b      	ldr	r3, [r3, #32]
 800865e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008660:	68fb      	ldr	r3, [r7, #12]
 8008662:	6a1b      	ldr	r3, [r3, #32]
 8008664:	f023 0210 	bic.w	r2, r3, #16
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008672:	693b      	ldr	r3, [r7, #16]
 8008674:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8008678:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	031b      	lsls	r3, r3, #12
 800867e:	693a      	ldr	r2, [r7, #16]
 8008680:	4313      	orrs	r3, r2
 8008682:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008684:	697b      	ldr	r3, [r7, #20]
 8008686:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800868a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	011b      	lsls	r3, r3, #4
 8008690:	697a      	ldr	r2, [r7, #20]
 8008692:	4313      	orrs	r3, r2
 8008694:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	693a      	ldr	r2, [r7, #16]
 800869a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	697a      	ldr	r2, [r7, #20]
 80086a0:	621a      	str	r2, [r3, #32]
}
 80086a2:	bf00      	nop
 80086a4:	371c      	adds	r7, #28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ac:	4770      	bx	lr

080086ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80086ae:	b480      	push	{r7}
 80086b0:	b085      	sub	sp, #20
 80086b2:	af00      	add	r7, sp, #0
 80086b4:	6078      	str	r0, [r7, #4]
 80086b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80086be:	68fb      	ldr	r3, [r7, #12]
 80086c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80086c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80086c6:	683a      	ldr	r2, [r7, #0]
 80086c8:	68fb      	ldr	r3, [r7, #12]
 80086ca:	4313      	orrs	r3, r2
 80086cc:	f043 0307 	orr.w	r3, r3, #7
 80086d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	68fa      	ldr	r2, [r7, #12]
 80086d6:	609a      	str	r2, [r3, #8]
}
 80086d8:	bf00      	nop
 80086da:	3714      	adds	r7, #20
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b087      	sub	sp, #28
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	60f8      	str	r0, [r7, #12]
 80086ec:	60b9      	str	r1, [r7, #8]
 80086ee:	607a      	str	r2, [r7, #4]
 80086f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80086f2:	68fb      	ldr	r3, [r7, #12]
 80086f4:	689b      	ldr	r3, [r3, #8]
 80086f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80086f8:	697b      	ldr	r3, [r7, #20]
 80086fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80086fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008700:	683b      	ldr	r3, [r7, #0]
 8008702:	021a      	lsls	r2, r3, #8
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	431a      	orrs	r2, r3
 8008708:	68bb      	ldr	r3, [r7, #8]
 800870a:	4313      	orrs	r3, r2
 800870c:	697a      	ldr	r2, [r7, #20]
 800870e:	4313      	orrs	r3, r2
 8008710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	697a      	ldr	r2, [r7, #20]
 8008716:	609a      	str	r2, [r3, #8]
}
 8008718:	bf00      	nop
 800871a:	371c      	adds	r7, #28
 800871c:	46bd      	mov	sp, r7
 800871e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008722:	4770      	bx	lr

08008724 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8008724:	b480      	push	{r7}
 8008726:	b087      	sub	sp, #28
 8008728:	af00      	add	r7, sp, #0
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8008730:	68bb      	ldr	r3, [r7, #8]
 8008732:	f003 031f 	and.w	r3, r3, #31
 8008736:	2201      	movs	r2, #1
 8008738:	fa02 f303 	lsl.w	r3, r2, r3
 800873c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800873e:	68fb      	ldr	r3, [r7, #12]
 8008740:	6a1a      	ldr	r2, [r3, #32]
 8008742:	697b      	ldr	r3, [r7, #20]
 8008744:	43db      	mvns	r3, r3
 8008746:	401a      	ands	r2, r3
 8008748:	68fb      	ldr	r3, [r7, #12]
 800874a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	6a1a      	ldr	r2, [r3, #32]
 8008750:	68bb      	ldr	r3, [r7, #8]
 8008752:	f003 031f 	and.w	r3, r3, #31
 8008756:	6879      	ldr	r1, [r7, #4]
 8008758:	fa01 f303 	lsl.w	r3, r1, r3
 800875c:	431a      	orrs	r2, r3
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	621a      	str	r2, [r3, #32]
}
 8008762:	bf00      	nop
 8008764:	371c      	adds	r7, #28
 8008766:	46bd      	mov	sp, r7
 8008768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800876c:	4770      	bx	lr
	...

08008770 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008770:	b480      	push	{r7}
 8008772:	b085      	sub	sp, #20
 8008774:	af00      	add	r7, sp, #0
 8008776:	6078      	str	r0, [r7, #4]
 8008778:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8008780:	2b01      	cmp	r3, #1
 8008782:	d101      	bne.n	8008788 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008784:	2302      	movs	r3, #2
 8008786:	e05a      	b.n	800883e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	2201      	movs	r2, #1
 800878c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	2202      	movs	r2, #2
 8008794:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	689b      	ldr	r3, [r3, #8]
 80087a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80087ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	68fa      	ldr	r2, [r7, #12]
 80087b6:	4313      	orrs	r3, r2
 80087b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	68fa      	ldr	r2, [r7, #12]
 80087c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	4a21      	ldr	r2, [pc, #132]	@ (800884c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80087c8:	4293      	cmp	r3, r2
 80087ca:	d022      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80087d4:	d01d      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	4a1d      	ldr	r2, [pc, #116]	@ (8008850 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d018      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	4a1b      	ldr	r2, [pc, #108]	@ (8008854 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80087e6:	4293      	cmp	r3, r2
 80087e8:	d013      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	681b      	ldr	r3, [r3, #0]
 80087ee:	4a1a      	ldr	r2, [pc, #104]	@ (8008858 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80087f0:	4293      	cmp	r3, r2
 80087f2:	d00e      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a18      	ldr	r2, [pc, #96]	@ (800885c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d009      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	681b      	ldr	r3, [r3, #0]
 8008802:	4a17      	ldr	r2, [pc, #92]	@ (8008860 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008804:	4293      	cmp	r3, r2
 8008806:	d004      	beq.n	8008812 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008808:	687b      	ldr	r3, [r7, #4]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	4a15      	ldr	r2, [pc, #84]	@ (8008864 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800880e:	4293      	cmp	r3, r2
 8008810:	d10c      	bne.n	800882c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008812:	68bb      	ldr	r3, [r7, #8]
 8008814:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800881a:	683b      	ldr	r3, [r7, #0]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4313      	orrs	r3, r2
 8008822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	68ba      	ldr	r2, [r7, #8]
 800882a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	2201      	movs	r2, #1
 8008830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	2200      	movs	r2, #0
 8008838:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800883c:	2300      	movs	r3, #0
}
 800883e:	4618      	mov	r0, r3
 8008840:	3714      	adds	r7, #20
 8008842:	46bd      	mov	sp, r7
 8008844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008848:	4770      	bx	lr
 800884a:	bf00      	nop
 800884c:	40010000 	.word	0x40010000
 8008850:	40000400 	.word	0x40000400
 8008854:	40000800 	.word	0x40000800
 8008858:	40000c00 	.word	0x40000c00
 800885c:	40010400 	.word	0x40010400
 8008860:	40014000 	.word	0x40014000
 8008864:	40001800 	.word	0x40001800

08008868 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8008868:	b480      	push	{r7}
 800886a:	b085      	sub	sp, #20
 800886c:	af00      	add	r7, sp, #0
 800886e:	6078      	str	r0, [r7, #4]
 8008870:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8008872:	2300      	movs	r3, #0
 8008874:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800887c:	2b01      	cmp	r3, #1
 800887e:	d101      	bne.n	8008884 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8008880:	2302      	movs	r3, #2
 8008882:	e03d      	b.n	8008900 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	2201      	movs	r2, #1
 8008888:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800888c:	68fb      	ldr	r3, [r7, #12]
 800888e:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8008892:	683b      	ldr	r3, [r7, #0]
 8008894:	68db      	ldr	r3, [r3, #12]
 8008896:	4313      	orrs	r3, r2
 8008898:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80088a0:	683b      	ldr	r3, [r7, #0]
 80088a2:	689b      	ldr	r3, [r3, #8]
 80088a4:	4313      	orrs	r3, r2
 80088a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 80088ae:	683b      	ldr	r3, [r7, #0]
 80088b0:	685b      	ldr	r3, [r3, #4]
 80088b2:	4313      	orrs	r3, r2
 80088b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 80088bc:	683b      	ldr	r3, [r7, #0]
 80088be:	681b      	ldr	r3, [r3, #0]
 80088c0:	4313      	orrs	r3, r2
 80088c2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80088ca:	683b      	ldr	r3, [r7, #0]
 80088cc:	691b      	ldr	r3, [r3, #16]
 80088ce:	4313      	orrs	r3, r2
 80088d0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 80088d8:	683b      	ldr	r3, [r7, #0]
 80088da:	695b      	ldr	r3, [r3, #20]
 80088dc:	4313      	orrs	r3, r2
 80088de:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 80088e6:	683b      	ldr	r3, [r7, #0]
 80088e8:	69db      	ldr	r3, [r3, #28]
 80088ea:	4313      	orrs	r3, r2
 80088ec:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80088ee:	687b      	ldr	r3, [r7, #4]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68fa      	ldr	r2, [r7, #12]
 80088f4:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80088fe:	2300      	movs	r3, #0
}
 8008900:	4618      	mov	r0, r3
 8008902:	3714      	adds	r7, #20
 8008904:	46bd      	mov	sp, r7
 8008906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800890a:	4770      	bx	lr

0800890c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800890c:	b480      	push	{r7}
 800890e:	b083      	sub	sp, #12
 8008910:	af00      	add	r7, sp, #0
 8008912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008914:	bf00      	nop
 8008916:	370c      	adds	r7, #12
 8008918:	46bd      	mov	sp, r7
 800891a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800891e:	4770      	bx	lr

08008920 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008920:	b480      	push	{r7}
 8008922:	b083      	sub	sp, #12
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008928:	bf00      	nop
 800892a:	370c      	adds	r7, #12
 800892c:	46bd      	mov	sp, r7
 800892e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008932:	4770      	bx	lr

08008934 <calloc>:
 8008934:	4b02      	ldr	r3, [pc, #8]	@ (8008940 <calloc+0xc>)
 8008936:	460a      	mov	r2, r1
 8008938:	4601      	mov	r1, r0
 800893a:	6818      	ldr	r0, [r3, #0]
 800893c:	f000 b802 	b.w	8008944 <_calloc_r>
 8008940:	20000034 	.word	0x20000034

08008944 <_calloc_r>:
 8008944:	b570      	push	{r4, r5, r6, lr}
 8008946:	fba1 5402 	umull	r5, r4, r1, r2
 800894a:	b934      	cbnz	r4, 800895a <_calloc_r+0x16>
 800894c:	4629      	mov	r1, r5
 800894e:	f000 f837 	bl	80089c0 <_malloc_r>
 8008952:	4606      	mov	r6, r0
 8008954:	b928      	cbnz	r0, 8008962 <_calloc_r+0x1e>
 8008956:	4630      	mov	r0, r6
 8008958:	bd70      	pop	{r4, r5, r6, pc}
 800895a:	220c      	movs	r2, #12
 800895c:	6002      	str	r2, [r0, #0]
 800895e:	2600      	movs	r6, #0
 8008960:	e7f9      	b.n	8008956 <_calloc_r+0x12>
 8008962:	462a      	mov	r2, r5
 8008964:	4621      	mov	r1, r4
 8008966:	f000 fe44 	bl	80095f2 <memset>
 800896a:	e7f4      	b.n	8008956 <_calloc_r+0x12>

0800896c <malloc>:
 800896c:	4b02      	ldr	r3, [pc, #8]	@ (8008978 <malloc+0xc>)
 800896e:	4601      	mov	r1, r0
 8008970:	6818      	ldr	r0, [r3, #0]
 8008972:	f000 b825 	b.w	80089c0 <_malloc_r>
 8008976:	bf00      	nop
 8008978:	20000034 	.word	0x20000034

0800897c <sbrk_aligned>:
 800897c:	b570      	push	{r4, r5, r6, lr}
 800897e:	4e0f      	ldr	r6, [pc, #60]	@ (80089bc <sbrk_aligned+0x40>)
 8008980:	460c      	mov	r4, r1
 8008982:	6831      	ldr	r1, [r6, #0]
 8008984:	4605      	mov	r5, r0
 8008986:	b911      	cbnz	r1, 800898e <sbrk_aligned+0x12>
 8008988:	f000 fe74 	bl	8009674 <_sbrk_r>
 800898c:	6030      	str	r0, [r6, #0]
 800898e:	4621      	mov	r1, r4
 8008990:	4628      	mov	r0, r5
 8008992:	f000 fe6f 	bl	8009674 <_sbrk_r>
 8008996:	1c43      	adds	r3, r0, #1
 8008998:	d103      	bne.n	80089a2 <sbrk_aligned+0x26>
 800899a:	f04f 34ff 	mov.w	r4, #4294967295
 800899e:	4620      	mov	r0, r4
 80089a0:	bd70      	pop	{r4, r5, r6, pc}
 80089a2:	1cc4      	adds	r4, r0, #3
 80089a4:	f024 0403 	bic.w	r4, r4, #3
 80089a8:	42a0      	cmp	r0, r4
 80089aa:	d0f8      	beq.n	800899e <sbrk_aligned+0x22>
 80089ac:	1a21      	subs	r1, r4, r0
 80089ae:	4628      	mov	r0, r5
 80089b0:	f000 fe60 	bl	8009674 <_sbrk_r>
 80089b4:	3001      	adds	r0, #1
 80089b6:	d1f2      	bne.n	800899e <sbrk_aligned+0x22>
 80089b8:	e7ef      	b.n	800899a <sbrk_aligned+0x1e>
 80089ba:	bf00      	nop
 80089bc:	200004e8 	.word	0x200004e8

080089c0 <_malloc_r>:
 80089c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80089c4:	1ccd      	adds	r5, r1, #3
 80089c6:	f025 0503 	bic.w	r5, r5, #3
 80089ca:	3508      	adds	r5, #8
 80089cc:	2d0c      	cmp	r5, #12
 80089ce:	bf38      	it	cc
 80089d0:	250c      	movcc	r5, #12
 80089d2:	2d00      	cmp	r5, #0
 80089d4:	4606      	mov	r6, r0
 80089d6:	db01      	blt.n	80089dc <_malloc_r+0x1c>
 80089d8:	42a9      	cmp	r1, r5
 80089da:	d904      	bls.n	80089e6 <_malloc_r+0x26>
 80089dc:	230c      	movs	r3, #12
 80089de:	6033      	str	r3, [r6, #0]
 80089e0:	2000      	movs	r0, #0
 80089e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80089e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008abc <_malloc_r+0xfc>
 80089ea:	f000 f869 	bl	8008ac0 <__malloc_lock>
 80089ee:	f8d8 3000 	ldr.w	r3, [r8]
 80089f2:	461c      	mov	r4, r3
 80089f4:	bb44      	cbnz	r4, 8008a48 <_malloc_r+0x88>
 80089f6:	4629      	mov	r1, r5
 80089f8:	4630      	mov	r0, r6
 80089fa:	f7ff ffbf 	bl	800897c <sbrk_aligned>
 80089fe:	1c43      	adds	r3, r0, #1
 8008a00:	4604      	mov	r4, r0
 8008a02:	d158      	bne.n	8008ab6 <_malloc_r+0xf6>
 8008a04:	f8d8 4000 	ldr.w	r4, [r8]
 8008a08:	4627      	mov	r7, r4
 8008a0a:	2f00      	cmp	r7, #0
 8008a0c:	d143      	bne.n	8008a96 <_malloc_r+0xd6>
 8008a0e:	2c00      	cmp	r4, #0
 8008a10:	d04b      	beq.n	8008aaa <_malloc_r+0xea>
 8008a12:	6823      	ldr	r3, [r4, #0]
 8008a14:	4639      	mov	r1, r7
 8008a16:	4630      	mov	r0, r6
 8008a18:	eb04 0903 	add.w	r9, r4, r3
 8008a1c:	f000 fe2a 	bl	8009674 <_sbrk_r>
 8008a20:	4581      	cmp	r9, r0
 8008a22:	d142      	bne.n	8008aaa <_malloc_r+0xea>
 8008a24:	6821      	ldr	r1, [r4, #0]
 8008a26:	1a6d      	subs	r5, r5, r1
 8008a28:	4629      	mov	r1, r5
 8008a2a:	4630      	mov	r0, r6
 8008a2c:	f7ff ffa6 	bl	800897c <sbrk_aligned>
 8008a30:	3001      	adds	r0, #1
 8008a32:	d03a      	beq.n	8008aaa <_malloc_r+0xea>
 8008a34:	6823      	ldr	r3, [r4, #0]
 8008a36:	442b      	add	r3, r5
 8008a38:	6023      	str	r3, [r4, #0]
 8008a3a:	f8d8 3000 	ldr.w	r3, [r8]
 8008a3e:	685a      	ldr	r2, [r3, #4]
 8008a40:	bb62      	cbnz	r2, 8008a9c <_malloc_r+0xdc>
 8008a42:	f8c8 7000 	str.w	r7, [r8]
 8008a46:	e00f      	b.n	8008a68 <_malloc_r+0xa8>
 8008a48:	6822      	ldr	r2, [r4, #0]
 8008a4a:	1b52      	subs	r2, r2, r5
 8008a4c:	d420      	bmi.n	8008a90 <_malloc_r+0xd0>
 8008a4e:	2a0b      	cmp	r2, #11
 8008a50:	d917      	bls.n	8008a82 <_malloc_r+0xc2>
 8008a52:	1961      	adds	r1, r4, r5
 8008a54:	42a3      	cmp	r3, r4
 8008a56:	6025      	str	r5, [r4, #0]
 8008a58:	bf18      	it	ne
 8008a5a:	6059      	strne	r1, [r3, #4]
 8008a5c:	6863      	ldr	r3, [r4, #4]
 8008a5e:	bf08      	it	eq
 8008a60:	f8c8 1000 	streq.w	r1, [r8]
 8008a64:	5162      	str	r2, [r4, r5]
 8008a66:	604b      	str	r3, [r1, #4]
 8008a68:	4630      	mov	r0, r6
 8008a6a:	f000 f82f 	bl	8008acc <__malloc_unlock>
 8008a6e:	f104 000b 	add.w	r0, r4, #11
 8008a72:	1d23      	adds	r3, r4, #4
 8008a74:	f020 0007 	bic.w	r0, r0, #7
 8008a78:	1ac2      	subs	r2, r0, r3
 8008a7a:	bf1c      	itt	ne
 8008a7c:	1a1b      	subne	r3, r3, r0
 8008a7e:	50a3      	strne	r3, [r4, r2]
 8008a80:	e7af      	b.n	80089e2 <_malloc_r+0x22>
 8008a82:	6862      	ldr	r2, [r4, #4]
 8008a84:	42a3      	cmp	r3, r4
 8008a86:	bf0c      	ite	eq
 8008a88:	f8c8 2000 	streq.w	r2, [r8]
 8008a8c:	605a      	strne	r2, [r3, #4]
 8008a8e:	e7eb      	b.n	8008a68 <_malloc_r+0xa8>
 8008a90:	4623      	mov	r3, r4
 8008a92:	6864      	ldr	r4, [r4, #4]
 8008a94:	e7ae      	b.n	80089f4 <_malloc_r+0x34>
 8008a96:	463c      	mov	r4, r7
 8008a98:	687f      	ldr	r7, [r7, #4]
 8008a9a:	e7b6      	b.n	8008a0a <_malloc_r+0x4a>
 8008a9c:	461a      	mov	r2, r3
 8008a9e:	685b      	ldr	r3, [r3, #4]
 8008aa0:	42a3      	cmp	r3, r4
 8008aa2:	d1fb      	bne.n	8008a9c <_malloc_r+0xdc>
 8008aa4:	2300      	movs	r3, #0
 8008aa6:	6053      	str	r3, [r2, #4]
 8008aa8:	e7de      	b.n	8008a68 <_malloc_r+0xa8>
 8008aaa:	230c      	movs	r3, #12
 8008aac:	6033      	str	r3, [r6, #0]
 8008aae:	4630      	mov	r0, r6
 8008ab0:	f000 f80c 	bl	8008acc <__malloc_unlock>
 8008ab4:	e794      	b.n	80089e0 <_malloc_r+0x20>
 8008ab6:	6005      	str	r5, [r0, #0]
 8008ab8:	e7d6      	b.n	8008a68 <_malloc_r+0xa8>
 8008aba:	bf00      	nop
 8008abc:	200004ec 	.word	0x200004ec

08008ac0 <__malloc_lock>:
 8008ac0:	4801      	ldr	r0, [pc, #4]	@ (8008ac8 <__malloc_lock+0x8>)
 8008ac2:	f000 be24 	b.w	800970e <__retarget_lock_acquire_recursive>
 8008ac6:	bf00      	nop
 8008ac8:	20000630 	.word	0x20000630

08008acc <__malloc_unlock>:
 8008acc:	4801      	ldr	r0, [pc, #4]	@ (8008ad4 <__malloc_unlock+0x8>)
 8008ace:	f000 be1f 	b.w	8009710 <__retarget_lock_release_recursive>
 8008ad2:	bf00      	nop
 8008ad4:	20000630 	.word	0x20000630

08008ad8 <__cvt>:
 8008ad8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008adc:	ec57 6b10 	vmov	r6, r7, d0
 8008ae0:	2f00      	cmp	r7, #0
 8008ae2:	460c      	mov	r4, r1
 8008ae4:	4619      	mov	r1, r3
 8008ae6:	463b      	mov	r3, r7
 8008ae8:	bfbb      	ittet	lt
 8008aea:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008aee:	461f      	movlt	r7, r3
 8008af0:	2300      	movge	r3, #0
 8008af2:	232d      	movlt	r3, #45	@ 0x2d
 8008af4:	700b      	strb	r3, [r1, #0]
 8008af6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008af8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008afc:	4691      	mov	r9, r2
 8008afe:	f023 0820 	bic.w	r8, r3, #32
 8008b02:	bfbc      	itt	lt
 8008b04:	4632      	movlt	r2, r6
 8008b06:	4616      	movlt	r6, r2
 8008b08:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b0c:	d005      	beq.n	8008b1a <__cvt+0x42>
 8008b0e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008b12:	d100      	bne.n	8008b16 <__cvt+0x3e>
 8008b14:	3401      	adds	r4, #1
 8008b16:	2102      	movs	r1, #2
 8008b18:	e000      	b.n	8008b1c <__cvt+0x44>
 8008b1a:	2103      	movs	r1, #3
 8008b1c:	ab03      	add	r3, sp, #12
 8008b1e:	9301      	str	r3, [sp, #4]
 8008b20:	ab02      	add	r3, sp, #8
 8008b22:	9300      	str	r3, [sp, #0]
 8008b24:	ec47 6b10 	vmov	d0, r6, r7
 8008b28:	4653      	mov	r3, sl
 8008b2a:	4622      	mov	r2, r4
 8008b2c:	f000 fe84 	bl	8009838 <_dtoa_r>
 8008b30:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008b34:	4605      	mov	r5, r0
 8008b36:	d119      	bne.n	8008b6c <__cvt+0x94>
 8008b38:	f019 0f01 	tst.w	r9, #1
 8008b3c:	d00e      	beq.n	8008b5c <__cvt+0x84>
 8008b3e:	eb00 0904 	add.w	r9, r0, r4
 8008b42:	2200      	movs	r2, #0
 8008b44:	2300      	movs	r3, #0
 8008b46:	4630      	mov	r0, r6
 8008b48:	4639      	mov	r1, r7
 8008b4a:	f7f7 ffbd 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b4e:	b108      	cbz	r0, 8008b54 <__cvt+0x7c>
 8008b50:	f8cd 900c 	str.w	r9, [sp, #12]
 8008b54:	2230      	movs	r2, #48	@ 0x30
 8008b56:	9b03      	ldr	r3, [sp, #12]
 8008b58:	454b      	cmp	r3, r9
 8008b5a:	d31e      	bcc.n	8008b9a <__cvt+0xc2>
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008b60:	1b5b      	subs	r3, r3, r5
 8008b62:	4628      	mov	r0, r5
 8008b64:	6013      	str	r3, [r2, #0]
 8008b66:	b004      	add	sp, #16
 8008b68:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b6c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008b70:	eb00 0904 	add.w	r9, r0, r4
 8008b74:	d1e5      	bne.n	8008b42 <__cvt+0x6a>
 8008b76:	7803      	ldrb	r3, [r0, #0]
 8008b78:	2b30      	cmp	r3, #48	@ 0x30
 8008b7a:	d10a      	bne.n	8008b92 <__cvt+0xba>
 8008b7c:	2200      	movs	r2, #0
 8008b7e:	2300      	movs	r3, #0
 8008b80:	4630      	mov	r0, r6
 8008b82:	4639      	mov	r1, r7
 8008b84:	f7f7 ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8008b88:	b918      	cbnz	r0, 8008b92 <__cvt+0xba>
 8008b8a:	f1c4 0401 	rsb	r4, r4, #1
 8008b8e:	f8ca 4000 	str.w	r4, [sl]
 8008b92:	f8da 3000 	ldr.w	r3, [sl]
 8008b96:	4499      	add	r9, r3
 8008b98:	e7d3      	b.n	8008b42 <__cvt+0x6a>
 8008b9a:	1c59      	adds	r1, r3, #1
 8008b9c:	9103      	str	r1, [sp, #12]
 8008b9e:	701a      	strb	r2, [r3, #0]
 8008ba0:	e7d9      	b.n	8008b56 <__cvt+0x7e>

08008ba2 <__exponent>:
 8008ba2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008ba4:	2900      	cmp	r1, #0
 8008ba6:	bfba      	itte	lt
 8008ba8:	4249      	neglt	r1, r1
 8008baa:	232d      	movlt	r3, #45	@ 0x2d
 8008bac:	232b      	movge	r3, #43	@ 0x2b
 8008bae:	2909      	cmp	r1, #9
 8008bb0:	7002      	strb	r2, [r0, #0]
 8008bb2:	7043      	strb	r3, [r0, #1]
 8008bb4:	dd29      	ble.n	8008c0a <__exponent+0x68>
 8008bb6:	f10d 0307 	add.w	r3, sp, #7
 8008bba:	461d      	mov	r5, r3
 8008bbc:	270a      	movs	r7, #10
 8008bbe:	461a      	mov	r2, r3
 8008bc0:	fbb1 f6f7 	udiv	r6, r1, r7
 8008bc4:	fb07 1416 	mls	r4, r7, r6, r1
 8008bc8:	3430      	adds	r4, #48	@ 0x30
 8008bca:	f802 4c01 	strb.w	r4, [r2, #-1]
 8008bce:	460c      	mov	r4, r1
 8008bd0:	2c63      	cmp	r4, #99	@ 0x63
 8008bd2:	f103 33ff 	add.w	r3, r3, #4294967295
 8008bd6:	4631      	mov	r1, r6
 8008bd8:	dcf1      	bgt.n	8008bbe <__exponent+0x1c>
 8008bda:	3130      	adds	r1, #48	@ 0x30
 8008bdc:	1e94      	subs	r4, r2, #2
 8008bde:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008be2:	1c41      	adds	r1, r0, #1
 8008be4:	4623      	mov	r3, r4
 8008be6:	42ab      	cmp	r3, r5
 8008be8:	d30a      	bcc.n	8008c00 <__exponent+0x5e>
 8008bea:	f10d 0309 	add.w	r3, sp, #9
 8008bee:	1a9b      	subs	r3, r3, r2
 8008bf0:	42ac      	cmp	r4, r5
 8008bf2:	bf88      	it	hi
 8008bf4:	2300      	movhi	r3, #0
 8008bf6:	3302      	adds	r3, #2
 8008bf8:	4403      	add	r3, r0
 8008bfa:	1a18      	subs	r0, r3, r0
 8008bfc:	b003      	add	sp, #12
 8008bfe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008c00:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008c04:	f801 6f01 	strb.w	r6, [r1, #1]!
 8008c08:	e7ed      	b.n	8008be6 <__exponent+0x44>
 8008c0a:	2330      	movs	r3, #48	@ 0x30
 8008c0c:	3130      	adds	r1, #48	@ 0x30
 8008c0e:	7083      	strb	r3, [r0, #2]
 8008c10:	70c1      	strb	r1, [r0, #3]
 8008c12:	1d03      	adds	r3, r0, #4
 8008c14:	e7f1      	b.n	8008bfa <__exponent+0x58>
	...

08008c18 <_printf_float>:
 8008c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c1c:	b08d      	sub	sp, #52	@ 0x34
 8008c1e:	460c      	mov	r4, r1
 8008c20:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008c24:	4616      	mov	r6, r2
 8008c26:	461f      	mov	r7, r3
 8008c28:	4605      	mov	r5, r0
 8008c2a:	f000 fceb 	bl	8009604 <_localeconv_r>
 8008c2e:	6803      	ldr	r3, [r0, #0]
 8008c30:	9304      	str	r3, [sp, #16]
 8008c32:	4618      	mov	r0, r3
 8008c34:	f7f7 fb1c 	bl	8000270 <strlen>
 8008c38:	2300      	movs	r3, #0
 8008c3a:	930a      	str	r3, [sp, #40]	@ 0x28
 8008c3c:	f8d8 3000 	ldr.w	r3, [r8]
 8008c40:	9005      	str	r0, [sp, #20]
 8008c42:	3307      	adds	r3, #7
 8008c44:	f023 0307 	bic.w	r3, r3, #7
 8008c48:	f103 0208 	add.w	r2, r3, #8
 8008c4c:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008c50:	f8d4 b000 	ldr.w	fp, [r4]
 8008c54:	f8c8 2000 	str.w	r2, [r8]
 8008c58:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008c5c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008c60:	9307      	str	r3, [sp, #28]
 8008c62:	f8cd 8018 	str.w	r8, [sp, #24]
 8008c66:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8008c6a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c6e:	4b9c      	ldr	r3, [pc, #624]	@ (8008ee0 <_printf_float+0x2c8>)
 8008c70:	f04f 32ff 	mov.w	r2, #4294967295
 8008c74:	f7f7 ff5a 	bl	8000b2c <__aeabi_dcmpun>
 8008c78:	bb70      	cbnz	r0, 8008cd8 <_printf_float+0xc0>
 8008c7a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008c7e:	4b98      	ldr	r3, [pc, #608]	@ (8008ee0 <_printf_float+0x2c8>)
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	f7f7 ff34 	bl	8000af0 <__aeabi_dcmple>
 8008c88:	bb30      	cbnz	r0, 8008cd8 <_printf_float+0xc0>
 8008c8a:	2200      	movs	r2, #0
 8008c8c:	2300      	movs	r3, #0
 8008c8e:	4640      	mov	r0, r8
 8008c90:	4649      	mov	r1, r9
 8008c92:	f7f7 ff23 	bl	8000adc <__aeabi_dcmplt>
 8008c96:	b110      	cbz	r0, 8008c9e <_printf_float+0x86>
 8008c98:	232d      	movs	r3, #45	@ 0x2d
 8008c9a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c9e:	4a91      	ldr	r2, [pc, #580]	@ (8008ee4 <_printf_float+0x2cc>)
 8008ca0:	4b91      	ldr	r3, [pc, #580]	@ (8008ee8 <_printf_float+0x2d0>)
 8008ca2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8008ca6:	bf8c      	ite	hi
 8008ca8:	4690      	movhi	r8, r2
 8008caa:	4698      	movls	r8, r3
 8008cac:	2303      	movs	r3, #3
 8008cae:	6123      	str	r3, [r4, #16]
 8008cb0:	f02b 0304 	bic.w	r3, fp, #4
 8008cb4:	6023      	str	r3, [r4, #0]
 8008cb6:	f04f 0900 	mov.w	r9, #0
 8008cba:	9700      	str	r7, [sp, #0]
 8008cbc:	4633      	mov	r3, r6
 8008cbe:	aa0b      	add	r2, sp, #44	@ 0x2c
 8008cc0:	4621      	mov	r1, r4
 8008cc2:	4628      	mov	r0, r5
 8008cc4:	f000 f9d2 	bl	800906c <_printf_common>
 8008cc8:	3001      	adds	r0, #1
 8008cca:	f040 808d 	bne.w	8008de8 <_printf_float+0x1d0>
 8008cce:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd2:	b00d      	add	sp, #52	@ 0x34
 8008cd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cd8:	4642      	mov	r2, r8
 8008cda:	464b      	mov	r3, r9
 8008cdc:	4640      	mov	r0, r8
 8008cde:	4649      	mov	r1, r9
 8008ce0:	f7f7 ff24 	bl	8000b2c <__aeabi_dcmpun>
 8008ce4:	b140      	cbz	r0, 8008cf8 <_printf_float+0xe0>
 8008ce6:	464b      	mov	r3, r9
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	bfbc      	itt	lt
 8008cec:	232d      	movlt	r3, #45	@ 0x2d
 8008cee:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008cf2:	4a7e      	ldr	r2, [pc, #504]	@ (8008eec <_printf_float+0x2d4>)
 8008cf4:	4b7e      	ldr	r3, [pc, #504]	@ (8008ef0 <_printf_float+0x2d8>)
 8008cf6:	e7d4      	b.n	8008ca2 <_printf_float+0x8a>
 8008cf8:	6863      	ldr	r3, [r4, #4]
 8008cfa:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008cfe:	9206      	str	r2, [sp, #24]
 8008d00:	1c5a      	adds	r2, r3, #1
 8008d02:	d13b      	bne.n	8008d7c <_printf_float+0x164>
 8008d04:	2306      	movs	r3, #6
 8008d06:	6063      	str	r3, [r4, #4]
 8008d08:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	6022      	str	r2, [r4, #0]
 8008d10:	9303      	str	r3, [sp, #12]
 8008d12:	ab0a      	add	r3, sp, #40	@ 0x28
 8008d14:	e9cd a301 	strd	sl, r3, [sp, #4]
 8008d18:	ab09      	add	r3, sp, #36	@ 0x24
 8008d1a:	9300      	str	r3, [sp, #0]
 8008d1c:	6861      	ldr	r1, [r4, #4]
 8008d1e:	ec49 8b10 	vmov	d0, r8, r9
 8008d22:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8008d26:	4628      	mov	r0, r5
 8008d28:	f7ff fed6 	bl	8008ad8 <__cvt>
 8008d2c:	9b06      	ldr	r3, [sp, #24]
 8008d2e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008d30:	2b47      	cmp	r3, #71	@ 0x47
 8008d32:	4680      	mov	r8, r0
 8008d34:	d129      	bne.n	8008d8a <_printf_float+0x172>
 8008d36:	1cc8      	adds	r0, r1, #3
 8008d38:	db02      	blt.n	8008d40 <_printf_float+0x128>
 8008d3a:	6863      	ldr	r3, [r4, #4]
 8008d3c:	4299      	cmp	r1, r3
 8008d3e:	dd41      	ble.n	8008dc4 <_printf_float+0x1ac>
 8008d40:	f1aa 0a02 	sub.w	sl, sl, #2
 8008d44:	fa5f fa8a 	uxtb.w	sl, sl
 8008d48:	3901      	subs	r1, #1
 8008d4a:	4652      	mov	r2, sl
 8008d4c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008d50:	9109      	str	r1, [sp, #36]	@ 0x24
 8008d52:	f7ff ff26 	bl	8008ba2 <__exponent>
 8008d56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008d58:	1813      	adds	r3, r2, r0
 8008d5a:	2a01      	cmp	r2, #1
 8008d5c:	4681      	mov	r9, r0
 8008d5e:	6123      	str	r3, [r4, #16]
 8008d60:	dc02      	bgt.n	8008d68 <_printf_float+0x150>
 8008d62:	6822      	ldr	r2, [r4, #0]
 8008d64:	07d2      	lsls	r2, r2, #31
 8008d66:	d501      	bpl.n	8008d6c <_printf_float+0x154>
 8008d68:	3301      	adds	r3, #1
 8008d6a:	6123      	str	r3, [r4, #16]
 8008d6c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d0a2      	beq.n	8008cba <_printf_float+0xa2>
 8008d74:	232d      	movs	r3, #45	@ 0x2d
 8008d76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d7a:	e79e      	b.n	8008cba <_printf_float+0xa2>
 8008d7c:	9a06      	ldr	r2, [sp, #24]
 8008d7e:	2a47      	cmp	r2, #71	@ 0x47
 8008d80:	d1c2      	bne.n	8008d08 <_printf_float+0xf0>
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d1c0      	bne.n	8008d08 <_printf_float+0xf0>
 8008d86:	2301      	movs	r3, #1
 8008d88:	e7bd      	b.n	8008d06 <_printf_float+0xee>
 8008d8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008d8e:	d9db      	bls.n	8008d48 <_printf_float+0x130>
 8008d90:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8008d94:	d118      	bne.n	8008dc8 <_printf_float+0x1b0>
 8008d96:	2900      	cmp	r1, #0
 8008d98:	6863      	ldr	r3, [r4, #4]
 8008d9a:	dd0b      	ble.n	8008db4 <_printf_float+0x19c>
 8008d9c:	6121      	str	r1, [r4, #16]
 8008d9e:	b913      	cbnz	r3, 8008da6 <_printf_float+0x18e>
 8008da0:	6822      	ldr	r2, [r4, #0]
 8008da2:	07d0      	lsls	r0, r2, #31
 8008da4:	d502      	bpl.n	8008dac <_printf_float+0x194>
 8008da6:	3301      	adds	r3, #1
 8008da8:	440b      	add	r3, r1
 8008daa:	6123      	str	r3, [r4, #16]
 8008dac:	65a1      	str	r1, [r4, #88]	@ 0x58
 8008dae:	f04f 0900 	mov.w	r9, #0
 8008db2:	e7db      	b.n	8008d6c <_printf_float+0x154>
 8008db4:	b913      	cbnz	r3, 8008dbc <_printf_float+0x1a4>
 8008db6:	6822      	ldr	r2, [r4, #0]
 8008db8:	07d2      	lsls	r2, r2, #31
 8008dba:	d501      	bpl.n	8008dc0 <_printf_float+0x1a8>
 8008dbc:	3302      	adds	r3, #2
 8008dbe:	e7f4      	b.n	8008daa <_printf_float+0x192>
 8008dc0:	2301      	movs	r3, #1
 8008dc2:	e7f2      	b.n	8008daa <_printf_float+0x192>
 8008dc4:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8008dc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008dca:	4299      	cmp	r1, r3
 8008dcc:	db05      	blt.n	8008dda <_printf_float+0x1c2>
 8008dce:	6823      	ldr	r3, [r4, #0]
 8008dd0:	6121      	str	r1, [r4, #16]
 8008dd2:	07d8      	lsls	r0, r3, #31
 8008dd4:	d5ea      	bpl.n	8008dac <_printf_float+0x194>
 8008dd6:	1c4b      	adds	r3, r1, #1
 8008dd8:	e7e7      	b.n	8008daa <_printf_float+0x192>
 8008dda:	2900      	cmp	r1, #0
 8008ddc:	bfd4      	ite	le
 8008dde:	f1c1 0202 	rsble	r2, r1, #2
 8008de2:	2201      	movgt	r2, #1
 8008de4:	4413      	add	r3, r2
 8008de6:	e7e0      	b.n	8008daa <_printf_float+0x192>
 8008de8:	6823      	ldr	r3, [r4, #0]
 8008dea:	055a      	lsls	r2, r3, #21
 8008dec:	d407      	bmi.n	8008dfe <_printf_float+0x1e6>
 8008dee:	6923      	ldr	r3, [r4, #16]
 8008df0:	4642      	mov	r2, r8
 8008df2:	4631      	mov	r1, r6
 8008df4:	4628      	mov	r0, r5
 8008df6:	47b8      	blx	r7
 8008df8:	3001      	adds	r0, #1
 8008dfa:	d12b      	bne.n	8008e54 <_printf_float+0x23c>
 8008dfc:	e767      	b.n	8008cce <_printf_float+0xb6>
 8008dfe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008e02:	f240 80dd 	bls.w	8008fc0 <_printf_float+0x3a8>
 8008e06:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	2300      	movs	r3, #0
 8008e0e:	f7f7 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 8008e12:	2800      	cmp	r0, #0
 8008e14:	d033      	beq.n	8008e7e <_printf_float+0x266>
 8008e16:	4a37      	ldr	r2, [pc, #220]	@ (8008ef4 <_printf_float+0x2dc>)
 8008e18:	2301      	movs	r3, #1
 8008e1a:	4631      	mov	r1, r6
 8008e1c:	4628      	mov	r0, r5
 8008e1e:	47b8      	blx	r7
 8008e20:	3001      	adds	r0, #1
 8008e22:	f43f af54 	beq.w	8008cce <_printf_float+0xb6>
 8008e26:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8008e2a:	4543      	cmp	r3, r8
 8008e2c:	db02      	blt.n	8008e34 <_printf_float+0x21c>
 8008e2e:	6823      	ldr	r3, [r4, #0]
 8008e30:	07d8      	lsls	r0, r3, #31
 8008e32:	d50f      	bpl.n	8008e54 <_printf_float+0x23c>
 8008e34:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008e38:	4631      	mov	r1, r6
 8008e3a:	4628      	mov	r0, r5
 8008e3c:	47b8      	blx	r7
 8008e3e:	3001      	adds	r0, #1
 8008e40:	f43f af45 	beq.w	8008cce <_printf_float+0xb6>
 8008e44:	f04f 0900 	mov.w	r9, #0
 8008e48:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e4c:	f104 0a1a 	add.w	sl, r4, #26
 8008e50:	45c8      	cmp	r8, r9
 8008e52:	dc09      	bgt.n	8008e68 <_printf_float+0x250>
 8008e54:	6823      	ldr	r3, [r4, #0]
 8008e56:	079b      	lsls	r3, r3, #30
 8008e58:	f100 8103 	bmi.w	8009062 <_printf_float+0x44a>
 8008e5c:	68e0      	ldr	r0, [r4, #12]
 8008e5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e60:	4298      	cmp	r0, r3
 8008e62:	bfb8      	it	lt
 8008e64:	4618      	movlt	r0, r3
 8008e66:	e734      	b.n	8008cd2 <_printf_float+0xba>
 8008e68:	2301      	movs	r3, #1
 8008e6a:	4652      	mov	r2, sl
 8008e6c:	4631      	mov	r1, r6
 8008e6e:	4628      	mov	r0, r5
 8008e70:	47b8      	blx	r7
 8008e72:	3001      	adds	r0, #1
 8008e74:	f43f af2b 	beq.w	8008cce <_printf_float+0xb6>
 8008e78:	f109 0901 	add.w	r9, r9, #1
 8008e7c:	e7e8      	b.n	8008e50 <_printf_float+0x238>
 8008e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	dc39      	bgt.n	8008ef8 <_printf_float+0x2e0>
 8008e84:	4a1b      	ldr	r2, [pc, #108]	@ (8008ef4 <_printf_float+0x2dc>)
 8008e86:	2301      	movs	r3, #1
 8008e88:	4631      	mov	r1, r6
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b8      	blx	r7
 8008e8e:	3001      	adds	r0, #1
 8008e90:	f43f af1d 	beq.w	8008cce <_printf_float+0xb6>
 8008e94:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8008e98:	ea59 0303 	orrs.w	r3, r9, r3
 8008e9c:	d102      	bne.n	8008ea4 <_printf_float+0x28c>
 8008e9e:	6823      	ldr	r3, [r4, #0]
 8008ea0:	07d9      	lsls	r1, r3, #31
 8008ea2:	d5d7      	bpl.n	8008e54 <_printf_float+0x23c>
 8008ea4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008ea8:	4631      	mov	r1, r6
 8008eaa:	4628      	mov	r0, r5
 8008eac:	47b8      	blx	r7
 8008eae:	3001      	adds	r0, #1
 8008eb0:	f43f af0d 	beq.w	8008cce <_printf_float+0xb6>
 8008eb4:	f04f 0a00 	mov.w	sl, #0
 8008eb8:	f104 0b1a 	add.w	fp, r4, #26
 8008ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008ebe:	425b      	negs	r3, r3
 8008ec0:	4553      	cmp	r3, sl
 8008ec2:	dc01      	bgt.n	8008ec8 <_printf_float+0x2b0>
 8008ec4:	464b      	mov	r3, r9
 8008ec6:	e793      	b.n	8008df0 <_printf_float+0x1d8>
 8008ec8:	2301      	movs	r3, #1
 8008eca:	465a      	mov	r2, fp
 8008ecc:	4631      	mov	r1, r6
 8008ece:	4628      	mov	r0, r5
 8008ed0:	47b8      	blx	r7
 8008ed2:	3001      	adds	r0, #1
 8008ed4:	f43f aefb 	beq.w	8008cce <_printf_float+0xb6>
 8008ed8:	f10a 0a01 	add.w	sl, sl, #1
 8008edc:	e7ee      	b.n	8008ebc <_printf_float+0x2a4>
 8008ede:	bf00      	nop
 8008ee0:	7fefffff 	.word	0x7fefffff
 8008ee4:	0800bcf4 	.word	0x0800bcf4
 8008ee8:	0800bcf0 	.word	0x0800bcf0
 8008eec:	0800bcfc 	.word	0x0800bcfc
 8008ef0:	0800bcf8 	.word	0x0800bcf8
 8008ef4:	0800bd00 	.word	0x0800bd00
 8008ef8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008efa:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008efe:	4553      	cmp	r3, sl
 8008f00:	bfa8      	it	ge
 8008f02:	4653      	movge	r3, sl
 8008f04:	2b00      	cmp	r3, #0
 8008f06:	4699      	mov	r9, r3
 8008f08:	dc36      	bgt.n	8008f78 <_printf_float+0x360>
 8008f0a:	f04f 0b00 	mov.w	fp, #0
 8008f0e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f12:	f104 021a 	add.w	r2, r4, #26
 8008f16:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8008f18:	9306      	str	r3, [sp, #24]
 8008f1a:	eba3 0309 	sub.w	r3, r3, r9
 8008f1e:	455b      	cmp	r3, fp
 8008f20:	dc31      	bgt.n	8008f86 <_printf_float+0x36e>
 8008f22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f24:	459a      	cmp	sl, r3
 8008f26:	dc3a      	bgt.n	8008f9e <_printf_float+0x386>
 8008f28:	6823      	ldr	r3, [r4, #0]
 8008f2a:	07da      	lsls	r2, r3, #31
 8008f2c:	d437      	bmi.n	8008f9e <_printf_float+0x386>
 8008f2e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f30:	ebaa 0903 	sub.w	r9, sl, r3
 8008f34:	9b06      	ldr	r3, [sp, #24]
 8008f36:	ebaa 0303 	sub.w	r3, sl, r3
 8008f3a:	4599      	cmp	r9, r3
 8008f3c:	bfa8      	it	ge
 8008f3e:	4699      	movge	r9, r3
 8008f40:	f1b9 0f00 	cmp.w	r9, #0
 8008f44:	dc33      	bgt.n	8008fae <_printf_float+0x396>
 8008f46:	f04f 0800 	mov.w	r8, #0
 8008f4a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008f4e:	f104 0b1a 	add.w	fp, r4, #26
 8008f52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f54:	ebaa 0303 	sub.w	r3, sl, r3
 8008f58:	eba3 0309 	sub.w	r3, r3, r9
 8008f5c:	4543      	cmp	r3, r8
 8008f5e:	f77f af79 	ble.w	8008e54 <_printf_float+0x23c>
 8008f62:	2301      	movs	r3, #1
 8008f64:	465a      	mov	r2, fp
 8008f66:	4631      	mov	r1, r6
 8008f68:	4628      	mov	r0, r5
 8008f6a:	47b8      	blx	r7
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	f43f aeae 	beq.w	8008cce <_printf_float+0xb6>
 8008f72:	f108 0801 	add.w	r8, r8, #1
 8008f76:	e7ec      	b.n	8008f52 <_printf_float+0x33a>
 8008f78:	4642      	mov	r2, r8
 8008f7a:	4631      	mov	r1, r6
 8008f7c:	4628      	mov	r0, r5
 8008f7e:	47b8      	blx	r7
 8008f80:	3001      	adds	r0, #1
 8008f82:	d1c2      	bne.n	8008f0a <_printf_float+0x2f2>
 8008f84:	e6a3      	b.n	8008cce <_printf_float+0xb6>
 8008f86:	2301      	movs	r3, #1
 8008f88:	4631      	mov	r1, r6
 8008f8a:	4628      	mov	r0, r5
 8008f8c:	9206      	str	r2, [sp, #24]
 8008f8e:	47b8      	blx	r7
 8008f90:	3001      	adds	r0, #1
 8008f92:	f43f ae9c 	beq.w	8008cce <_printf_float+0xb6>
 8008f96:	9a06      	ldr	r2, [sp, #24]
 8008f98:	f10b 0b01 	add.w	fp, fp, #1
 8008f9c:	e7bb      	b.n	8008f16 <_printf_float+0x2fe>
 8008f9e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fa2:	4631      	mov	r1, r6
 8008fa4:	4628      	mov	r0, r5
 8008fa6:	47b8      	blx	r7
 8008fa8:	3001      	adds	r0, #1
 8008faa:	d1c0      	bne.n	8008f2e <_printf_float+0x316>
 8008fac:	e68f      	b.n	8008cce <_printf_float+0xb6>
 8008fae:	9a06      	ldr	r2, [sp, #24]
 8008fb0:	464b      	mov	r3, r9
 8008fb2:	4442      	add	r2, r8
 8008fb4:	4631      	mov	r1, r6
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	47b8      	blx	r7
 8008fba:	3001      	adds	r0, #1
 8008fbc:	d1c3      	bne.n	8008f46 <_printf_float+0x32e>
 8008fbe:	e686      	b.n	8008cce <_printf_float+0xb6>
 8008fc0:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008fc4:	f1ba 0f01 	cmp.w	sl, #1
 8008fc8:	dc01      	bgt.n	8008fce <_printf_float+0x3b6>
 8008fca:	07db      	lsls	r3, r3, #31
 8008fcc:	d536      	bpl.n	800903c <_printf_float+0x424>
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4642      	mov	r2, r8
 8008fd2:	4631      	mov	r1, r6
 8008fd4:	4628      	mov	r0, r5
 8008fd6:	47b8      	blx	r7
 8008fd8:	3001      	adds	r0, #1
 8008fda:	f43f ae78 	beq.w	8008cce <_printf_float+0xb6>
 8008fde:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008fe2:	4631      	mov	r1, r6
 8008fe4:	4628      	mov	r0, r5
 8008fe6:	47b8      	blx	r7
 8008fe8:	3001      	adds	r0, #1
 8008fea:	f43f ae70 	beq.w	8008cce <_printf_float+0xb6>
 8008fee:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008ff2:	2200      	movs	r2, #0
 8008ff4:	2300      	movs	r3, #0
 8008ff6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008ffa:	f7f7 fd65 	bl	8000ac8 <__aeabi_dcmpeq>
 8008ffe:	b9c0      	cbnz	r0, 8009032 <_printf_float+0x41a>
 8009000:	4653      	mov	r3, sl
 8009002:	f108 0201 	add.w	r2, r8, #1
 8009006:	4631      	mov	r1, r6
 8009008:	4628      	mov	r0, r5
 800900a:	47b8      	blx	r7
 800900c:	3001      	adds	r0, #1
 800900e:	d10c      	bne.n	800902a <_printf_float+0x412>
 8009010:	e65d      	b.n	8008cce <_printf_float+0xb6>
 8009012:	2301      	movs	r3, #1
 8009014:	465a      	mov	r2, fp
 8009016:	4631      	mov	r1, r6
 8009018:	4628      	mov	r0, r5
 800901a:	47b8      	blx	r7
 800901c:	3001      	adds	r0, #1
 800901e:	f43f ae56 	beq.w	8008cce <_printf_float+0xb6>
 8009022:	f108 0801 	add.w	r8, r8, #1
 8009026:	45d0      	cmp	r8, sl
 8009028:	dbf3      	blt.n	8009012 <_printf_float+0x3fa>
 800902a:	464b      	mov	r3, r9
 800902c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009030:	e6df      	b.n	8008df2 <_printf_float+0x1da>
 8009032:	f04f 0800 	mov.w	r8, #0
 8009036:	f104 0b1a 	add.w	fp, r4, #26
 800903a:	e7f4      	b.n	8009026 <_printf_float+0x40e>
 800903c:	2301      	movs	r3, #1
 800903e:	4642      	mov	r2, r8
 8009040:	e7e1      	b.n	8009006 <_printf_float+0x3ee>
 8009042:	2301      	movs	r3, #1
 8009044:	464a      	mov	r2, r9
 8009046:	4631      	mov	r1, r6
 8009048:	4628      	mov	r0, r5
 800904a:	47b8      	blx	r7
 800904c:	3001      	adds	r0, #1
 800904e:	f43f ae3e 	beq.w	8008cce <_printf_float+0xb6>
 8009052:	f108 0801 	add.w	r8, r8, #1
 8009056:	68e3      	ldr	r3, [r4, #12]
 8009058:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800905a:	1a5b      	subs	r3, r3, r1
 800905c:	4543      	cmp	r3, r8
 800905e:	dcf0      	bgt.n	8009042 <_printf_float+0x42a>
 8009060:	e6fc      	b.n	8008e5c <_printf_float+0x244>
 8009062:	f04f 0800 	mov.w	r8, #0
 8009066:	f104 0919 	add.w	r9, r4, #25
 800906a:	e7f4      	b.n	8009056 <_printf_float+0x43e>

0800906c <_printf_common>:
 800906c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009070:	4616      	mov	r6, r2
 8009072:	4698      	mov	r8, r3
 8009074:	688a      	ldr	r2, [r1, #8]
 8009076:	690b      	ldr	r3, [r1, #16]
 8009078:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800907c:	4293      	cmp	r3, r2
 800907e:	bfb8      	it	lt
 8009080:	4613      	movlt	r3, r2
 8009082:	6033      	str	r3, [r6, #0]
 8009084:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009088:	4607      	mov	r7, r0
 800908a:	460c      	mov	r4, r1
 800908c:	b10a      	cbz	r2, 8009092 <_printf_common+0x26>
 800908e:	3301      	adds	r3, #1
 8009090:	6033      	str	r3, [r6, #0]
 8009092:	6823      	ldr	r3, [r4, #0]
 8009094:	0699      	lsls	r1, r3, #26
 8009096:	bf42      	ittt	mi
 8009098:	6833      	ldrmi	r3, [r6, #0]
 800909a:	3302      	addmi	r3, #2
 800909c:	6033      	strmi	r3, [r6, #0]
 800909e:	6825      	ldr	r5, [r4, #0]
 80090a0:	f015 0506 	ands.w	r5, r5, #6
 80090a4:	d106      	bne.n	80090b4 <_printf_common+0x48>
 80090a6:	f104 0a19 	add.w	sl, r4, #25
 80090aa:	68e3      	ldr	r3, [r4, #12]
 80090ac:	6832      	ldr	r2, [r6, #0]
 80090ae:	1a9b      	subs	r3, r3, r2
 80090b0:	42ab      	cmp	r3, r5
 80090b2:	dc26      	bgt.n	8009102 <_printf_common+0x96>
 80090b4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80090b8:	6822      	ldr	r2, [r4, #0]
 80090ba:	3b00      	subs	r3, #0
 80090bc:	bf18      	it	ne
 80090be:	2301      	movne	r3, #1
 80090c0:	0692      	lsls	r2, r2, #26
 80090c2:	d42b      	bmi.n	800911c <_printf_common+0xb0>
 80090c4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80090c8:	4641      	mov	r1, r8
 80090ca:	4638      	mov	r0, r7
 80090cc:	47c8      	blx	r9
 80090ce:	3001      	adds	r0, #1
 80090d0:	d01e      	beq.n	8009110 <_printf_common+0xa4>
 80090d2:	6823      	ldr	r3, [r4, #0]
 80090d4:	6922      	ldr	r2, [r4, #16]
 80090d6:	f003 0306 	and.w	r3, r3, #6
 80090da:	2b04      	cmp	r3, #4
 80090dc:	bf02      	ittt	eq
 80090de:	68e5      	ldreq	r5, [r4, #12]
 80090e0:	6833      	ldreq	r3, [r6, #0]
 80090e2:	1aed      	subeq	r5, r5, r3
 80090e4:	68a3      	ldr	r3, [r4, #8]
 80090e6:	bf0c      	ite	eq
 80090e8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80090ec:	2500      	movne	r5, #0
 80090ee:	4293      	cmp	r3, r2
 80090f0:	bfc4      	itt	gt
 80090f2:	1a9b      	subgt	r3, r3, r2
 80090f4:	18ed      	addgt	r5, r5, r3
 80090f6:	2600      	movs	r6, #0
 80090f8:	341a      	adds	r4, #26
 80090fa:	42b5      	cmp	r5, r6
 80090fc:	d11a      	bne.n	8009134 <_printf_common+0xc8>
 80090fe:	2000      	movs	r0, #0
 8009100:	e008      	b.n	8009114 <_printf_common+0xa8>
 8009102:	2301      	movs	r3, #1
 8009104:	4652      	mov	r2, sl
 8009106:	4641      	mov	r1, r8
 8009108:	4638      	mov	r0, r7
 800910a:	47c8      	blx	r9
 800910c:	3001      	adds	r0, #1
 800910e:	d103      	bne.n	8009118 <_printf_common+0xac>
 8009110:	f04f 30ff 	mov.w	r0, #4294967295
 8009114:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009118:	3501      	adds	r5, #1
 800911a:	e7c6      	b.n	80090aa <_printf_common+0x3e>
 800911c:	18e1      	adds	r1, r4, r3
 800911e:	1c5a      	adds	r2, r3, #1
 8009120:	2030      	movs	r0, #48	@ 0x30
 8009122:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009126:	4422      	add	r2, r4
 8009128:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800912c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009130:	3302      	adds	r3, #2
 8009132:	e7c7      	b.n	80090c4 <_printf_common+0x58>
 8009134:	2301      	movs	r3, #1
 8009136:	4622      	mov	r2, r4
 8009138:	4641      	mov	r1, r8
 800913a:	4638      	mov	r0, r7
 800913c:	47c8      	blx	r9
 800913e:	3001      	adds	r0, #1
 8009140:	d0e6      	beq.n	8009110 <_printf_common+0xa4>
 8009142:	3601      	adds	r6, #1
 8009144:	e7d9      	b.n	80090fa <_printf_common+0x8e>
	...

08009148 <_printf_i>:
 8009148:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800914c:	7e0f      	ldrb	r7, [r1, #24]
 800914e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009150:	2f78      	cmp	r7, #120	@ 0x78
 8009152:	4691      	mov	r9, r2
 8009154:	4680      	mov	r8, r0
 8009156:	460c      	mov	r4, r1
 8009158:	469a      	mov	sl, r3
 800915a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800915e:	d807      	bhi.n	8009170 <_printf_i+0x28>
 8009160:	2f62      	cmp	r7, #98	@ 0x62
 8009162:	d80a      	bhi.n	800917a <_printf_i+0x32>
 8009164:	2f00      	cmp	r7, #0
 8009166:	f000 80d1 	beq.w	800930c <_printf_i+0x1c4>
 800916a:	2f58      	cmp	r7, #88	@ 0x58
 800916c:	f000 80b8 	beq.w	80092e0 <_printf_i+0x198>
 8009170:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009174:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009178:	e03a      	b.n	80091f0 <_printf_i+0xa8>
 800917a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800917e:	2b15      	cmp	r3, #21
 8009180:	d8f6      	bhi.n	8009170 <_printf_i+0x28>
 8009182:	a101      	add	r1, pc, #4	@ (adr r1, 8009188 <_printf_i+0x40>)
 8009184:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009188:	080091e1 	.word	0x080091e1
 800918c:	080091f5 	.word	0x080091f5
 8009190:	08009171 	.word	0x08009171
 8009194:	08009171 	.word	0x08009171
 8009198:	08009171 	.word	0x08009171
 800919c:	08009171 	.word	0x08009171
 80091a0:	080091f5 	.word	0x080091f5
 80091a4:	08009171 	.word	0x08009171
 80091a8:	08009171 	.word	0x08009171
 80091ac:	08009171 	.word	0x08009171
 80091b0:	08009171 	.word	0x08009171
 80091b4:	080092f3 	.word	0x080092f3
 80091b8:	0800921f 	.word	0x0800921f
 80091bc:	080092ad 	.word	0x080092ad
 80091c0:	08009171 	.word	0x08009171
 80091c4:	08009171 	.word	0x08009171
 80091c8:	08009315 	.word	0x08009315
 80091cc:	08009171 	.word	0x08009171
 80091d0:	0800921f 	.word	0x0800921f
 80091d4:	08009171 	.word	0x08009171
 80091d8:	08009171 	.word	0x08009171
 80091dc:	080092b5 	.word	0x080092b5
 80091e0:	6833      	ldr	r3, [r6, #0]
 80091e2:	1d1a      	adds	r2, r3, #4
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	6032      	str	r2, [r6, #0]
 80091e8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80091ec:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80091f0:	2301      	movs	r3, #1
 80091f2:	e09c      	b.n	800932e <_printf_i+0x1e6>
 80091f4:	6833      	ldr	r3, [r6, #0]
 80091f6:	6820      	ldr	r0, [r4, #0]
 80091f8:	1d19      	adds	r1, r3, #4
 80091fa:	6031      	str	r1, [r6, #0]
 80091fc:	0606      	lsls	r6, r0, #24
 80091fe:	d501      	bpl.n	8009204 <_printf_i+0xbc>
 8009200:	681d      	ldr	r5, [r3, #0]
 8009202:	e003      	b.n	800920c <_printf_i+0xc4>
 8009204:	0645      	lsls	r5, r0, #25
 8009206:	d5fb      	bpl.n	8009200 <_printf_i+0xb8>
 8009208:	f9b3 5000 	ldrsh.w	r5, [r3]
 800920c:	2d00      	cmp	r5, #0
 800920e:	da03      	bge.n	8009218 <_printf_i+0xd0>
 8009210:	232d      	movs	r3, #45	@ 0x2d
 8009212:	426d      	negs	r5, r5
 8009214:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009218:	4858      	ldr	r0, [pc, #352]	@ (800937c <_printf_i+0x234>)
 800921a:	230a      	movs	r3, #10
 800921c:	e011      	b.n	8009242 <_printf_i+0xfa>
 800921e:	6821      	ldr	r1, [r4, #0]
 8009220:	6833      	ldr	r3, [r6, #0]
 8009222:	0608      	lsls	r0, r1, #24
 8009224:	f853 5b04 	ldr.w	r5, [r3], #4
 8009228:	d402      	bmi.n	8009230 <_printf_i+0xe8>
 800922a:	0649      	lsls	r1, r1, #25
 800922c:	bf48      	it	mi
 800922e:	b2ad      	uxthmi	r5, r5
 8009230:	2f6f      	cmp	r7, #111	@ 0x6f
 8009232:	4852      	ldr	r0, [pc, #328]	@ (800937c <_printf_i+0x234>)
 8009234:	6033      	str	r3, [r6, #0]
 8009236:	bf14      	ite	ne
 8009238:	230a      	movne	r3, #10
 800923a:	2308      	moveq	r3, #8
 800923c:	2100      	movs	r1, #0
 800923e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009242:	6866      	ldr	r6, [r4, #4]
 8009244:	60a6      	str	r6, [r4, #8]
 8009246:	2e00      	cmp	r6, #0
 8009248:	db05      	blt.n	8009256 <_printf_i+0x10e>
 800924a:	6821      	ldr	r1, [r4, #0]
 800924c:	432e      	orrs	r6, r5
 800924e:	f021 0104 	bic.w	r1, r1, #4
 8009252:	6021      	str	r1, [r4, #0]
 8009254:	d04b      	beq.n	80092ee <_printf_i+0x1a6>
 8009256:	4616      	mov	r6, r2
 8009258:	fbb5 f1f3 	udiv	r1, r5, r3
 800925c:	fb03 5711 	mls	r7, r3, r1, r5
 8009260:	5dc7      	ldrb	r7, [r0, r7]
 8009262:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009266:	462f      	mov	r7, r5
 8009268:	42bb      	cmp	r3, r7
 800926a:	460d      	mov	r5, r1
 800926c:	d9f4      	bls.n	8009258 <_printf_i+0x110>
 800926e:	2b08      	cmp	r3, #8
 8009270:	d10b      	bne.n	800928a <_printf_i+0x142>
 8009272:	6823      	ldr	r3, [r4, #0]
 8009274:	07df      	lsls	r7, r3, #31
 8009276:	d508      	bpl.n	800928a <_printf_i+0x142>
 8009278:	6923      	ldr	r3, [r4, #16]
 800927a:	6861      	ldr	r1, [r4, #4]
 800927c:	4299      	cmp	r1, r3
 800927e:	bfde      	ittt	le
 8009280:	2330      	movle	r3, #48	@ 0x30
 8009282:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009286:	f106 36ff 	addle.w	r6, r6, #4294967295
 800928a:	1b92      	subs	r2, r2, r6
 800928c:	6122      	str	r2, [r4, #16]
 800928e:	f8cd a000 	str.w	sl, [sp]
 8009292:	464b      	mov	r3, r9
 8009294:	aa03      	add	r2, sp, #12
 8009296:	4621      	mov	r1, r4
 8009298:	4640      	mov	r0, r8
 800929a:	f7ff fee7 	bl	800906c <_printf_common>
 800929e:	3001      	adds	r0, #1
 80092a0:	d14a      	bne.n	8009338 <_printf_i+0x1f0>
 80092a2:	f04f 30ff 	mov.w	r0, #4294967295
 80092a6:	b004      	add	sp, #16
 80092a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092ac:	6823      	ldr	r3, [r4, #0]
 80092ae:	f043 0320 	orr.w	r3, r3, #32
 80092b2:	6023      	str	r3, [r4, #0]
 80092b4:	4832      	ldr	r0, [pc, #200]	@ (8009380 <_printf_i+0x238>)
 80092b6:	2778      	movs	r7, #120	@ 0x78
 80092b8:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80092bc:	6823      	ldr	r3, [r4, #0]
 80092be:	6831      	ldr	r1, [r6, #0]
 80092c0:	061f      	lsls	r7, r3, #24
 80092c2:	f851 5b04 	ldr.w	r5, [r1], #4
 80092c6:	d402      	bmi.n	80092ce <_printf_i+0x186>
 80092c8:	065f      	lsls	r7, r3, #25
 80092ca:	bf48      	it	mi
 80092cc:	b2ad      	uxthmi	r5, r5
 80092ce:	6031      	str	r1, [r6, #0]
 80092d0:	07d9      	lsls	r1, r3, #31
 80092d2:	bf44      	itt	mi
 80092d4:	f043 0320 	orrmi.w	r3, r3, #32
 80092d8:	6023      	strmi	r3, [r4, #0]
 80092da:	b11d      	cbz	r5, 80092e4 <_printf_i+0x19c>
 80092dc:	2310      	movs	r3, #16
 80092de:	e7ad      	b.n	800923c <_printf_i+0xf4>
 80092e0:	4826      	ldr	r0, [pc, #152]	@ (800937c <_printf_i+0x234>)
 80092e2:	e7e9      	b.n	80092b8 <_printf_i+0x170>
 80092e4:	6823      	ldr	r3, [r4, #0]
 80092e6:	f023 0320 	bic.w	r3, r3, #32
 80092ea:	6023      	str	r3, [r4, #0]
 80092ec:	e7f6      	b.n	80092dc <_printf_i+0x194>
 80092ee:	4616      	mov	r6, r2
 80092f0:	e7bd      	b.n	800926e <_printf_i+0x126>
 80092f2:	6833      	ldr	r3, [r6, #0]
 80092f4:	6825      	ldr	r5, [r4, #0]
 80092f6:	6961      	ldr	r1, [r4, #20]
 80092f8:	1d18      	adds	r0, r3, #4
 80092fa:	6030      	str	r0, [r6, #0]
 80092fc:	062e      	lsls	r6, r5, #24
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	d501      	bpl.n	8009306 <_printf_i+0x1be>
 8009302:	6019      	str	r1, [r3, #0]
 8009304:	e002      	b.n	800930c <_printf_i+0x1c4>
 8009306:	0668      	lsls	r0, r5, #25
 8009308:	d5fb      	bpl.n	8009302 <_printf_i+0x1ba>
 800930a:	8019      	strh	r1, [r3, #0]
 800930c:	2300      	movs	r3, #0
 800930e:	6123      	str	r3, [r4, #16]
 8009310:	4616      	mov	r6, r2
 8009312:	e7bc      	b.n	800928e <_printf_i+0x146>
 8009314:	6833      	ldr	r3, [r6, #0]
 8009316:	1d1a      	adds	r2, r3, #4
 8009318:	6032      	str	r2, [r6, #0]
 800931a:	681e      	ldr	r6, [r3, #0]
 800931c:	6862      	ldr	r2, [r4, #4]
 800931e:	2100      	movs	r1, #0
 8009320:	4630      	mov	r0, r6
 8009322:	f7f6 ff55 	bl	80001d0 <memchr>
 8009326:	b108      	cbz	r0, 800932c <_printf_i+0x1e4>
 8009328:	1b80      	subs	r0, r0, r6
 800932a:	6060      	str	r0, [r4, #4]
 800932c:	6863      	ldr	r3, [r4, #4]
 800932e:	6123      	str	r3, [r4, #16]
 8009330:	2300      	movs	r3, #0
 8009332:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009336:	e7aa      	b.n	800928e <_printf_i+0x146>
 8009338:	6923      	ldr	r3, [r4, #16]
 800933a:	4632      	mov	r2, r6
 800933c:	4649      	mov	r1, r9
 800933e:	4640      	mov	r0, r8
 8009340:	47d0      	blx	sl
 8009342:	3001      	adds	r0, #1
 8009344:	d0ad      	beq.n	80092a2 <_printf_i+0x15a>
 8009346:	6823      	ldr	r3, [r4, #0]
 8009348:	079b      	lsls	r3, r3, #30
 800934a:	d413      	bmi.n	8009374 <_printf_i+0x22c>
 800934c:	68e0      	ldr	r0, [r4, #12]
 800934e:	9b03      	ldr	r3, [sp, #12]
 8009350:	4298      	cmp	r0, r3
 8009352:	bfb8      	it	lt
 8009354:	4618      	movlt	r0, r3
 8009356:	e7a6      	b.n	80092a6 <_printf_i+0x15e>
 8009358:	2301      	movs	r3, #1
 800935a:	4632      	mov	r2, r6
 800935c:	4649      	mov	r1, r9
 800935e:	4640      	mov	r0, r8
 8009360:	47d0      	blx	sl
 8009362:	3001      	adds	r0, #1
 8009364:	d09d      	beq.n	80092a2 <_printf_i+0x15a>
 8009366:	3501      	adds	r5, #1
 8009368:	68e3      	ldr	r3, [r4, #12]
 800936a:	9903      	ldr	r1, [sp, #12]
 800936c:	1a5b      	subs	r3, r3, r1
 800936e:	42ab      	cmp	r3, r5
 8009370:	dcf2      	bgt.n	8009358 <_printf_i+0x210>
 8009372:	e7eb      	b.n	800934c <_printf_i+0x204>
 8009374:	2500      	movs	r5, #0
 8009376:	f104 0619 	add.w	r6, r4, #25
 800937a:	e7f5      	b.n	8009368 <_printf_i+0x220>
 800937c:	0800bd02 	.word	0x0800bd02
 8009380:	0800bd13 	.word	0x0800bd13

08009384 <std>:
 8009384:	2300      	movs	r3, #0
 8009386:	b510      	push	{r4, lr}
 8009388:	4604      	mov	r4, r0
 800938a:	e9c0 3300 	strd	r3, r3, [r0]
 800938e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8009392:	6083      	str	r3, [r0, #8]
 8009394:	8181      	strh	r1, [r0, #12]
 8009396:	6643      	str	r3, [r0, #100]	@ 0x64
 8009398:	81c2      	strh	r2, [r0, #14]
 800939a:	6183      	str	r3, [r0, #24]
 800939c:	4619      	mov	r1, r3
 800939e:	2208      	movs	r2, #8
 80093a0:	305c      	adds	r0, #92	@ 0x5c
 80093a2:	f000 f926 	bl	80095f2 <memset>
 80093a6:	4b0d      	ldr	r3, [pc, #52]	@ (80093dc <std+0x58>)
 80093a8:	6263      	str	r3, [r4, #36]	@ 0x24
 80093aa:	4b0d      	ldr	r3, [pc, #52]	@ (80093e0 <std+0x5c>)
 80093ac:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093ae:	4b0d      	ldr	r3, [pc, #52]	@ (80093e4 <std+0x60>)
 80093b0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093b2:	4b0d      	ldr	r3, [pc, #52]	@ (80093e8 <std+0x64>)
 80093b4:	6323      	str	r3, [r4, #48]	@ 0x30
 80093b6:	4b0d      	ldr	r3, [pc, #52]	@ (80093ec <std+0x68>)
 80093b8:	6224      	str	r4, [r4, #32]
 80093ba:	429c      	cmp	r4, r3
 80093bc:	d006      	beq.n	80093cc <std+0x48>
 80093be:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093c2:	4294      	cmp	r4, r2
 80093c4:	d002      	beq.n	80093cc <std+0x48>
 80093c6:	33d0      	adds	r3, #208	@ 0xd0
 80093c8:	429c      	cmp	r4, r3
 80093ca:	d105      	bne.n	80093d8 <std+0x54>
 80093cc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093d4:	f000 b99a 	b.w	800970c <__retarget_lock_init_recursive>
 80093d8:	bd10      	pop	{r4, pc}
 80093da:	bf00      	nop
 80093dc:	0800954d 	.word	0x0800954d
 80093e0:	0800956f 	.word	0x0800956f
 80093e4:	080095a7 	.word	0x080095a7
 80093e8:	080095cb 	.word	0x080095cb
 80093ec:	200004f0 	.word	0x200004f0

080093f0 <stdio_exit_handler>:
 80093f0:	4a02      	ldr	r2, [pc, #8]	@ (80093fc <stdio_exit_handler+0xc>)
 80093f2:	4903      	ldr	r1, [pc, #12]	@ (8009400 <stdio_exit_handler+0x10>)
 80093f4:	4803      	ldr	r0, [pc, #12]	@ (8009404 <stdio_exit_handler+0x14>)
 80093f6:	f000 b869 	b.w	80094cc <_fwalk_sglue>
 80093fa:	bf00      	nop
 80093fc:	20000028 	.word	0x20000028
 8009400:	0800af19 	.word	0x0800af19
 8009404:	20000038 	.word	0x20000038

08009408 <cleanup_stdio>:
 8009408:	6841      	ldr	r1, [r0, #4]
 800940a:	4b0c      	ldr	r3, [pc, #48]	@ (800943c <cleanup_stdio+0x34>)
 800940c:	4299      	cmp	r1, r3
 800940e:	b510      	push	{r4, lr}
 8009410:	4604      	mov	r4, r0
 8009412:	d001      	beq.n	8009418 <cleanup_stdio+0x10>
 8009414:	f001 fd80 	bl	800af18 <_fflush_r>
 8009418:	68a1      	ldr	r1, [r4, #8]
 800941a:	4b09      	ldr	r3, [pc, #36]	@ (8009440 <cleanup_stdio+0x38>)
 800941c:	4299      	cmp	r1, r3
 800941e:	d002      	beq.n	8009426 <cleanup_stdio+0x1e>
 8009420:	4620      	mov	r0, r4
 8009422:	f001 fd79 	bl	800af18 <_fflush_r>
 8009426:	68e1      	ldr	r1, [r4, #12]
 8009428:	4b06      	ldr	r3, [pc, #24]	@ (8009444 <cleanup_stdio+0x3c>)
 800942a:	4299      	cmp	r1, r3
 800942c:	d004      	beq.n	8009438 <cleanup_stdio+0x30>
 800942e:	4620      	mov	r0, r4
 8009430:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009434:	f001 bd70 	b.w	800af18 <_fflush_r>
 8009438:	bd10      	pop	{r4, pc}
 800943a:	bf00      	nop
 800943c:	200004f0 	.word	0x200004f0
 8009440:	20000558 	.word	0x20000558
 8009444:	200005c0 	.word	0x200005c0

08009448 <global_stdio_init.part.0>:
 8009448:	b510      	push	{r4, lr}
 800944a:	4b0b      	ldr	r3, [pc, #44]	@ (8009478 <global_stdio_init.part.0+0x30>)
 800944c:	4c0b      	ldr	r4, [pc, #44]	@ (800947c <global_stdio_init.part.0+0x34>)
 800944e:	4a0c      	ldr	r2, [pc, #48]	@ (8009480 <global_stdio_init.part.0+0x38>)
 8009450:	601a      	str	r2, [r3, #0]
 8009452:	4620      	mov	r0, r4
 8009454:	2200      	movs	r2, #0
 8009456:	2104      	movs	r1, #4
 8009458:	f7ff ff94 	bl	8009384 <std>
 800945c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009460:	2201      	movs	r2, #1
 8009462:	2109      	movs	r1, #9
 8009464:	f7ff ff8e 	bl	8009384 <std>
 8009468:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800946c:	2202      	movs	r2, #2
 800946e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009472:	2112      	movs	r1, #18
 8009474:	f7ff bf86 	b.w	8009384 <std>
 8009478:	20000628 	.word	0x20000628
 800947c:	200004f0 	.word	0x200004f0
 8009480:	080093f1 	.word	0x080093f1

08009484 <__sfp_lock_acquire>:
 8009484:	4801      	ldr	r0, [pc, #4]	@ (800948c <__sfp_lock_acquire+0x8>)
 8009486:	f000 b942 	b.w	800970e <__retarget_lock_acquire_recursive>
 800948a:	bf00      	nop
 800948c:	20000631 	.word	0x20000631

08009490 <__sfp_lock_release>:
 8009490:	4801      	ldr	r0, [pc, #4]	@ (8009498 <__sfp_lock_release+0x8>)
 8009492:	f000 b93d 	b.w	8009710 <__retarget_lock_release_recursive>
 8009496:	bf00      	nop
 8009498:	20000631 	.word	0x20000631

0800949c <__sinit>:
 800949c:	b510      	push	{r4, lr}
 800949e:	4604      	mov	r4, r0
 80094a0:	f7ff fff0 	bl	8009484 <__sfp_lock_acquire>
 80094a4:	6a23      	ldr	r3, [r4, #32]
 80094a6:	b11b      	cbz	r3, 80094b0 <__sinit+0x14>
 80094a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094ac:	f7ff bff0 	b.w	8009490 <__sfp_lock_release>
 80094b0:	4b04      	ldr	r3, [pc, #16]	@ (80094c4 <__sinit+0x28>)
 80094b2:	6223      	str	r3, [r4, #32]
 80094b4:	4b04      	ldr	r3, [pc, #16]	@ (80094c8 <__sinit+0x2c>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	2b00      	cmp	r3, #0
 80094ba:	d1f5      	bne.n	80094a8 <__sinit+0xc>
 80094bc:	f7ff ffc4 	bl	8009448 <global_stdio_init.part.0>
 80094c0:	e7f2      	b.n	80094a8 <__sinit+0xc>
 80094c2:	bf00      	nop
 80094c4:	08009409 	.word	0x08009409
 80094c8:	20000628 	.word	0x20000628

080094cc <_fwalk_sglue>:
 80094cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094d0:	4607      	mov	r7, r0
 80094d2:	4688      	mov	r8, r1
 80094d4:	4614      	mov	r4, r2
 80094d6:	2600      	movs	r6, #0
 80094d8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094dc:	f1b9 0901 	subs.w	r9, r9, #1
 80094e0:	d505      	bpl.n	80094ee <_fwalk_sglue+0x22>
 80094e2:	6824      	ldr	r4, [r4, #0]
 80094e4:	2c00      	cmp	r4, #0
 80094e6:	d1f7      	bne.n	80094d8 <_fwalk_sglue+0xc>
 80094e8:	4630      	mov	r0, r6
 80094ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ee:	89ab      	ldrh	r3, [r5, #12]
 80094f0:	2b01      	cmp	r3, #1
 80094f2:	d907      	bls.n	8009504 <_fwalk_sglue+0x38>
 80094f4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80094f8:	3301      	adds	r3, #1
 80094fa:	d003      	beq.n	8009504 <_fwalk_sglue+0x38>
 80094fc:	4629      	mov	r1, r5
 80094fe:	4638      	mov	r0, r7
 8009500:	47c0      	blx	r8
 8009502:	4306      	orrs	r6, r0
 8009504:	3568      	adds	r5, #104	@ 0x68
 8009506:	e7e9      	b.n	80094dc <_fwalk_sglue+0x10>

08009508 <siprintf>:
 8009508:	b40e      	push	{r1, r2, r3}
 800950a:	b510      	push	{r4, lr}
 800950c:	b09d      	sub	sp, #116	@ 0x74
 800950e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8009510:	9002      	str	r0, [sp, #8]
 8009512:	9006      	str	r0, [sp, #24]
 8009514:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8009518:	480a      	ldr	r0, [pc, #40]	@ (8009544 <siprintf+0x3c>)
 800951a:	9107      	str	r1, [sp, #28]
 800951c:	9104      	str	r1, [sp, #16]
 800951e:	490a      	ldr	r1, [pc, #40]	@ (8009548 <siprintf+0x40>)
 8009520:	f853 2b04 	ldr.w	r2, [r3], #4
 8009524:	9105      	str	r1, [sp, #20]
 8009526:	2400      	movs	r4, #0
 8009528:	a902      	add	r1, sp, #8
 800952a:	6800      	ldr	r0, [r0, #0]
 800952c:	9301      	str	r3, [sp, #4]
 800952e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8009530:	f001 fb72 	bl	800ac18 <_svfiprintf_r>
 8009534:	9b02      	ldr	r3, [sp, #8]
 8009536:	701c      	strb	r4, [r3, #0]
 8009538:	b01d      	add	sp, #116	@ 0x74
 800953a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800953e:	b003      	add	sp, #12
 8009540:	4770      	bx	lr
 8009542:	bf00      	nop
 8009544:	20000034 	.word	0x20000034
 8009548:	ffff0208 	.word	0xffff0208

0800954c <__sread>:
 800954c:	b510      	push	{r4, lr}
 800954e:	460c      	mov	r4, r1
 8009550:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009554:	f000 f87c 	bl	8009650 <_read_r>
 8009558:	2800      	cmp	r0, #0
 800955a:	bfab      	itete	ge
 800955c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800955e:	89a3      	ldrhlt	r3, [r4, #12]
 8009560:	181b      	addge	r3, r3, r0
 8009562:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009566:	bfac      	ite	ge
 8009568:	6563      	strge	r3, [r4, #84]	@ 0x54
 800956a:	81a3      	strhlt	r3, [r4, #12]
 800956c:	bd10      	pop	{r4, pc}

0800956e <__swrite>:
 800956e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009572:	461f      	mov	r7, r3
 8009574:	898b      	ldrh	r3, [r1, #12]
 8009576:	05db      	lsls	r3, r3, #23
 8009578:	4605      	mov	r5, r0
 800957a:	460c      	mov	r4, r1
 800957c:	4616      	mov	r6, r2
 800957e:	d505      	bpl.n	800958c <__swrite+0x1e>
 8009580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009584:	2302      	movs	r3, #2
 8009586:	2200      	movs	r2, #0
 8009588:	f000 f850 	bl	800962c <_lseek_r>
 800958c:	89a3      	ldrh	r3, [r4, #12]
 800958e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009592:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009596:	81a3      	strh	r3, [r4, #12]
 8009598:	4632      	mov	r2, r6
 800959a:	463b      	mov	r3, r7
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80095a2:	f000 b877 	b.w	8009694 <_write_r>

080095a6 <__sseek>:
 80095a6:	b510      	push	{r4, lr}
 80095a8:	460c      	mov	r4, r1
 80095aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ae:	f000 f83d 	bl	800962c <_lseek_r>
 80095b2:	1c43      	adds	r3, r0, #1
 80095b4:	89a3      	ldrh	r3, [r4, #12]
 80095b6:	bf15      	itete	ne
 80095b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80095ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80095be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80095c2:	81a3      	strheq	r3, [r4, #12]
 80095c4:	bf18      	it	ne
 80095c6:	81a3      	strhne	r3, [r4, #12]
 80095c8:	bd10      	pop	{r4, pc}

080095ca <__sclose>:
 80095ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80095ce:	f000 b81d 	b.w	800960c <_close_r>

080095d2 <memcmp>:
 80095d2:	b510      	push	{r4, lr}
 80095d4:	3901      	subs	r1, #1
 80095d6:	4402      	add	r2, r0
 80095d8:	4290      	cmp	r0, r2
 80095da:	d101      	bne.n	80095e0 <memcmp+0xe>
 80095dc:	2000      	movs	r0, #0
 80095de:	e005      	b.n	80095ec <memcmp+0x1a>
 80095e0:	7803      	ldrb	r3, [r0, #0]
 80095e2:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80095e6:	42a3      	cmp	r3, r4
 80095e8:	d001      	beq.n	80095ee <memcmp+0x1c>
 80095ea:	1b18      	subs	r0, r3, r4
 80095ec:	bd10      	pop	{r4, pc}
 80095ee:	3001      	adds	r0, #1
 80095f0:	e7f2      	b.n	80095d8 <memcmp+0x6>

080095f2 <memset>:
 80095f2:	4402      	add	r2, r0
 80095f4:	4603      	mov	r3, r0
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d100      	bne.n	80095fc <memset+0xa>
 80095fa:	4770      	bx	lr
 80095fc:	f803 1b01 	strb.w	r1, [r3], #1
 8009600:	e7f9      	b.n	80095f6 <memset+0x4>
	...

08009604 <_localeconv_r>:
 8009604:	4800      	ldr	r0, [pc, #0]	@ (8009608 <_localeconv_r+0x4>)
 8009606:	4770      	bx	lr
 8009608:	20000174 	.word	0x20000174

0800960c <_close_r>:
 800960c:	b538      	push	{r3, r4, r5, lr}
 800960e:	4d06      	ldr	r5, [pc, #24]	@ (8009628 <_close_r+0x1c>)
 8009610:	2300      	movs	r3, #0
 8009612:	4604      	mov	r4, r0
 8009614:	4608      	mov	r0, r1
 8009616:	602b      	str	r3, [r5, #0]
 8009618:	f7fa fc9e 	bl	8003f58 <_close>
 800961c:	1c43      	adds	r3, r0, #1
 800961e:	d102      	bne.n	8009626 <_close_r+0x1a>
 8009620:	682b      	ldr	r3, [r5, #0]
 8009622:	b103      	cbz	r3, 8009626 <_close_r+0x1a>
 8009624:	6023      	str	r3, [r4, #0]
 8009626:	bd38      	pop	{r3, r4, r5, pc}
 8009628:	2000062c 	.word	0x2000062c

0800962c <_lseek_r>:
 800962c:	b538      	push	{r3, r4, r5, lr}
 800962e:	4d07      	ldr	r5, [pc, #28]	@ (800964c <_lseek_r+0x20>)
 8009630:	4604      	mov	r4, r0
 8009632:	4608      	mov	r0, r1
 8009634:	4611      	mov	r1, r2
 8009636:	2200      	movs	r2, #0
 8009638:	602a      	str	r2, [r5, #0]
 800963a:	461a      	mov	r2, r3
 800963c:	f7fa fcb3 	bl	8003fa6 <_lseek>
 8009640:	1c43      	adds	r3, r0, #1
 8009642:	d102      	bne.n	800964a <_lseek_r+0x1e>
 8009644:	682b      	ldr	r3, [r5, #0]
 8009646:	b103      	cbz	r3, 800964a <_lseek_r+0x1e>
 8009648:	6023      	str	r3, [r4, #0]
 800964a:	bd38      	pop	{r3, r4, r5, pc}
 800964c:	2000062c 	.word	0x2000062c

08009650 <_read_r>:
 8009650:	b538      	push	{r3, r4, r5, lr}
 8009652:	4d07      	ldr	r5, [pc, #28]	@ (8009670 <_read_r+0x20>)
 8009654:	4604      	mov	r4, r0
 8009656:	4608      	mov	r0, r1
 8009658:	4611      	mov	r1, r2
 800965a:	2200      	movs	r2, #0
 800965c:	602a      	str	r2, [r5, #0]
 800965e:	461a      	mov	r2, r3
 8009660:	f7fa fc41 	bl	8003ee6 <_read>
 8009664:	1c43      	adds	r3, r0, #1
 8009666:	d102      	bne.n	800966e <_read_r+0x1e>
 8009668:	682b      	ldr	r3, [r5, #0]
 800966a:	b103      	cbz	r3, 800966e <_read_r+0x1e>
 800966c:	6023      	str	r3, [r4, #0]
 800966e:	bd38      	pop	{r3, r4, r5, pc}
 8009670:	2000062c 	.word	0x2000062c

08009674 <_sbrk_r>:
 8009674:	b538      	push	{r3, r4, r5, lr}
 8009676:	4d06      	ldr	r5, [pc, #24]	@ (8009690 <_sbrk_r+0x1c>)
 8009678:	2300      	movs	r3, #0
 800967a:	4604      	mov	r4, r0
 800967c:	4608      	mov	r0, r1
 800967e:	602b      	str	r3, [r5, #0]
 8009680:	f7fa fc9e 	bl	8003fc0 <_sbrk>
 8009684:	1c43      	adds	r3, r0, #1
 8009686:	d102      	bne.n	800968e <_sbrk_r+0x1a>
 8009688:	682b      	ldr	r3, [r5, #0]
 800968a:	b103      	cbz	r3, 800968e <_sbrk_r+0x1a>
 800968c:	6023      	str	r3, [r4, #0]
 800968e:	bd38      	pop	{r3, r4, r5, pc}
 8009690:	2000062c 	.word	0x2000062c

08009694 <_write_r>:
 8009694:	b538      	push	{r3, r4, r5, lr}
 8009696:	4d07      	ldr	r5, [pc, #28]	@ (80096b4 <_write_r+0x20>)
 8009698:	4604      	mov	r4, r0
 800969a:	4608      	mov	r0, r1
 800969c:	4611      	mov	r1, r2
 800969e:	2200      	movs	r2, #0
 80096a0:	602a      	str	r2, [r5, #0]
 80096a2:	461a      	mov	r2, r3
 80096a4:	f7fa fc3c 	bl	8003f20 <_write>
 80096a8:	1c43      	adds	r3, r0, #1
 80096aa:	d102      	bne.n	80096b2 <_write_r+0x1e>
 80096ac:	682b      	ldr	r3, [r5, #0]
 80096ae:	b103      	cbz	r3, 80096b2 <_write_r+0x1e>
 80096b0:	6023      	str	r3, [r4, #0]
 80096b2:	bd38      	pop	{r3, r4, r5, pc}
 80096b4:	2000062c 	.word	0x2000062c

080096b8 <__errno>:
 80096b8:	4b01      	ldr	r3, [pc, #4]	@ (80096c0 <__errno+0x8>)
 80096ba:	6818      	ldr	r0, [r3, #0]
 80096bc:	4770      	bx	lr
 80096be:	bf00      	nop
 80096c0:	20000034 	.word	0x20000034

080096c4 <__libc_init_array>:
 80096c4:	b570      	push	{r4, r5, r6, lr}
 80096c6:	4d0d      	ldr	r5, [pc, #52]	@ (80096fc <__libc_init_array+0x38>)
 80096c8:	4c0d      	ldr	r4, [pc, #52]	@ (8009700 <__libc_init_array+0x3c>)
 80096ca:	1b64      	subs	r4, r4, r5
 80096cc:	10a4      	asrs	r4, r4, #2
 80096ce:	2600      	movs	r6, #0
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	d109      	bne.n	80096e8 <__libc_init_array+0x24>
 80096d4:	4d0b      	ldr	r5, [pc, #44]	@ (8009704 <__libc_init_array+0x40>)
 80096d6:	4c0c      	ldr	r4, [pc, #48]	@ (8009708 <__libc_init_array+0x44>)
 80096d8:	f001 ff98 	bl	800b60c <_init>
 80096dc:	1b64      	subs	r4, r4, r5
 80096de:	10a4      	asrs	r4, r4, #2
 80096e0:	2600      	movs	r6, #0
 80096e2:	42a6      	cmp	r6, r4
 80096e4:	d105      	bne.n	80096f2 <__libc_init_array+0x2e>
 80096e6:	bd70      	pop	{r4, r5, r6, pc}
 80096e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80096ec:	4798      	blx	r3
 80096ee:	3601      	adds	r6, #1
 80096f0:	e7ee      	b.n	80096d0 <__libc_init_array+0xc>
 80096f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80096f6:	4798      	blx	r3
 80096f8:	3601      	adds	r6, #1
 80096fa:	e7f2      	b.n	80096e2 <__libc_init_array+0x1e>
 80096fc:	0800c06c 	.word	0x0800c06c
 8009700:	0800c06c 	.word	0x0800c06c
 8009704:	0800c06c 	.word	0x0800c06c
 8009708:	0800c070 	.word	0x0800c070

0800970c <__retarget_lock_init_recursive>:
 800970c:	4770      	bx	lr

0800970e <__retarget_lock_acquire_recursive>:
 800970e:	4770      	bx	lr

08009710 <__retarget_lock_release_recursive>:
 8009710:	4770      	bx	lr

08009712 <strcpy>:
 8009712:	4603      	mov	r3, r0
 8009714:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009718:	f803 2b01 	strb.w	r2, [r3], #1
 800971c:	2a00      	cmp	r2, #0
 800971e:	d1f9      	bne.n	8009714 <strcpy+0x2>
 8009720:	4770      	bx	lr

08009722 <quorem>:
 8009722:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009726:	6903      	ldr	r3, [r0, #16]
 8009728:	690c      	ldr	r4, [r1, #16]
 800972a:	42a3      	cmp	r3, r4
 800972c:	4607      	mov	r7, r0
 800972e:	db7e      	blt.n	800982e <quorem+0x10c>
 8009730:	3c01      	subs	r4, #1
 8009732:	f101 0814 	add.w	r8, r1, #20
 8009736:	00a3      	lsls	r3, r4, #2
 8009738:	f100 0514 	add.w	r5, r0, #20
 800973c:	9300      	str	r3, [sp, #0]
 800973e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009742:	9301      	str	r3, [sp, #4]
 8009744:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009748:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800974c:	3301      	adds	r3, #1
 800974e:	429a      	cmp	r2, r3
 8009750:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009754:	fbb2 f6f3 	udiv	r6, r2, r3
 8009758:	d32e      	bcc.n	80097b8 <quorem+0x96>
 800975a:	f04f 0a00 	mov.w	sl, #0
 800975e:	46c4      	mov	ip, r8
 8009760:	46ae      	mov	lr, r5
 8009762:	46d3      	mov	fp, sl
 8009764:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009768:	b298      	uxth	r0, r3
 800976a:	fb06 a000 	mla	r0, r6, r0, sl
 800976e:	0c02      	lsrs	r2, r0, #16
 8009770:	0c1b      	lsrs	r3, r3, #16
 8009772:	fb06 2303 	mla	r3, r6, r3, r2
 8009776:	f8de 2000 	ldr.w	r2, [lr]
 800977a:	b280      	uxth	r0, r0
 800977c:	b292      	uxth	r2, r2
 800977e:	1a12      	subs	r2, r2, r0
 8009780:	445a      	add	r2, fp
 8009782:	f8de 0000 	ldr.w	r0, [lr]
 8009786:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800978a:	b29b      	uxth	r3, r3
 800978c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8009790:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8009794:	b292      	uxth	r2, r2
 8009796:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800979a:	45e1      	cmp	r9, ip
 800979c:	f84e 2b04 	str.w	r2, [lr], #4
 80097a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80097a4:	d2de      	bcs.n	8009764 <quorem+0x42>
 80097a6:	9b00      	ldr	r3, [sp, #0]
 80097a8:	58eb      	ldr	r3, [r5, r3]
 80097aa:	b92b      	cbnz	r3, 80097b8 <quorem+0x96>
 80097ac:	9b01      	ldr	r3, [sp, #4]
 80097ae:	3b04      	subs	r3, #4
 80097b0:	429d      	cmp	r5, r3
 80097b2:	461a      	mov	r2, r3
 80097b4:	d32f      	bcc.n	8009816 <quorem+0xf4>
 80097b6:	613c      	str	r4, [r7, #16]
 80097b8:	4638      	mov	r0, r7
 80097ba:	f001 f8c9 	bl	800a950 <__mcmp>
 80097be:	2800      	cmp	r0, #0
 80097c0:	db25      	blt.n	800980e <quorem+0xec>
 80097c2:	4629      	mov	r1, r5
 80097c4:	2000      	movs	r0, #0
 80097c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80097ca:	f8d1 c000 	ldr.w	ip, [r1]
 80097ce:	fa1f fe82 	uxth.w	lr, r2
 80097d2:	fa1f f38c 	uxth.w	r3, ip
 80097d6:	eba3 030e 	sub.w	r3, r3, lr
 80097da:	4403      	add	r3, r0
 80097dc:	0c12      	lsrs	r2, r2, #16
 80097de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80097e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80097e6:	b29b      	uxth	r3, r3
 80097e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80097ec:	45c1      	cmp	r9, r8
 80097ee:	f841 3b04 	str.w	r3, [r1], #4
 80097f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80097f6:	d2e6      	bcs.n	80097c6 <quorem+0xa4>
 80097f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80097fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009800:	b922      	cbnz	r2, 800980c <quorem+0xea>
 8009802:	3b04      	subs	r3, #4
 8009804:	429d      	cmp	r5, r3
 8009806:	461a      	mov	r2, r3
 8009808:	d30b      	bcc.n	8009822 <quorem+0x100>
 800980a:	613c      	str	r4, [r7, #16]
 800980c:	3601      	adds	r6, #1
 800980e:	4630      	mov	r0, r6
 8009810:	b003      	add	sp, #12
 8009812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009816:	6812      	ldr	r2, [r2, #0]
 8009818:	3b04      	subs	r3, #4
 800981a:	2a00      	cmp	r2, #0
 800981c:	d1cb      	bne.n	80097b6 <quorem+0x94>
 800981e:	3c01      	subs	r4, #1
 8009820:	e7c6      	b.n	80097b0 <quorem+0x8e>
 8009822:	6812      	ldr	r2, [r2, #0]
 8009824:	3b04      	subs	r3, #4
 8009826:	2a00      	cmp	r2, #0
 8009828:	d1ef      	bne.n	800980a <quorem+0xe8>
 800982a:	3c01      	subs	r4, #1
 800982c:	e7ea      	b.n	8009804 <quorem+0xe2>
 800982e:	2000      	movs	r0, #0
 8009830:	e7ee      	b.n	8009810 <quorem+0xee>
 8009832:	0000      	movs	r0, r0
 8009834:	0000      	movs	r0, r0
	...

08009838 <_dtoa_r>:
 8009838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800983c:	69c7      	ldr	r7, [r0, #28]
 800983e:	b097      	sub	sp, #92	@ 0x5c
 8009840:	ed8d 0b04 	vstr	d0, [sp, #16]
 8009844:	ec55 4b10 	vmov	r4, r5, d0
 8009848:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800984a:	9107      	str	r1, [sp, #28]
 800984c:	4681      	mov	r9, r0
 800984e:	920c      	str	r2, [sp, #48]	@ 0x30
 8009850:	9311      	str	r3, [sp, #68]	@ 0x44
 8009852:	b97f      	cbnz	r7, 8009874 <_dtoa_r+0x3c>
 8009854:	2010      	movs	r0, #16
 8009856:	f7ff f889 	bl	800896c <malloc>
 800985a:	4602      	mov	r2, r0
 800985c:	f8c9 001c 	str.w	r0, [r9, #28]
 8009860:	b920      	cbnz	r0, 800986c <_dtoa_r+0x34>
 8009862:	4ba9      	ldr	r3, [pc, #676]	@ (8009b08 <_dtoa_r+0x2d0>)
 8009864:	21ef      	movs	r1, #239	@ 0xef
 8009866:	48a9      	ldr	r0, [pc, #676]	@ (8009b0c <_dtoa_r+0x2d4>)
 8009868:	f001 fba6 	bl	800afb8 <__assert_func>
 800986c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009870:	6007      	str	r7, [r0, #0]
 8009872:	60c7      	str	r7, [r0, #12]
 8009874:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009878:	6819      	ldr	r1, [r3, #0]
 800987a:	b159      	cbz	r1, 8009894 <_dtoa_r+0x5c>
 800987c:	685a      	ldr	r2, [r3, #4]
 800987e:	604a      	str	r2, [r1, #4]
 8009880:	2301      	movs	r3, #1
 8009882:	4093      	lsls	r3, r2
 8009884:	608b      	str	r3, [r1, #8]
 8009886:	4648      	mov	r0, r9
 8009888:	f000 fe30 	bl	800a4ec <_Bfree>
 800988c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009890:	2200      	movs	r2, #0
 8009892:	601a      	str	r2, [r3, #0]
 8009894:	1e2b      	subs	r3, r5, #0
 8009896:	bfb9      	ittee	lt
 8009898:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800989c:	9305      	strlt	r3, [sp, #20]
 800989e:	2300      	movge	r3, #0
 80098a0:	6033      	strge	r3, [r6, #0]
 80098a2:	9f05      	ldr	r7, [sp, #20]
 80098a4:	4b9a      	ldr	r3, [pc, #616]	@ (8009b10 <_dtoa_r+0x2d8>)
 80098a6:	bfbc      	itt	lt
 80098a8:	2201      	movlt	r2, #1
 80098aa:	6032      	strlt	r2, [r6, #0]
 80098ac:	43bb      	bics	r3, r7
 80098ae:	d112      	bne.n	80098d6 <_dtoa_r+0x9e>
 80098b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80098b6:	6013      	str	r3, [r2, #0]
 80098b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80098bc:	4323      	orrs	r3, r4
 80098be:	f000 855a 	beq.w	800a376 <_dtoa_r+0xb3e>
 80098c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8009b24 <_dtoa_r+0x2ec>
 80098c8:	2b00      	cmp	r3, #0
 80098ca:	f000 855c 	beq.w	800a386 <_dtoa_r+0xb4e>
 80098ce:	f10a 0303 	add.w	r3, sl, #3
 80098d2:	f000 bd56 	b.w	800a382 <_dtoa_r+0xb4a>
 80098d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80098da:	2200      	movs	r2, #0
 80098dc:	ec51 0b17 	vmov	r0, r1, d7
 80098e0:	2300      	movs	r3, #0
 80098e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80098e6:	f7f7 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ea:	4680      	mov	r8, r0
 80098ec:	b158      	cbz	r0, 8009906 <_dtoa_r+0xce>
 80098ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80098f0:	2301      	movs	r3, #1
 80098f2:	6013      	str	r3, [r2, #0]
 80098f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80098f6:	b113      	cbz	r3, 80098fe <_dtoa_r+0xc6>
 80098f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80098fa:	4b86      	ldr	r3, [pc, #536]	@ (8009b14 <_dtoa_r+0x2dc>)
 80098fc:	6013      	str	r3, [r2, #0]
 80098fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8009b28 <_dtoa_r+0x2f0>
 8009902:	f000 bd40 	b.w	800a386 <_dtoa_r+0xb4e>
 8009906:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800990a:	aa14      	add	r2, sp, #80	@ 0x50
 800990c:	a915      	add	r1, sp, #84	@ 0x54
 800990e:	4648      	mov	r0, r9
 8009910:	f001 f8ce 	bl	800aab0 <__d2b>
 8009914:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009918:	9002      	str	r0, [sp, #8]
 800991a:	2e00      	cmp	r6, #0
 800991c:	d078      	beq.n	8009a10 <_dtoa_r+0x1d8>
 800991e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009920:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8009924:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009928:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800992c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009930:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009934:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009938:	4619      	mov	r1, r3
 800993a:	2200      	movs	r2, #0
 800993c:	4b76      	ldr	r3, [pc, #472]	@ (8009b18 <_dtoa_r+0x2e0>)
 800993e:	f7f6 fca3 	bl	8000288 <__aeabi_dsub>
 8009942:	a36b      	add	r3, pc, #428	@ (adr r3, 8009af0 <_dtoa_r+0x2b8>)
 8009944:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009948:	f7f6 fe56 	bl	80005f8 <__aeabi_dmul>
 800994c:	a36a      	add	r3, pc, #424	@ (adr r3, 8009af8 <_dtoa_r+0x2c0>)
 800994e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009952:	f7f6 fc9b 	bl	800028c <__adddf3>
 8009956:	4604      	mov	r4, r0
 8009958:	4630      	mov	r0, r6
 800995a:	460d      	mov	r5, r1
 800995c:	f7f6 fde2 	bl	8000524 <__aeabi_i2d>
 8009960:	a367      	add	r3, pc, #412	@ (adr r3, 8009b00 <_dtoa_r+0x2c8>)
 8009962:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009966:	f7f6 fe47 	bl	80005f8 <__aeabi_dmul>
 800996a:	4602      	mov	r2, r0
 800996c:	460b      	mov	r3, r1
 800996e:	4620      	mov	r0, r4
 8009970:	4629      	mov	r1, r5
 8009972:	f7f6 fc8b 	bl	800028c <__adddf3>
 8009976:	4604      	mov	r4, r0
 8009978:	460d      	mov	r5, r1
 800997a:	f7f7 f8ed 	bl	8000b58 <__aeabi_d2iz>
 800997e:	2200      	movs	r2, #0
 8009980:	4607      	mov	r7, r0
 8009982:	2300      	movs	r3, #0
 8009984:	4620      	mov	r0, r4
 8009986:	4629      	mov	r1, r5
 8009988:	f7f7 f8a8 	bl	8000adc <__aeabi_dcmplt>
 800998c:	b140      	cbz	r0, 80099a0 <_dtoa_r+0x168>
 800998e:	4638      	mov	r0, r7
 8009990:	f7f6 fdc8 	bl	8000524 <__aeabi_i2d>
 8009994:	4622      	mov	r2, r4
 8009996:	462b      	mov	r3, r5
 8009998:	f7f7 f896 	bl	8000ac8 <__aeabi_dcmpeq>
 800999c:	b900      	cbnz	r0, 80099a0 <_dtoa_r+0x168>
 800999e:	3f01      	subs	r7, #1
 80099a0:	2f16      	cmp	r7, #22
 80099a2:	d852      	bhi.n	8009a4a <_dtoa_r+0x212>
 80099a4:	4b5d      	ldr	r3, [pc, #372]	@ (8009b1c <_dtoa_r+0x2e4>)
 80099a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80099aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80099b2:	f7f7 f893 	bl	8000adc <__aeabi_dcmplt>
 80099b6:	2800      	cmp	r0, #0
 80099b8:	d049      	beq.n	8009a4e <_dtoa_r+0x216>
 80099ba:	3f01      	subs	r7, #1
 80099bc:	2300      	movs	r3, #0
 80099be:	9310      	str	r3, [sp, #64]	@ 0x40
 80099c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099c2:	1b9b      	subs	r3, r3, r6
 80099c4:	1e5a      	subs	r2, r3, #1
 80099c6:	bf45      	ittet	mi
 80099c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80099cc:	9300      	strmi	r3, [sp, #0]
 80099ce:	2300      	movpl	r3, #0
 80099d0:	2300      	movmi	r3, #0
 80099d2:	9206      	str	r2, [sp, #24]
 80099d4:	bf54      	ite	pl
 80099d6:	9300      	strpl	r3, [sp, #0]
 80099d8:	9306      	strmi	r3, [sp, #24]
 80099da:	2f00      	cmp	r7, #0
 80099dc:	db39      	blt.n	8009a52 <_dtoa_r+0x21a>
 80099de:	9b06      	ldr	r3, [sp, #24]
 80099e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80099e2:	443b      	add	r3, r7
 80099e4:	9306      	str	r3, [sp, #24]
 80099e6:	2300      	movs	r3, #0
 80099e8:	9308      	str	r3, [sp, #32]
 80099ea:	9b07      	ldr	r3, [sp, #28]
 80099ec:	2b09      	cmp	r3, #9
 80099ee:	d863      	bhi.n	8009ab8 <_dtoa_r+0x280>
 80099f0:	2b05      	cmp	r3, #5
 80099f2:	bfc4      	itt	gt
 80099f4:	3b04      	subgt	r3, #4
 80099f6:	9307      	strgt	r3, [sp, #28]
 80099f8:	9b07      	ldr	r3, [sp, #28]
 80099fa:	f1a3 0302 	sub.w	r3, r3, #2
 80099fe:	bfcc      	ite	gt
 8009a00:	2400      	movgt	r4, #0
 8009a02:	2401      	movle	r4, #1
 8009a04:	2b03      	cmp	r3, #3
 8009a06:	d863      	bhi.n	8009ad0 <_dtoa_r+0x298>
 8009a08:	e8df f003 	tbb	[pc, r3]
 8009a0c:	2b375452 	.word	0x2b375452
 8009a10:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8009a14:	441e      	add	r6, r3
 8009a16:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009a1a:	2b20      	cmp	r3, #32
 8009a1c:	bfc1      	itttt	gt
 8009a1e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009a22:	409f      	lslgt	r7, r3
 8009a24:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009a28:	fa24 f303 	lsrgt.w	r3, r4, r3
 8009a2c:	bfd6      	itet	le
 8009a2e:	f1c3 0320 	rsble	r3, r3, #32
 8009a32:	ea47 0003 	orrgt.w	r0, r7, r3
 8009a36:	fa04 f003 	lslle.w	r0, r4, r3
 8009a3a:	f7f6 fd63 	bl	8000504 <__aeabi_ui2d>
 8009a3e:	2201      	movs	r2, #1
 8009a40:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009a44:	3e01      	subs	r6, #1
 8009a46:	9212      	str	r2, [sp, #72]	@ 0x48
 8009a48:	e776      	b.n	8009938 <_dtoa_r+0x100>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e7b7      	b.n	80099be <_dtoa_r+0x186>
 8009a4e:	9010      	str	r0, [sp, #64]	@ 0x40
 8009a50:	e7b6      	b.n	80099c0 <_dtoa_r+0x188>
 8009a52:	9b00      	ldr	r3, [sp, #0]
 8009a54:	1bdb      	subs	r3, r3, r7
 8009a56:	9300      	str	r3, [sp, #0]
 8009a58:	427b      	negs	r3, r7
 8009a5a:	9308      	str	r3, [sp, #32]
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	930d      	str	r3, [sp, #52]	@ 0x34
 8009a60:	e7c3      	b.n	80099ea <_dtoa_r+0x1b2>
 8009a62:	2301      	movs	r3, #1
 8009a64:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a68:	eb07 0b03 	add.w	fp, r7, r3
 8009a6c:	f10b 0301 	add.w	r3, fp, #1
 8009a70:	2b01      	cmp	r3, #1
 8009a72:	9303      	str	r3, [sp, #12]
 8009a74:	bfb8      	it	lt
 8009a76:	2301      	movlt	r3, #1
 8009a78:	e006      	b.n	8009a88 <_dtoa_r+0x250>
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009a7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	dd28      	ble.n	8009ad6 <_dtoa_r+0x29e>
 8009a84:	469b      	mov	fp, r3
 8009a86:	9303      	str	r3, [sp, #12]
 8009a88:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8009a8c:	2100      	movs	r1, #0
 8009a8e:	2204      	movs	r2, #4
 8009a90:	f102 0514 	add.w	r5, r2, #20
 8009a94:	429d      	cmp	r5, r3
 8009a96:	d926      	bls.n	8009ae6 <_dtoa_r+0x2ae>
 8009a98:	6041      	str	r1, [r0, #4]
 8009a9a:	4648      	mov	r0, r9
 8009a9c:	f000 fce6 	bl	800a46c <_Balloc>
 8009aa0:	4682      	mov	sl, r0
 8009aa2:	2800      	cmp	r0, #0
 8009aa4:	d142      	bne.n	8009b2c <_dtoa_r+0x2f4>
 8009aa6:	4b1e      	ldr	r3, [pc, #120]	@ (8009b20 <_dtoa_r+0x2e8>)
 8009aa8:	4602      	mov	r2, r0
 8009aaa:	f240 11af 	movw	r1, #431	@ 0x1af
 8009aae:	e6da      	b.n	8009866 <_dtoa_r+0x2e>
 8009ab0:	2300      	movs	r3, #0
 8009ab2:	e7e3      	b.n	8009a7c <_dtoa_r+0x244>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	e7d5      	b.n	8009a64 <_dtoa_r+0x22c>
 8009ab8:	2401      	movs	r4, #1
 8009aba:	2300      	movs	r3, #0
 8009abc:	9307      	str	r3, [sp, #28]
 8009abe:	9409      	str	r4, [sp, #36]	@ 0x24
 8009ac0:	f04f 3bff 	mov.w	fp, #4294967295
 8009ac4:	2200      	movs	r2, #0
 8009ac6:	f8cd b00c 	str.w	fp, [sp, #12]
 8009aca:	2312      	movs	r3, #18
 8009acc:	920c      	str	r2, [sp, #48]	@ 0x30
 8009ace:	e7db      	b.n	8009a88 <_dtoa_r+0x250>
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ad4:	e7f4      	b.n	8009ac0 <_dtoa_r+0x288>
 8009ad6:	f04f 0b01 	mov.w	fp, #1
 8009ada:	f8cd b00c 	str.w	fp, [sp, #12]
 8009ade:	465b      	mov	r3, fp
 8009ae0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8009ae4:	e7d0      	b.n	8009a88 <_dtoa_r+0x250>
 8009ae6:	3101      	adds	r1, #1
 8009ae8:	0052      	lsls	r2, r2, #1
 8009aea:	e7d1      	b.n	8009a90 <_dtoa_r+0x258>
 8009aec:	f3af 8000 	nop.w
 8009af0:	636f4361 	.word	0x636f4361
 8009af4:	3fd287a7 	.word	0x3fd287a7
 8009af8:	8b60c8b3 	.word	0x8b60c8b3
 8009afc:	3fc68a28 	.word	0x3fc68a28
 8009b00:	509f79fb 	.word	0x509f79fb
 8009b04:	3fd34413 	.word	0x3fd34413
 8009b08:	0800bd31 	.word	0x0800bd31
 8009b0c:	0800bd48 	.word	0x0800bd48
 8009b10:	7ff00000 	.word	0x7ff00000
 8009b14:	0800bd01 	.word	0x0800bd01
 8009b18:	3ff80000 	.word	0x3ff80000
 8009b1c:	0800be98 	.word	0x0800be98
 8009b20:	0800bda0 	.word	0x0800bda0
 8009b24:	0800bd2d 	.word	0x0800bd2d
 8009b28:	0800bd00 	.word	0x0800bd00
 8009b2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8009b30:	6018      	str	r0, [r3, #0]
 8009b32:	9b03      	ldr	r3, [sp, #12]
 8009b34:	2b0e      	cmp	r3, #14
 8009b36:	f200 80a1 	bhi.w	8009c7c <_dtoa_r+0x444>
 8009b3a:	2c00      	cmp	r4, #0
 8009b3c:	f000 809e 	beq.w	8009c7c <_dtoa_r+0x444>
 8009b40:	2f00      	cmp	r7, #0
 8009b42:	dd33      	ble.n	8009bac <_dtoa_r+0x374>
 8009b44:	4b9c      	ldr	r3, [pc, #624]	@ (8009db8 <_dtoa_r+0x580>)
 8009b46:	f007 020f 	and.w	r2, r7, #15
 8009b4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009b4e:	ed93 7b00 	vldr	d7, [r3]
 8009b52:	05f8      	lsls	r0, r7, #23
 8009b54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8009b58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009b5c:	d516      	bpl.n	8009b8c <_dtoa_r+0x354>
 8009b5e:	4b97      	ldr	r3, [pc, #604]	@ (8009dbc <_dtoa_r+0x584>)
 8009b60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009b68:	f7f6 fe70 	bl	800084c <__aeabi_ddiv>
 8009b6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b70:	f004 040f 	and.w	r4, r4, #15
 8009b74:	2603      	movs	r6, #3
 8009b76:	4d91      	ldr	r5, [pc, #580]	@ (8009dbc <_dtoa_r+0x584>)
 8009b78:	b954      	cbnz	r4, 8009b90 <_dtoa_r+0x358>
 8009b7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009b7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009b82:	f7f6 fe63 	bl	800084c <__aeabi_ddiv>
 8009b86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b8a:	e028      	b.n	8009bde <_dtoa_r+0x3a6>
 8009b8c:	2602      	movs	r6, #2
 8009b8e:	e7f2      	b.n	8009b76 <_dtoa_r+0x33e>
 8009b90:	07e1      	lsls	r1, r4, #31
 8009b92:	d508      	bpl.n	8009ba6 <_dtoa_r+0x36e>
 8009b94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009b98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009b9c:	f7f6 fd2c 	bl	80005f8 <__aeabi_dmul>
 8009ba0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009ba4:	3601      	adds	r6, #1
 8009ba6:	1064      	asrs	r4, r4, #1
 8009ba8:	3508      	adds	r5, #8
 8009baa:	e7e5      	b.n	8009b78 <_dtoa_r+0x340>
 8009bac:	f000 80af 	beq.w	8009d0e <_dtoa_r+0x4d6>
 8009bb0:	427c      	negs	r4, r7
 8009bb2:	4b81      	ldr	r3, [pc, #516]	@ (8009db8 <_dtoa_r+0x580>)
 8009bb4:	4d81      	ldr	r5, [pc, #516]	@ (8009dbc <_dtoa_r+0x584>)
 8009bb6:	f004 020f 	and.w	r2, r4, #15
 8009bba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009bbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bc2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009bc6:	f7f6 fd17 	bl	80005f8 <__aeabi_dmul>
 8009bca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009bce:	1124      	asrs	r4, r4, #4
 8009bd0:	2300      	movs	r3, #0
 8009bd2:	2602      	movs	r6, #2
 8009bd4:	2c00      	cmp	r4, #0
 8009bd6:	f040 808f 	bne.w	8009cf8 <_dtoa_r+0x4c0>
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d1d3      	bne.n	8009b86 <_dtoa_r+0x34e>
 8009bde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8009be0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	f000 8094 	beq.w	8009d12 <_dtoa_r+0x4da>
 8009bea:	4b75      	ldr	r3, [pc, #468]	@ (8009dc0 <_dtoa_r+0x588>)
 8009bec:	2200      	movs	r2, #0
 8009bee:	4620      	mov	r0, r4
 8009bf0:	4629      	mov	r1, r5
 8009bf2:	f7f6 ff73 	bl	8000adc <__aeabi_dcmplt>
 8009bf6:	2800      	cmp	r0, #0
 8009bf8:	f000 808b 	beq.w	8009d12 <_dtoa_r+0x4da>
 8009bfc:	9b03      	ldr	r3, [sp, #12]
 8009bfe:	2b00      	cmp	r3, #0
 8009c00:	f000 8087 	beq.w	8009d12 <_dtoa_r+0x4da>
 8009c04:	f1bb 0f00 	cmp.w	fp, #0
 8009c08:	dd34      	ble.n	8009c74 <_dtoa_r+0x43c>
 8009c0a:	4620      	mov	r0, r4
 8009c0c:	4b6d      	ldr	r3, [pc, #436]	@ (8009dc4 <_dtoa_r+0x58c>)
 8009c0e:	2200      	movs	r2, #0
 8009c10:	4629      	mov	r1, r5
 8009c12:	f7f6 fcf1 	bl	80005f8 <__aeabi_dmul>
 8009c16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8009c1e:	3601      	adds	r6, #1
 8009c20:	465c      	mov	r4, fp
 8009c22:	4630      	mov	r0, r6
 8009c24:	f7f6 fc7e 	bl	8000524 <__aeabi_i2d>
 8009c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009c2c:	f7f6 fce4 	bl	80005f8 <__aeabi_dmul>
 8009c30:	4b65      	ldr	r3, [pc, #404]	@ (8009dc8 <_dtoa_r+0x590>)
 8009c32:	2200      	movs	r2, #0
 8009c34:	f7f6 fb2a 	bl	800028c <__adddf3>
 8009c38:	4605      	mov	r5, r0
 8009c3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009c3e:	2c00      	cmp	r4, #0
 8009c40:	d16a      	bne.n	8009d18 <_dtoa_r+0x4e0>
 8009c42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c46:	4b61      	ldr	r3, [pc, #388]	@ (8009dcc <_dtoa_r+0x594>)
 8009c48:	2200      	movs	r2, #0
 8009c4a:	f7f6 fb1d 	bl	8000288 <__aeabi_dsub>
 8009c4e:	4602      	mov	r2, r0
 8009c50:	460b      	mov	r3, r1
 8009c52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4633      	mov	r3, r6
 8009c5a:	f7f6 ff5d 	bl	8000b18 <__aeabi_dcmpgt>
 8009c5e:	2800      	cmp	r0, #0
 8009c60:	f040 8298 	bne.w	800a194 <_dtoa_r+0x95c>
 8009c64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009c68:	462a      	mov	r2, r5
 8009c6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009c6e:	f7f6 ff35 	bl	8000adc <__aeabi_dcmplt>
 8009c72:	bb38      	cbnz	r0, 8009cc4 <_dtoa_r+0x48c>
 8009c74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8009c78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8009c7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f2c0 8157 	blt.w	8009f32 <_dtoa_r+0x6fa>
 8009c84:	2f0e      	cmp	r7, #14
 8009c86:	f300 8154 	bgt.w	8009f32 <_dtoa_r+0x6fa>
 8009c8a:	4b4b      	ldr	r3, [pc, #300]	@ (8009db8 <_dtoa_r+0x580>)
 8009c8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8009c90:	ed93 7b00 	vldr	d7, [r3]
 8009c94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009c96:	2b00      	cmp	r3, #0
 8009c98:	ed8d 7b00 	vstr	d7, [sp]
 8009c9c:	f280 80e5 	bge.w	8009e6a <_dtoa_r+0x632>
 8009ca0:	9b03      	ldr	r3, [sp, #12]
 8009ca2:	2b00      	cmp	r3, #0
 8009ca4:	f300 80e1 	bgt.w	8009e6a <_dtoa_r+0x632>
 8009ca8:	d10c      	bne.n	8009cc4 <_dtoa_r+0x48c>
 8009caa:	4b48      	ldr	r3, [pc, #288]	@ (8009dcc <_dtoa_r+0x594>)
 8009cac:	2200      	movs	r2, #0
 8009cae:	ec51 0b17 	vmov	r0, r1, d7
 8009cb2:	f7f6 fca1 	bl	80005f8 <__aeabi_dmul>
 8009cb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009cba:	f7f6 ff23 	bl	8000b04 <__aeabi_dcmpge>
 8009cbe:	2800      	cmp	r0, #0
 8009cc0:	f000 8266 	beq.w	800a190 <_dtoa_r+0x958>
 8009cc4:	2400      	movs	r4, #0
 8009cc6:	4625      	mov	r5, r4
 8009cc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8009cca:	4656      	mov	r6, sl
 8009ccc:	ea6f 0803 	mvn.w	r8, r3
 8009cd0:	2700      	movs	r7, #0
 8009cd2:	4621      	mov	r1, r4
 8009cd4:	4648      	mov	r0, r9
 8009cd6:	f000 fc09 	bl	800a4ec <_Bfree>
 8009cda:	2d00      	cmp	r5, #0
 8009cdc:	f000 80bd 	beq.w	8009e5a <_dtoa_r+0x622>
 8009ce0:	b12f      	cbz	r7, 8009cee <_dtoa_r+0x4b6>
 8009ce2:	42af      	cmp	r7, r5
 8009ce4:	d003      	beq.n	8009cee <_dtoa_r+0x4b6>
 8009ce6:	4639      	mov	r1, r7
 8009ce8:	4648      	mov	r0, r9
 8009cea:	f000 fbff 	bl	800a4ec <_Bfree>
 8009cee:	4629      	mov	r1, r5
 8009cf0:	4648      	mov	r0, r9
 8009cf2:	f000 fbfb 	bl	800a4ec <_Bfree>
 8009cf6:	e0b0      	b.n	8009e5a <_dtoa_r+0x622>
 8009cf8:	07e2      	lsls	r2, r4, #31
 8009cfa:	d505      	bpl.n	8009d08 <_dtoa_r+0x4d0>
 8009cfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009d00:	f7f6 fc7a 	bl	80005f8 <__aeabi_dmul>
 8009d04:	3601      	adds	r6, #1
 8009d06:	2301      	movs	r3, #1
 8009d08:	1064      	asrs	r4, r4, #1
 8009d0a:	3508      	adds	r5, #8
 8009d0c:	e762      	b.n	8009bd4 <_dtoa_r+0x39c>
 8009d0e:	2602      	movs	r6, #2
 8009d10:	e765      	b.n	8009bde <_dtoa_r+0x3a6>
 8009d12:	9c03      	ldr	r4, [sp, #12]
 8009d14:	46b8      	mov	r8, r7
 8009d16:	e784      	b.n	8009c22 <_dtoa_r+0x3ea>
 8009d18:	4b27      	ldr	r3, [pc, #156]	@ (8009db8 <_dtoa_r+0x580>)
 8009d1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009d20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009d24:	4454      	add	r4, sl
 8009d26:	2900      	cmp	r1, #0
 8009d28:	d054      	beq.n	8009dd4 <_dtoa_r+0x59c>
 8009d2a:	4929      	ldr	r1, [pc, #164]	@ (8009dd0 <_dtoa_r+0x598>)
 8009d2c:	2000      	movs	r0, #0
 8009d2e:	f7f6 fd8d 	bl	800084c <__aeabi_ddiv>
 8009d32:	4633      	mov	r3, r6
 8009d34:	462a      	mov	r2, r5
 8009d36:	f7f6 faa7 	bl	8000288 <__aeabi_dsub>
 8009d3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009d3e:	4656      	mov	r6, sl
 8009d40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d44:	f7f6 ff08 	bl	8000b58 <__aeabi_d2iz>
 8009d48:	4605      	mov	r5, r0
 8009d4a:	f7f6 fbeb 	bl	8000524 <__aeabi_i2d>
 8009d4e:	4602      	mov	r2, r0
 8009d50:	460b      	mov	r3, r1
 8009d52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009d56:	f7f6 fa97 	bl	8000288 <__aeabi_dsub>
 8009d5a:	3530      	adds	r5, #48	@ 0x30
 8009d5c:	4602      	mov	r2, r0
 8009d5e:	460b      	mov	r3, r1
 8009d60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009d64:	f806 5b01 	strb.w	r5, [r6], #1
 8009d68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d6c:	f7f6 feb6 	bl	8000adc <__aeabi_dcmplt>
 8009d70:	2800      	cmp	r0, #0
 8009d72:	d172      	bne.n	8009e5a <_dtoa_r+0x622>
 8009d74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009d78:	4911      	ldr	r1, [pc, #68]	@ (8009dc0 <_dtoa_r+0x588>)
 8009d7a:	2000      	movs	r0, #0
 8009d7c:	f7f6 fa84 	bl	8000288 <__aeabi_dsub>
 8009d80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009d84:	f7f6 feaa 	bl	8000adc <__aeabi_dcmplt>
 8009d88:	2800      	cmp	r0, #0
 8009d8a:	f040 80b4 	bne.w	8009ef6 <_dtoa_r+0x6be>
 8009d8e:	42a6      	cmp	r6, r4
 8009d90:	f43f af70 	beq.w	8009c74 <_dtoa_r+0x43c>
 8009d94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009d98:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc4 <_dtoa_r+0x58c>)
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	f7f6 fc2c 	bl	80005f8 <__aeabi_dmul>
 8009da0:	4b08      	ldr	r3, [pc, #32]	@ (8009dc4 <_dtoa_r+0x58c>)
 8009da2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009da6:	2200      	movs	r2, #0
 8009da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dac:	f7f6 fc24 	bl	80005f8 <__aeabi_dmul>
 8009db0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009db4:	e7c4      	b.n	8009d40 <_dtoa_r+0x508>
 8009db6:	bf00      	nop
 8009db8:	0800be98 	.word	0x0800be98
 8009dbc:	0800be70 	.word	0x0800be70
 8009dc0:	3ff00000 	.word	0x3ff00000
 8009dc4:	40240000 	.word	0x40240000
 8009dc8:	401c0000 	.word	0x401c0000
 8009dcc:	40140000 	.word	0x40140000
 8009dd0:	3fe00000 	.word	0x3fe00000
 8009dd4:	4631      	mov	r1, r6
 8009dd6:	4628      	mov	r0, r5
 8009dd8:	f7f6 fc0e 	bl	80005f8 <__aeabi_dmul>
 8009ddc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8009de0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8009de2:	4656      	mov	r6, sl
 8009de4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009de8:	f7f6 feb6 	bl	8000b58 <__aeabi_d2iz>
 8009dec:	4605      	mov	r5, r0
 8009dee:	f7f6 fb99 	bl	8000524 <__aeabi_i2d>
 8009df2:	4602      	mov	r2, r0
 8009df4:	460b      	mov	r3, r1
 8009df6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009dfa:	f7f6 fa45 	bl	8000288 <__aeabi_dsub>
 8009dfe:	3530      	adds	r5, #48	@ 0x30
 8009e00:	f806 5b01 	strb.w	r5, [r6], #1
 8009e04:	4602      	mov	r2, r0
 8009e06:	460b      	mov	r3, r1
 8009e08:	42a6      	cmp	r6, r4
 8009e0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009e0e:	f04f 0200 	mov.w	r2, #0
 8009e12:	d124      	bne.n	8009e5e <_dtoa_r+0x626>
 8009e14:	4baf      	ldr	r3, [pc, #700]	@ (800a0d4 <_dtoa_r+0x89c>)
 8009e16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8009e1a:	f7f6 fa37 	bl	800028c <__adddf3>
 8009e1e:	4602      	mov	r2, r0
 8009e20:	460b      	mov	r3, r1
 8009e22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e26:	f7f6 fe77 	bl	8000b18 <__aeabi_dcmpgt>
 8009e2a:	2800      	cmp	r0, #0
 8009e2c:	d163      	bne.n	8009ef6 <_dtoa_r+0x6be>
 8009e2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8009e32:	49a8      	ldr	r1, [pc, #672]	@ (800a0d4 <_dtoa_r+0x89c>)
 8009e34:	2000      	movs	r0, #0
 8009e36:	f7f6 fa27 	bl	8000288 <__aeabi_dsub>
 8009e3a:	4602      	mov	r2, r0
 8009e3c:	460b      	mov	r3, r1
 8009e3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009e42:	f7f6 fe4b 	bl	8000adc <__aeabi_dcmplt>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f43f af14 	beq.w	8009c74 <_dtoa_r+0x43c>
 8009e4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8009e4e:	1e73      	subs	r3, r6, #1
 8009e50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009e52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009e56:	2b30      	cmp	r3, #48	@ 0x30
 8009e58:	d0f8      	beq.n	8009e4c <_dtoa_r+0x614>
 8009e5a:	4647      	mov	r7, r8
 8009e5c:	e03b      	b.n	8009ed6 <_dtoa_r+0x69e>
 8009e5e:	4b9e      	ldr	r3, [pc, #632]	@ (800a0d8 <_dtoa_r+0x8a0>)
 8009e60:	f7f6 fbca 	bl	80005f8 <__aeabi_dmul>
 8009e64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e68:	e7bc      	b.n	8009de4 <_dtoa_r+0x5ac>
 8009e6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8009e6e:	4656      	mov	r6, sl
 8009e70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e74:	4620      	mov	r0, r4
 8009e76:	4629      	mov	r1, r5
 8009e78:	f7f6 fce8 	bl	800084c <__aeabi_ddiv>
 8009e7c:	f7f6 fe6c 	bl	8000b58 <__aeabi_d2iz>
 8009e80:	4680      	mov	r8, r0
 8009e82:	f7f6 fb4f 	bl	8000524 <__aeabi_i2d>
 8009e86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009e8a:	f7f6 fbb5 	bl	80005f8 <__aeabi_dmul>
 8009e8e:	4602      	mov	r2, r0
 8009e90:	460b      	mov	r3, r1
 8009e92:	4620      	mov	r0, r4
 8009e94:	4629      	mov	r1, r5
 8009e96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8009e9a:	f7f6 f9f5 	bl	8000288 <__aeabi_dsub>
 8009e9e:	f806 4b01 	strb.w	r4, [r6], #1
 8009ea2:	9d03      	ldr	r5, [sp, #12]
 8009ea4:	eba6 040a 	sub.w	r4, r6, sl
 8009ea8:	42a5      	cmp	r5, r4
 8009eaa:	4602      	mov	r2, r0
 8009eac:	460b      	mov	r3, r1
 8009eae:	d133      	bne.n	8009f18 <_dtoa_r+0x6e0>
 8009eb0:	f7f6 f9ec 	bl	800028c <__adddf3>
 8009eb4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009eb8:	4604      	mov	r4, r0
 8009eba:	460d      	mov	r5, r1
 8009ebc:	f7f6 fe2c 	bl	8000b18 <__aeabi_dcmpgt>
 8009ec0:	b9c0      	cbnz	r0, 8009ef4 <_dtoa_r+0x6bc>
 8009ec2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009ec6:	4620      	mov	r0, r4
 8009ec8:	4629      	mov	r1, r5
 8009eca:	f7f6 fdfd 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ece:	b110      	cbz	r0, 8009ed6 <_dtoa_r+0x69e>
 8009ed0:	f018 0f01 	tst.w	r8, #1
 8009ed4:	d10e      	bne.n	8009ef4 <_dtoa_r+0x6bc>
 8009ed6:	9902      	ldr	r1, [sp, #8]
 8009ed8:	4648      	mov	r0, r9
 8009eda:	f000 fb07 	bl	800a4ec <_Bfree>
 8009ede:	2300      	movs	r3, #0
 8009ee0:	7033      	strb	r3, [r6, #0]
 8009ee2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009ee4:	3701      	adds	r7, #1
 8009ee6:	601f      	str	r7, [r3, #0]
 8009ee8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8009eea:	2b00      	cmp	r3, #0
 8009eec:	f000 824b 	beq.w	800a386 <_dtoa_r+0xb4e>
 8009ef0:	601e      	str	r6, [r3, #0]
 8009ef2:	e248      	b.n	800a386 <_dtoa_r+0xb4e>
 8009ef4:	46b8      	mov	r8, r7
 8009ef6:	4633      	mov	r3, r6
 8009ef8:	461e      	mov	r6, r3
 8009efa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009efe:	2a39      	cmp	r2, #57	@ 0x39
 8009f00:	d106      	bne.n	8009f10 <_dtoa_r+0x6d8>
 8009f02:	459a      	cmp	sl, r3
 8009f04:	d1f8      	bne.n	8009ef8 <_dtoa_r+0x6c0>
 8009f06:	2230      	movs	r2, #48	@ 0x30
 8009f08:	f108 0801 	add.w	r8, r8, #1
 8009f0c:	f88a 2000 	strb.w	r2, [sl]
 8009f10:	781a      	ldrb	r2, [r3, #0]
 8009f12:	3201      	adds	r2, #1
 8009f14:	701a      	strb	r2, [r3, #0]
 8009f16:	e7a0      	b.n	8009e5a <_dtoa_r+0x622>
 8009f18:	4b6f      	ldr	r3, [pc, #444]	@ (800a0d8 <_dtoa_r+0x8a0>)
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	f7f6 fb6c 	bl	80005f8 <__aeabi_dmul>
 8009f20:	2200      	movs	r2, #0
 8009f22:	2300      	movs	r3, #0
 8009f24:	4604      	mov	r4, r0
 8009f26:	460d      	mov	r5, r1
 8009f28:	f7f6 fdce 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f2c:	2800      	cmp	r0, #0
 8009f2e:	d09f      	beq.n	8009e70 <_dtoa_r+0x638>
 8009f30:	e7d1      	b.n	8009ed6 <_dtoa_r+0x69e>
 8009f32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009f34:	2a00      	cmp	r2, #0
 8009f36:	f000 80ea 	beq.w	800a10e <_dtoa_r+0x8d6>
 8009f3a:	9a07      	ldr	r2, [sp, #28]
 8009f3c:	2a01      	cmp	r2, #1
 8009f3e:	f300 80cd 	bgt.w	800a0dc <_dtoa_r+0x8a4>
 8009f42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8009f44:	2a00      	cmp	r2, #0
 8009f46:	f000 80c1 	beq.w	800a0cc <_dtoa_r+0x894>
 8009f4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009f4e:	9c08      	ldr	r4, [sp, #32]
 8009f50:	9e00      	ldr	r6, [sp, #0]
 8009f52:	9a00      	ldr	r2, [sp, #0]
 8009f54:	441a      	add	r2, r3
 8009f56:	9200      	str	r2, [sp, #0]
 8009f58:	9a06      	ldr	r2, [sp, #24]
 8009f5a:	2101      	movs	r1, #1
 8009f5c:	441a      	add	r2, r3
 8009f5e:	4648      	mov	r0, r9
 8009f60:	9206      	str	r2, [sp, #24]
 8009f62:	f000 fb77 	bl	800a654 <__i2b>
 8009f66:	4605      	mov	r5, r0
 8009f68:	b166      	cbz	r6, 8009f84 <_dtoa_r+0x74c>
 8009f6a:	9b06      	ldr	r3, [sp, #24]
 8009f6c:	2b00      	cmp	r3, #0
 8009f6e:	dd09      	ble.n	8009f84 <_dtoa_r+0x74c>
 8009f70:	42b3      	cmp	r3, r6
 8009f72:	9a00      	ldr	r2, [sp, #0]
 8009f74:	bfa8      	it	ge
 8009f76:	4633      	movge	r3, r6
 8009f78:	1ad2      	subs	r2, r2, r3
 8009f7a:	9200      	str	r2, [sp, #0]
 8009f7c:	9a06      	ldr	r2, [sp, #24]
 8009f7e:	1af6      	subs	r6, r6, r3
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	9306      	str	r3, [sp, #24]
 8009f84:	9b08      	ldr	r3, [sp, #32]
 8009f86:	b30b      	cbz	r3, 8009fcc <_dtoa_r+0x794>
 8009f88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	f000 80c6 	beq.w	800a11c <_dtoa_r+0x8e4>
 8009f90:	2c00      	cmp	r4, #0
 8009f92:	f000 80c0 	beq.w	800a116 <_dtoa_r+0x8de>
 8009f96:	4629      	mov	r1, r5
 8009f98:	4622      	mov	r2, r4
 8009f9a:	4648      	mov	r0, r9
 8009f9c:	f000 fc12 	bl	800a7c4 <__pow5mult>
 8009fa0:	9a02      	ldr	r2, [sp, #8]
 8009fa2:	4601      	mov	r1, r0
 8009fa4:	4605      	mov	r5, r0
 8009fa6:	4648      	mov	r0, r9
 8009fa8:	f000 fb6a 	bl	800a680 <__multiply>
 8009fac:	9902      	ldr	r1, [sp, #8]
 8009fae:	4680      	mov	r8, r0
 8009fb0:	4648      	mov	r0, r9
 8009fb2:	f000 fa9b 	bl	800a4ec <_Bfree>
 8009fb6:	9b08      	ldr	r3, [sp, #32]
 8009fb8:	1b1b      	subs	r3, r3, r4
 8009fba:	9308      	str	r3, [sp, #32]
 8009fbc:	f000 80b1 	beq.w	800a122 <_dtoa_r+0x8ea>
 8009fc0:	9a08      	ldr	r2, [sp, #32]
 8009fc2:	4641      	mov	r1, r8
 8009fc4:	4648      	mov	r0, r9
 8009fc6:	f000 fbfd 	bl	800a7c4 <__pow5mult>
 8009fca:	9002      	str	r0, [sp, #8]
 8009fcc:	2101      	movs	r1, #1
 8009fce:	4648      	mov	r0, r9
 8009fd0:	f000 fb40 	bl	800a654 <__i2b>
 8009fd4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009fd6:	4604      	mov	r4, r0
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	f000 81d8 	beq.w	800a38e <_dtoa_r+0xb56>
 8009fde:	461a      	mov	r2, r3
 8009fe0:	4601      	mov	r1, r0
 8009fe2:	4648      	mov	r0, r9
 8009fe4:	f000 fbee 	bl	800a7c4 <__pow5mult>
 8009fe8:	9b07      	ldr	r3, [sp, #28]
 8009fea:	2b01      	cmp	r3, #1
 8009fec:	4604      	mov	r4, r0
 8009fee:	f300 809f 	bgt.w	800a130 <_dtoa_r+0x8f8>
 8009ff2:	9b04      	ldr	r3, [sp, #16]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	f040 8097 	bne.w	800a128 <_dtoa_r+0x8f0>
 8009ffa:	9b05      	ldr	r3, [sp, #20]
 8009ffc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a000:	2b00      	cmp	r3, #0
 800a002:	f040 8093 	bne.w	800a12c <_dtoa_r+0x8f4>
 800a006:	9b05      	ldr	r3, [sp, #20]
 800a008:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800a00c:	0d1b      	lsrs	r3, r3, #20
 800a00e:	051b      	lsls	r3, r3, #20
 800a010:	b133      	cbz	r3, 800a020 <_dtoa_r+0x7e8>
 800a012:	9b00      	ldr	r3, [sp, #0]
 800a014:	3301      	adds	r3, #1
 800a016:	9300      	str	r3, [sp, #0]
 800a018:	9b06      	ldr	r3, [sp, #24]
 800a01a:	3301      	adds	r3, #1
 800a01c:	9306      	str	r3, [sp, #24]
 800a01e:	2301      	movs	r3, #1
 800a020:	9308      	str	r3, [sp, #32]
 800a022:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a024:	2b00      	cmp	r3, #0
 800a026:	f000 81b8 	beq.w	800a39a <_dtoa_r+0xb62>
 800a02a:	6923      	ldr	r3, [r4, #16]
 800a02c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a030:	6918      	ldr	r0, [r3, #16]
 800a032:	f000 fac3 	bl	800a5bc <__hi0bits>
 800a036:	f1c0 0020 	rsb	r0, r0, #32
 800a03a:	9b06      	ldr	r3, [sp, #24]
 800a03c:	4418      	add	r0, r3
 800a03e:	f010 001f 	ands.w	r0, r0, #31
 800a042:	f000 8082 	beq.w	800a14a <_dtoa_r+0x912>
 800a046:	f1c0 0320 	rsb	r3, r0, #32
 800a04a:	2b04      	cmp	r3, #4
 800a04c:	dd73      	ble.n	800a136 <_dtoa_r+0x8fe>
 800a04e:	9b00      	ldr	r3, [sp, #0]
 800a050:	f1c0 001c 	rsb	r0, r0, #28
 800a054:	4403      	add	r3, r0
 800a056:	9300      	str	r3, [sp, #0]
 800a058:	9b06      	ldr	r3, [sp, #24]
 800a05a:	4403      	add	r3, r0
 800a05c:	4406      	add	r6, r0
 800a05e:	9306      	str	r3, [sp, #24]
 800a060:	9b00      	ldr	r3, [sp, #0]
 800a062:	2b00      	cmp	r3, #0
 800a064:	dd05      	ble.n	800a072 <_dtoa_r+0x83a>
 800a066:	9902      	ldr	r1, [sp, #8]
 800a068:	461a      	mov	r2, r3
 800a06a:	4648      	mov	r0, r9
 800a06c:	f000 fc04 	bl	800a878 <__lshift>
 800a070:	9002      	str	r0, [sp, #8]
 800a072:	9b06      	ldr	r3, [sp, #24]
 800a074:	2b00      	cmp	r3, #0
 800a076:	dd05      	ble.n	800a084 <_dtoa_r+0x84c>
 800a078:	4621      	mov	r1, r4
 800a07a:	461a      	mov	r2, r3
 800a07c:	4648      	mov	r0, r9
 800a07e:	f000 fbfb 	bl	800a878 <__lshift>
 800a082:	4604      	mov	r4, r0
 800a084:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a086:	2b00      	cmp	r3, #0
 800a088:	d061      	beq.n	800a14e <_dtoa_r+0x916>
 800a08a:	9802      	ldr	r0, [sp, #8]
 800a08c:	4621      	mov	r1, r4
 800a08e:	f000 fc5f 	bl	800a950 <__mcmp>
 800a092:	2800      	cmp	r0, #0
 800a094:	da5b      	bge.n	800a14e <_dtoa_r+0x916>
 800a096:	2300      	movs	r3, #0
 800a098:	9902      	ldr	r1, [sp, #8]
 800a09a:	220a      	movs	r2, #10
 800a09c:	4648      	mov	r0, r9
 800a09e:	f000 fa47 	bl	800a530 <__multadd>
 800a0a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a0a4:	9002      	str	r0, [sp, #8]
 800a0a6:	f107 38ff 	add.w	r8, r7, #4294967295
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	f000 8177 	beq.w	800a39e <_dtoa_r+0xb66>
 800a0b0:	4629      	mov	r1, r5
 800a0b2:	2300      	movs	r3, #0
 800a0b4:	220a      	movs	r2, #10
 800a0b6:	4648      	mov	r0, r9
 800a0b8:	f000 fa3a 	bl	800a530 <__multadd>
 800a0bc:	f1bb 0f00 	cmp.w	fp, #0
 800a0c0:	4605      	mov	r5, r0
 800a0c2:	dc6f      	bgt.n	800a1a4 <_dtoa_r+0x96c>
 800a0c4:	9b07      	ldr	r3, [sp, #28]
 800a0c6:	2b02      	cmp	r3, #2
 800a0c8:	dc49      	bgt.n	800a15e <_dtoa_r+0x926>
 800a0ca:	e06b      	b.n	800a1a4 <_dtoa_r+0x96c>
 800a0cc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a0ce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800a0d2:	e73c      	b.n	8009f4e <_dtoa_r+0x716>
 800a0d4:	3fe00000 	.word	0x3fe00000
 800a0d8:	40240000 	.word	0x40240000
 800a0dc:	9b03      	ldr	r3, [sp, #12]
 800a0de:	1e5c      	subs	r4, r3, #1
 800a0e0:	9b08      	ldr	r3, [sp, #32]
 800a0e2:	42a3      	cmp	r3, r4
 800a0e4:	db09      	blt.n	800a0fa <_dtoa_r+0x8c2>
 800a0e6:	1b1c      	subs	r4, r3, r4
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	2b00      	cmp	r3, #0
 800a0ec:	f6bf af30 	bge.w	8009f50 <_dtoa_r+0x718>
 800a0f0:	9b00      	ldr	r3, [sp, #0]
 800a0f2:	9a03      	ldr	r2, [sp, #12]
 800a0f4:	1a9e      	subs	r6, r3, r2
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	e72b      	b.n	8009f52 <_dtoa_r+0x71a>
 800a0fa:	9b08      	ldr	r3, [sp, #32]
 800a0fc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a0fe:	9408      	str	r4, [sp, #32]
 800a100:	1ae3      	subs	r3, r4, r3
 800a102:	441a      	add	r2, r3
 800a104:	9e00      	ldr	r6, [sp, #0]
 800a106:	9b03      	ldr	r3, [sp, #12]
 800a108:	920d      	str	r2, [sp, #52]	@ 0x34
 800a10a:	2400      	movs	r4, #0
 800a10c:	e721      	b.n	8009f52 <_dtoa_r+0x71a>
 800a10e:	9c08      	ldr	r4, [sp, #32]
 800a110:	9e00      	ldr	r6, [sp, #0]
 800a112:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800a114:	e728      	b.n	8009f68 <_dtoa_r+0x730>
 800a116:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800a11a:	e751      	b.n	8009fc0 <_dtoa_r+0x788>
 800a11c:	9a08      	ldr	r2, [sp, #32]
 800a11e:	9902      	ldr	r1, [sp, #8]
 800a120:	e750      	b.n	8009fc4 <_dtoa_r+0x78c>
 800a122:	f8cd 8008 	str.w	r8, [sp, #8]
 800a126:	e751      	b.n	8009fcc <_dtoa_r+0x794>
 800a128:	2300      	movs	r3, #0
 800a12a:	e779      	b.n	800a020 <_dtoa_r+0x7e8>
 800a12c:	9b04      	ldr	r3, [sp, #16]
 800a12e:	e777      	b.n	800a020 <_dtoa_r+0x7e8>
 800a130:	2300      	movs	r3, #0
 800a132:	9308      	str	r3, [sp, #32]
 800a134:	e779      	b.n	800a02a <_dtoa_r+0x7f2>
 800a136:	d093      	beq.n	800a060 <_dtoa_r+0x828>
 800a138:	9a00      	ldr	r2, [sp, #0]
 800a13a:	331c      	adds	r3, #28
 800a13c:	441a      	add	r2, r3
 800a13e:	9200      	str	r2, [sp, #0]
 800a140:	9a06      	ldr	r2, [sp, #24]
 800a142:	441a      	add	r2, r3
 800a144:	441e      	add	r6, r3
 800a146:	9206      	str	r2, [sp, #24]
 800a148:	e78a      	b.n	800a060 <_dtoa_r+0x828>
 800a14a:	4603      	mov	r3, r0
 800a14c:	e7f4      	b.n	800a138 <_dtoa_r+0x900>
 800a14e:	9b03      	ldr	r3, [sp, #12]
 800a150:	2b00      	cmp	r3, #0
 800a152:	46b8      	mov	r8, r7
 800a154:	dc20      	bgt.n	800a198 <_dtoa_r+0x960>
 800a156:	469b      	mov	fp, r3
 800a158:	9b07      	ldr	r3, [sp, #28]
 800a15a:	2b02      	cmp	r3, #2
 800a15c:	dd1e      	ble.n	800a19c <_dtoa_r+0x964>
 800a15e:	f1bb 0f00 	cmp.w	fp, #0
 800a162:	f47f adb1 	bne.w	8009cc8 <_dtoa_r+0x490>
 800a166:	4621      	mov	r1, r4
 800a168:	465b      	mov	r3, fp
 800a16a:	2205      	movs	r2, #5
 800a16c:	4648      	mov	r0, r9
 800a16e:	f000 f9df 	bl	800a530 <__multadd>
 800a172:	4601      	mov	r1, r0
 800a174:	4604      	mov	r4, r0
 800a176:	9802      	ldr	r0, [sp, #8]
 800a178:	f000 fbea 	bl	800a950 <__mcmp>
 800a17c:	2800      	cmp	r0, #0
 800a17e:	f77f ada3 	ble.w	8009cc8 <_dtoa_r+0x490>
 800a182:	4656      	mov	r6, sl
 800a184:	2331      	movs	r3, #49	@ 0x31
 800a186:	f806 3b01 	strb.w	r3, [r6], #1
 800a18a:	f108 0801 	add.w	r8, r8, #1
 800a18e:	e59f      	b.n	8009cd0 <_dtoa_r+0x498>
 800a190:	9c03      	ldr	r4, [sp, #12]
 800a192:	46b8      	mov	r8, r7
 800a194:	4625      	mov	r5, r4
 800a196:	e7f4      	b.n	800a182 <_dtoa_r+0x94a>
 800a198:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800a19c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	f000 8101 	beq.w	800a3a6 <_dtoa_r+0xb6e>
 800a1a4:	2e00      	cmp	r6, #0
 800a1a6:	dd05      	ble.n	800a1b4 <_dtoa_r+0x97c>
 800a1a8:	4629      	mov	r1, r5
 800a1aa:	4632      	mov	r2, r6
 800a1ac:	4648      	mov	r0, r9
 800a1ae:	f000 fb63 	bl	800a878 <__lshift>
 800a1b2:	4605      	mov	r5, r0
 800a1b4:	9b08      	ldr	r3, [sp, #32]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d05c      	beq.n	800a274 <_dtoa_r+0xa3c>
 800a1ba:	6869      	ldr	r1, [r5, #4]
 800a1bc:	4648      	mov	r0, r9
 800a1be:	f000 f955 	bl	800a46c <_Balloc>
 800a1c2:	4606      	mov	r6, r0
 800a1c4:	b928      	cbnz	r0, 800a1d2 <_dtoa_r+0x99a>
 800a1c6:	4b82      	ldr	r3, [pc, #520]	@ (800a3d0 <_dtoa_r+0xb98>)
 800a1c8:	4602      	mov	r2, r0
 800a1ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800a1ce:	f7ff bb4a 	b.w	8009866 <_dtoa_r+0x2e>
 800a1d2:	692a      	ldr	r2, [r5, #16]
 800a1d4:	3202      	adds	r2, #2
 800a1d6:	0092      	lsls	r2, r2, #2
 800a1d8:	f105 010c 	add.w	r1, r5, #12
 800a1dc:	300c      	adds	r0, #12
 800a1de:	f000 fedd 	bl	800af9c <memcpy>
 800a1e2:	2201      	movs	r2, #1
 800a1e4:	4631      	mov	r1, r6
 800a1e6:	4648      	mov	r0, r9
 800a1e8:	f000 fb46 	bl	800a878 <__lshift>
 800a1ec:	f10a 0301 	add.w	r3, sl, #1
 800a1f0:	9300      	str	r3, [sp, #0]
 800a1f2:	eb0a 030b 	add.w	r3, sl, fp
 800a1f6:	9308      	str	r3, [sp, #32]
 800a1f8:	9b04      	ldr	r3, [sp, #16]
 800a1fa:	f003 0301 	and.w	r3, r3, #1
 800a1fe:	462f      	mov	r7, r5
 800a200:	9306      	str	r3, [sp, #24]
 800a202:	4605      	mov	r5, r0
 800a204:	9b00      	ldr	r3, [sp, #0]
 800a206:	9802      	ldr	r0, [sp, #8]
 800a208:	4621      	mov	r1, r4
 800a20a:	f103 3bff 	add.w	fp, r3, #4294967295
 800a20e:	f7ff fa88 	bl	8009722 <quorem>
 800a212:	4603      	mov	r3, r0
 800a214:	3330      	adds	r3, #48	@ 0x30
 800a216:	9003      	str	r0, [sp, #12]
 800a218:	4639      	mov	r1, r7
 800a21a:	9802      	ldr	r0, [sp, #8]
 800a21c:	9309      	str	r3, [sp, #36]	@ 0x24
 800a21e:	f000 fb97 	bl	800a950 <__mcmp>
 800a222:	462a      	mov	r2, r5
 800a224:	9004      	str	r0, [sp, #16]
 800a226:	4621      	mov	r1, r4
 800a228:	4648      	mov	r0, r9
 800a22a:	f000 fbad 	bl	800a988 <__mdiff>
 800a22e:	68c2      	ldr	r2, [r0, #12]
 800a230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a232:	4606      	mov	r6, r0
 800a234:	bb02      	cbnz	r2, 800a278 <_dtoa_r+0xa40>
 800a236:	4601      	mov	r1, r0
 800a238:	9802      	ldr	r0, [sp, #8]
 800a23a:	f000 fb89 	bl	800a950 <__mcmp>
 800a23e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a240:	4602      	mov	r2, r0
 800a242:	4631      	mov	r1, r6
 800a244:	4648      	mov	r0, r9
 800a246:	920c      	str	r2, [sp, #48]	@ 0x30
 800a248:	9309      	str	r3, [sp, #36]	@ 0x24
 800a24a:	f000 f94f 	bl	800a4ec <_Bfree>
 800a24e:	9b07      	ldr	r3, [sp, #28]
 800a250:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800a252:	9e00      	ldr	r6, [sp, #0]
 800a254:	ea42 0103 	orr.w	r1, r2, r3
 800a258:	9b06      	ldr	r3, [sp, #24]
 800a25a:	4319      	orrs	r1, r3
 800a25c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a25e:	d10d      	bne.n	800a27c <_dtoa_r+0xa44>
 800a260:	2b39      	cmp	r3, #57	@ 0x39
 800a262:	d027      	beq.n	800a2b4 <_dtoa_r+0xa7c>
 800a264:	9a04      	ldr	r2, [sp, #16]
 800a266:	2a00      	cmp	r2, #0
 800a268:	dd01      	ble.n	800a26e <_dtoa_r+0xa36>
 800a26a:	9b03      	ldr	r3, [sp, #12]
 800a26c:	3331      	adds	r3, #49	@ 0x31
 800a26e:	f88b 3000 	strb.w	r3, [fp]
 800a272:	e52e      	b.n	8009cd2 <_dtoa_r+0x49a>
 800a274:	4628      	mov	r0, r5
 800a276:	e7b9      	b.n	800a1ec <_dtoa_r+0x9b4>
 800a278:	2201      	movs	r2, #1
 800a27a:	e7e2      	b.n	800a242 <_dtoa_r+0xa0a>
 800a27c:	9904      	ldr	r1, [sp, #16]
 800a27e:	2900      	cmp	r1, #0
 800a280:	db04      	blt.n	800a28c <_dtoa_r+0xa54>
 800a282:	9807      	ldr	r0, [sp, #28]
 800a284:	4301      	orrs	r1, r0
 800a286:	9806      	ldr	r0, [sp, #24]
 800a288:	4301      	orrs	r1, r0
 800a28a:	d120      	bne.n	800a2ce <_dtoa_r+0xa96>
 800a28c:	2a00      	cmp	r2, #0
 800a28e:	ddee      	ble.n	800a26e <_dtoa_r+0xa36>
 800a290:	9902      	ldr	r1, [sp, #8]
 800a292:	9300      	str	r3, [sp, #0]
 800a294:	2201      	movs	r2, #1
 800a296:	4648      	mov	r0, r9
 800a298:	f000 faee 	bl	800a878 <__lshift>
 800a29c:	4621      	mov	r1, r4
 800a29e:	9002      	str	r0, [sp, #8]
 800a2a0:	f000 fb56 	bl	800a950 <__mcmp>
 800a2a4:	2800      	cmp	r0, #0
 800a2a6:	9b00      	ldr	r3, [sp, #0]
 800a2a8:	dc02      	bgt.n	800a2b0 <_dtoa_r+0xa78>
 800a2aa:	d1e0      	bne.n	800a26e <_dtoa_r+0xa36>
 800a2ac:	07da      	lsls	r2, r3, #31
 800a2ae:	d5de      	bpl.n	800a26e <_dtoa_r+0xa36>
 800a2b0:	2b39      	cmp	r3, #57	@ 0x39
 800a2b2:	d1da      	bne.n	800a26a <_dtoa_r+0xa32>
 800a2b4:	2339      	movs	r3, #57	@ 0x39
 800a2b6:	f88b 3000 	strb.w	r3, [fp]
 800a2ba:	4633      	mov	r3, r6
 800a2bc:	461e      	mov	r6, r3
 800a2be:	3b01      	subs	r3, #1
 800a2c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800a2c4:	2a39      	cmp	r2, #57	@ 0x39
 800a2c6:	d04e      	beq.n	800a366 <_dtoa_r+0xb2e>
 800a2c8:	3201      	adds	r2, #1
 800a2ca:	701a      	strb	r2, [r3, #0]
 800a2cc:	e501      	b.n	8009cd2 <_dtoa_r+0x49a>
 800a2ce:	2a00      	cmp	r2, #0
 800a2d0:	dd03      	ble.n	800a2da <_dtoa_r+0xaa2>
 800a2d2:	2b39      	cmp	r3, #57	@ 0x39
 800a2d4:	d0ee      	beq.n	800a2b4 <_dtoa_r+0xa7c>
 800a2d6:	3301      	adds	r3, #1
 800a2d8:	e7c9      	b.n	800a26e <_dtoa_r+0xa36>
 800a2da:	9a00      	ldr	r2, [sp, #0]
 800a2dc:	9908      	ldr	r1, [sp, #32]
 800a2de:	f802 3c01 	strb.w	r3, [r2, #-1]
 800a2e2:	428a      	cmp	r2, r1
 800a2e4:	d028      	beq.n	800a338 <_dtoa_r+0xb00>
 800a2e6:	9902      	ldr	r1, [sp, #8]
 800a2e8:	2300      	movs	r3, #0
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	4648      	mov	r0, r9
 800a2ee:	f000 f91f 	bl	800a530 <__multadd>
 800a2f2:	42af      	cmp	r7, r5
 800a2f4:	9002      	str	r0, [sp, #8]
 800a2f6:	f04f 0300 	mov.w	r3, #0
 800a2fa:	f04f 020a 	mov.w	r2, #10
 800a2fe:	4639      	mov	r1, r7
 800a300:	4648      	mov	r0, r9
 800a302:	d107      	bne.n	800a314 <_dtoa_r+0xadc>
 800a304:	f000 f914 	bl	800a530 <__multadd>
 800a308:	4607      	mov	r7, r0
 800a30a:	4605      	mov	r5, r0
 800a30c:	9b00      	ldr	r3, [sp, #0]
 800a30e:	3301      	adds	r3, #1
 800a310:	9300      	str	r3, [sp, #0]
 800a312:	e777      	b.n	800a204 <_dtoa_r+0x9cc>
 800a314:	f000 f90c 	bl	800a530 <__multadd>
 800a318:	4629      	mov	r1, r5
 800a31a:	4607      	mov	r7, r0
 800a31c:	2300      	movs	r3, #0
 800a31e:	220a      	movs	r2, #10
 800a320:	4648      	mov	r0, r9
 800a322:	f000 f905 	bl	800a530 <__multadd>
 800a326:	4605      	mov	r5, r0
 800a328:	e7f0      	b.n	800a30c <_dtoa_r+0xad4>
 800a32a:	f1bb 0f00 	cmp.w	fp, #0
 800a32e:	bfcc      	ite	gt
 800a330:	465e      	movgt	r6, fp
 800a332:	2601      	movle	r6, #1
 800a334:	4456      	add	r6, sl
 800a336:	2700      	movs	r7, #0
 800a338:	9902      	ldr	r1, [sp, #8]
 800a33a:	9300      	str	r3, [sp, #0]
 800a33c:	2201      	movs	r2, #1
 800a33e:	4648      	mov	r0, r9
 800a340:	f000 fa9a 	bl	800a878 <__lshift>
 800a344:	4621      	mov	r1, r4
 800a346:	9002      	str	r0, [sp, #8]
 800a348:	f000 fb02 	bl	800a950 <__mcmp>
 800a34c:	2800      	cmp	r0, #0
 800a34e:	dcb4      	bgt.n	800a2ba <_dtoa_r+0xa82>
 800a350:	d102      	bne.n	800a358 <_dtoa_r+0xb20>
 800a352:	9b00      	ldr	r3, [sp, #0]
 800a354:	07db      	lsls	r3, r3, #31
 800a356:	d4b0      	bmi.n	800a2ba <_dtoa_r+0xa82>
 800a358:	4633      	mov	r3, r6
 800a35a:	461e      	mov	r6, r3
 800a35c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a360:	2a30      	cmp	r2, #48	@ 0x30
 800a362:	d0fa      	beq.n	800a35a <_dtoa_r+0xb22>
 800a364:	e4b5      	b.n	8009cd2 <_dtoa_r+0x49a>
 800a366:	459a      	cmp	sl, r3
 800a368:	d1a8      	bne.n	800a2bc <_dtoa_r+0xa84>
 800a36a:	2331      	movs	r3, #49	@ 0x31
 800a36c:	f108 0801 	add.w	r8, r8, #1
 800a370:	f88a 3000 	strb.w	r3, [sl]
 800a374:	e4ad      	b.n	8009cd2 <_dtoa_r+0x49a>
 800a376:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a378:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800a3d4 <_dtoa_r+0xb9c>
 800a37c:	b11b      	cbz	r3, 800a386 <_dtoa_r+0xb4e>
 800a37e:	f10a 0308 	add.w	r3, sl, #8
 800a382:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800a384:	6013      	str	r3, [r2, #0]
 800a386:	4650      	mov	r0, sl
 800a388:	b017      	add	sp, #92	@ 0x5c
 800a38a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a38e:	9b07      	ldr	r3, [sp, #28]
 800a390:	2b01      	cmp	r3, #1
 800a392:	f77f ae2e 	ble.w	8009ff2 <_dtoa_r+0x7ba>
 800a396:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a398:	9308      	str	r3, [sp, #32]
 800a39a:	2001      	movs	r0, #1
 800a39c:	e64d      	b.n	800a03a <_dtoa_r+0x802>
 800a39e:	f1bb 0f00 	cmp.w	fp, #0
 800a3a2:	f77f aed9 	ble.w	800a158 <_dtoa_r+0x920>
 800a3a6:	4656      	mov	r6, sl
 800a3a8:	9802      	ldr	r0, [sp, #8]
 800a3aa:	4621      	mov	r1, r4
 800a3ac:	f7ff f9b9 	bl	8009722 <quorem>
 800a3b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800a3b4:	f806 3b01 	strb.w	r3, [r6], #1
 800a3b8:	eba6 020a 	sub.w	r2, r6, sl
 800a3bc:	4593      	cmp	fp, r2
 800a3be:	ddb4      	ble.n	800a32a <_dtoa_r+0xaf2>
 800a3c0:	9902      	ldr	r1, [sp, #8]
 800a3c2:	2300      	movs	r3, #0
 800a3c4:	220a      	movs	r2, #10
 800a3c6:	4648      	mov	r0, r9
 800a3c8:	f000 f8b2 	bl	800a530 <__multadd>
 800a3cc:	9002      	str	r0, [sp, #8]
 800a3ce:	e7eb      	b.n	800a3a8 <_dtoa_r+0xb70>
 800a3d0:	0800bda0 	.word	0x0800bda0
 800a3d4:	0800bd24 	.word	0x0800bd24

0800a3d8 <_free_r>:
 800a3d8:	b538      	push	{r3, r4, r5, lr}
 800a3da:	4605      	mov	r5, r0
 800a3dc:	2900      	cmp	r1, #0
 800a3de:	d041      	beq.n	800a464 <_free_r+0x8c>
 800a3e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a3e4:	1f0c      	subs	r4, r1, #4
 800a3e6:	2b00      	cmp	r3, #0
 800a3e8:	bfb8      	it	lt
 800a3ea:	18e4      	addlt	r4, r4, r3
 800a3ec:	f7fe fb68 	bl	8008ac0 <__malloc_lock>
 800a3f0:	4a1d      	ldr	r2, [pc, #116]	@ (800a468 <_free_r+0x90>)
 800a3f2:	6813      	ldr	r3, [r2, #0]
 800a3f4:	b933      	cbnz	r3, 800a404 <_free_r+0x2c>
 800a3f6:	6063      	str	r3, [r4, #4]
 800a3f8:	6014      	str	r4, [r2, #0]
 800a3fa:	4628      	mov	r0, r5
 800a3fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a400:	f7fe bb64 	b.w	8008acc <__malloc_unlock>
 800a404:	42a3      	cmp	r3, r4
 800a406:	d908      	bls.n	800a41a <_free_r+0x42>
 800a408:	6820      	ldr	r0, [r4, #0]
 800a40a:	1821      	adds	r1, r4, r0
 800a40c:	428b      	cmp	r3, r1
 800a40e:	bf01      	itttt	eq
 800a410:	6819      	ldreq	r1, [r3, #0]
 800a412:	685b      	ldreq	r3, [r3, #4]
 800a414:	1809      	addeq	r1, r1, r0
 800a416:	6021      	streq	r1, [r4, #0]
 800a418:	e7ed      	b.n	800a3f6 <_free_r+0x1e>
 800a41a:	461a      	mov	r2, r3
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	b10b      	cbz	r3, 800a424 <_free_r+0x4c>
 800a420:	42a3      	cmp	r3, r4
 800a422:	d9fa      	bls.n	800a41a <_free_r+0x42>
 800a424:	6811      	ldr	r1, [r2, #0]
 800a426:	1850      	adds	r0, r2, r1
 800a428:	42a0      	cmp	r0, r4
 800a42a:	d10b      	bne.n	800a444 <_free_r+0x6c>
 800a42c:	6820      	ldr	r0, [r4, #0]
 800a42e:	4401      	add	r1, r0
 800a430:	1850      	adds	r0, r2, r1
 800a432:	4283      	cmp	r3, r0
 800a434:	6011      	str	r1, [r2, #0]
 800a436:	d1e0      	bne.n	800a3fa <_free_r+0x22>
 800a438:	6818      	ldr	r0, [r3, #0]
 800a43a:	685b      	ldr	r3, [r3, #4]
 800a43c:	6053      	str	r3, [r2, #4]
 800a43e:	4408      	add	r0, r1
 800a440:	6010      	str	r0, [r2, #0]
 800a442:	e7da      	b.n	800a3fa <_free_r+0x22>
 800a444:	d902      	bls.n	800a44c <_free_r+0x74>
 800a446:	230c      	movs	r3, #12
 800a448:	602b      	str	r3, [r5, #0]
 800a44a:	e7d6      	b.n	800a3fa <_free_r+0x22>
 800a44c:	6820      	ldr	r0, [r4, #0]
 800a44e:	1821      	adds	r1, r4, r0
 800a450:	428b      	cmp	r3, r1
 800a452:	bf04      	itt	eq
 800a454:	6819      	ldreq	r1, [r3, #0]
 800a456:	685b      	ldreq	r3, [r3, #4]
 800a458:	6063      	str	r3, [r4, #4]
 800a45a:	bf04      	itt	eq
 800a45c:	1809      	addeq	r1, r1, r0
 800a45e:	6021      	streq	r1, [r4, #0]
 800a460:	6054      	str	r4, [r2, #4]
 800a462:	e7ca      	b.n	800a3fa <_free_r+0x22>
 800a464:	bd38      	pop	{r3, r4, r5, pc}
 800a466:	bf00      	nop
 800a468:	200004ec 	.word	0x200004ec

0800a46c <_Balloc>:
 800a46c:	b570      	push	{r4, r5, r6, lr}
 800a46e:	69c6      	ldr	r6, [r0, #28]
 800a470:	4604      	mov	r4, r0
 800a472:	460d      	mov	r5, r1
 800a474:	b976      	cbnz	r6, 800a494 <_Balloc+0x28>
 800a476:	2010      	movs	r0, #16
 800a478:	f7fe fa78 	bl	800896c <malloc>
 800a47c:	4602      	mov	r2, r0
 800a47e:	61e0      	str	r0, [r4, #28]
 800a480:	b920      	cbnz	r0, 800a48c <_Balloc+0x20>
 800a482:	4b18      	ldr	r3, [pc, #96]	@ (800a4e4 <_Balloc+0x78>)
 800a484:	4818      	ldr	r0, [pc, #96]	@ (800a4e8 <_Balloc+0x7c>)
 800a486:	216b      	movs	r1, #107	@ 0x6b
 800a488:	f000 fd96 	bl	800afb8 <__assert_func>
 800a48c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a490:	6006      	str	r6, [r0, #0]
 800a492:	60c6      	str	r6, [r0, #12]
 800a494:	69e6      	ldr	r6, [r4, #28]
 800a496:	68f3      	ldr	r3, [r6, #12]
 800a498:	b183      	cbz	r3, 800a4bc <_Balloc+0x50>
 800a49a:	69e3      	ldr	r3, [r4, #28]
 800a49c:	68db      	ldr	r3, [r3, #12]
 800a49e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a4a2:	b9b8      	cbnz	r0, 800a4d4 <_Balloc+0x68>
 800a4a4:	2101      	movs	r1, #1
 800a4a6:	fa01 f605 	lsl.w	r6, r1, r5
 800a4aa:	1d72      	adds	r2, r6, #5
 800a4ac:	0092      	lsls	r2, r2, #2
 800a4ae:	4620      	mov	r0, r4
 800a4b0:	f7fe fa48 	bl	8008944 <_calloc_r>
 800a4b4:	b160      	cbz	r0, 800a4d0 <_Balloc+0x64>
 800a4b6:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a4ba:	e00e      	b.n	800a4da <_Balloc+0x6e>
 800a4bc:	2221      	movs	r2, #33	@ 0x21
 800a4be:	2104      	movs	r1, #4
 800a4c0:	4620      	mov	r0, r4
 800a4c2:	f7fe fa3f 	bl	8008944 <_calloc_r>
 800a4c6:	69e3      	ldr	r3, [r4, #28]
 800a4c8:	60f0      	str	r0, [r6, #12]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	d1e4      	bne.n	800a49a <_Balloc+0x2e>
 800a4d0:	2000      	movs	r0, #0
 800a4d2:	bd70      	pop	{r4, r5, r6, pc}
 800a4d4:	6802      	ldr	r2, [r0, #0]
 800a4d6:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a4da:	2300      	movs	r3, #0
 800a4dc:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a4e0:	e7f7      	b.n	800a4d2 <_Balloc+0x66>
 800a4e2:	bf00      	nop
 800a4e4:	0800bd31 	.word	0x0800bd31
 800a4e8:	0800bdb1 	.word	0x0800bdb1

0800a4ec <_Bfree>:
 800a4ec:	b570      	push	{r4, r5, r6, lr}
 800a4ee:	69c6      	ldr	r6, [r0, #28]
 800a4f0:	4605      	mov	r5, r0
 800a4f2:	460c      	mov	r4, r1
 800a4f4:	b976      	cbnz	r6, 800a514 <_Bfree+0x28>
 800a4f6:	2010      	movs	r0, #16
 800a4f8:	f7fe fa38 	bl	800896c <malloc>
 800a4fc:	4602      	mov	r2, r0
 800a4fe:	61e8      	str	r0, [r5, #28]
 800a500:	b920      	cbnz	r0, 800a50c <_Bfree+0x20>
 800a502:	4b09      	ldr	r3, [pc, #36]	@ (800a528 <_Bfree+0x3c>)
 800a504:	4809      	ldr	r0, [pc, #36]	@ (800a52c <_Bfree+0x40>)
 800a506:	218f      	movs	r1, #143	@ 0x8f
 800a508:	f000 fd56 	bl	800afb8 <__assert_func>
 800a50c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a510:	6006      	str	r6, [r0, #0]
 800a512:	60c6      	str	r6, [r0, #12]
 800a514:	b13c      	cbz	r4, 800a526 <_Bfree+0x3a>
 800a516:	69eb      	ldr	r3, [r5, #28]
 800a518:	6862      	ldr	r2, [r4, #4]
 800a51a:	68db      	ldr	r3, [r3, #12]
 800a51c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a520:	6021      	str	r1, [r4, #0]
 800a522:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a526:	bd70      	pop	{r4, r5, r6, pc}
 800a528:	0800bd31 	.word	0x0800bd31
 800a52c:	0800bdb1 	.word	0x0800bdb1

0800a530 <__multadd>:
 800a530:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a534:	690d      	ldr	r5, [r1, #16]
 800a536:	4607      	mov	r7, r0
 800a538:	460c      	mov	r4, r1
 800a53a:	461e      	mov	r6, r3
 800a53c:	f101 0c14 	add.w	ip, r1, #20
 800a540:	2000      	movs	r0, #0
 800a542:	f8dc 3000 	ldr.w	r3, [ip]
 800a546:	b299      	uxth	r1, r3
 800a548:	fb02 6101 	mla	r1, r2, r1, r6
 800a54c:	0c1e      	lsrs	r6, r3, #16
 800a54e:	0c0b      	lsrs	r3, r1, #16
 800a550:	fb02 3306 	mla	r3, r2, r6, r3
 800a554:	b289      	uxth	r1, r1
 800a556:	3001      	adds	r0, #1
 800a558:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a55c:	4285      	cmp	r5, r0
 800a55e:	f84c 1b04 	str.w	r1, [ip], #4
 800a562:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a566:	dcec      	bgt.n	800a542 <__multadd+0x12>
 800a568:	b30e      	cbz	r6, 800a5ae <__multadd+0x7e>
 800a56a:	68a3      	ldr	r3, [r4, #8]
 800a56c:	42ab      	cmp	r3, r5
 800a56e:	dc19      	bgt.n	800a5a4 <__multadd+0x74>
 800a570:	6861      	ldr	r1, [r4, #4]
 800a572:	4638      	mov	r0, r7
 800a574:	3101      	adds	r1, #1
 800a576:	f7ff ff79 	bl	800a46c <_Balloc>
 800a57a:	4680      	mov	r8, r0
 800a57c:	b928      	cbnz	r0, 800a58a <__multadd+0x5a>
 800a57e:	4602      	mov	r2, r0
 800a580:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <__multadd+0x84>)
 800a582:	480d      	ldr	r0, [pc, #52]	@ (800a5b8 <__multadd+0x88>)
 800a584:	21ba      	movs	r1, #186	@ 0xba
 800a586:	f000 fd17 	bl	800afb8 <__assert_func>
 800a58a:	6922      	ldr	r2, [r4, #16]
 800a58c:	3202      	adds	r2, #2
 800a58e:	f104 010c 	add.w	r1, r4, #12
 800a592:	0092      	lsls	r2, r2, #2
 800a594:	300c      	adds	r0, #12
 800a596:	f000 fd01 	bl	800af9c <memcpy>
 800a59a:	4621      	mov	r1, r4
 800a59c:	4638      	mov	r0, r7
 800a59e:	f7ff ffa5 	bl	800a4ec <_Bfree>
 800a5a2:	4644      	mov	r4, r8
 800a5a4:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a5a8:	3501      	adds	r5, #1
 800a5aa:	615e      	str	r6, [r3, #20]
 800a5ac:	6125      	str	r5, [r4, #16]
 800a5ae:	4620      	mov	r0, r4
 800a5b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5b4:	0800bda0 	.word	0x0800bda0
 800a5b8:	0800bdb1 	.word	0x0800bdb1

0800a5bc <__hi0bits>:
 800a5bc:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800a5c0:	4603      	mov	r3, r0
 800a5c2:	bf36      	itet	cc
 800a5c4:	0403      	lslcc	r3, r0, #16
 800a5c6:	2000      	movcs	r0, #0
 800a5c8:	2010      	movcc	r0, #16
 800a5ca:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a5ce:	bf3c      	itt	cc
 800a5d0:	021b      	lslcc	r3, r3, #8
 800a5d2:	3008      	addcc	r0, #8
 800a5d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a5d8:	bf3c      	itt	cc
 800a5da:	011b      	lslcc	r3, r3, #4
 800a5dc:	3004      	addcc	r0, #4
 800a5de:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a5e2:	bf3c      	itt	cc
 800a5e4:	009b      	lslcc	r3, r3, #2
 800a5e6:	3002      	addcc	r0, #2
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	db05      	blt.n	800a5f8 <__hi0bits+0x3c>
 800a5ec:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800a5f0:	f100 0001 	add.w	r0, r0, #1
 800a5f4:	bf08      	it	eq
 800a5f6:	2020      	moveq	r0, #32
 800a5f8:	4770      	bx	lr

0800a5fa <__lo0bits>:
 800a5fa:	6803      	ldr	r3, [r0, #0]
 800a5fc:	4602      	mov	r2, r0
 800a5fe:	f013 0007 	ands.w	r0, r3, #7
 800a602:	d00b      	beq.n	800a61c <__lo0bits+0x22>
 800a604:	07d9      	lsls	r1, r3, #31
 800a606:	d421      	bmi.n	800a64c <__lo0bits+0x52>
 800a608:	0798      	lsls	r0, r3, #30
 800a60a:	bf49      	itett	mi
 800a60c:	085b      	lsrmi	r3, r3, #1
 800a60e:	089b      	lsrpl	r3, r3, #2
 800a610:	2001      	movmi	r0, #1
 800a612:	6013      	strmi	r3, [r2, #0]
 800a614:	bf5c      	itt	pl
 800a616:	6013      	strpl	r3, [r2, #0]
 800a618:	2002      	movpl	r0, #2
 800a61a:	4770      	bx	lr
 800a61c:	b299      	uxth	r1, r3
 800a61e:	b909      	cbnz	r1, 800a624 <__lo0bits+0x2a>
 800a620:	0c1b      	lsrs	r3, r3, #16
 800a622:	2010      	movs	r0, #16
 800a624:	b2d9      	uxtb	r1, r3
 800a626:	b909      	cbnz	r1, 800a62c <__lo0bits+0x32>
 800a628:	3008      	adds	r0, #8
 800a62a:	0a1b      	lsrs	r3, r3, #8
 800a62c:	0719      	lsls	r1, r3, #28
 800a62e:	bf04      	itt	eq
 800a630:	091b      	lsreq	r3, r3, #4
 800a632:	3004      	addeq	r0, #4
 800a634:	0799      	lsls	r1, r3, #30
 800a636:	bf04      	itt	eq
 800a638:	089b      	lsreq	r3, r3, #2
 800a63a:	3002      	addeq	r0, #2
 800a63c:	07d9      	lsls	r1, r3, #31
 800a63e:	d403      	bmi.n	800a648 <__lo0bits+0x4e>
 800a640:	085b      	lsrs	r3, r3, #1
 800a642:	f100 0001 	add.w	r0, r0, #1
 800a646:	d003      	beq.n	800a650 <__lo0bits+0x56>
 800a648:	6013      	str	r3, [r2, #0]
 800a64a:	4770      	bx	lr
 800a64c:	2000      	movs	r0, #0
 800a64e:	4770      	bx	lr
 800a650:	2020      	movs	r0, #32
 800a652:	4770      	bx	lr

0800a654 <__i2b>:
 800a654:	b510      	push	{r4, lr}
 800a656:	460c      	mov	r4, r1
 800a658:	2101      	movs	r1, #1
 800a65a:	f7ff ff07 	bl	800a46c <_Balloc>
 800a65e:	4602      	mov	r2, r0
 800a660:	b928      	cbnz	r0, 800a66e <__i2b+0x1a>
 800a662:	4b05      	ldr	r3, [pc, #20]	@ (800a678 <__i2b+0x24>)
 800a664:	4805      	ldr	r0, [pc, #20]	@ (800a67c <__i2b+0x28>)
 800a666:	f240 1145 	movw	r1, #325	@ 0x145
 800a66a:	f000 fca5 	bl	800afb8 <__assert_func>
 800a66e:	2301      	movs	r3, #1
 800a670:	6144      	str	r4, [r0, #20]
 800a672:	6103      	str	r3, [r0, #16]
 800a674:	bd10      	pop	{r4, pc}
 800a676:	bf00      	nop
 800a678:	0800bda0 	.word	0x0800bda0
 800a67c:	0800bdb1 	.word	0x0800bdb1

0800a680 <__multiply>:
 800a680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a684:	4617      	mov	r7, r2
 800a686:	690a      	ldr	r2, [r1, #16]
 800a688:	693b      	ldr	r3, [r7, #16]
 800a68a:	429a      	cmp	r2, r3
 800a68c:	bfa8      	it	ge
 800a68e:	463b      	movge	r3, r7
 800a690:	4689      	mov	r9, r1
 800a692:	bfa4      	itt	ge
 800a694:	460f      	movge	r7, r1
 800a696:	4699      	movge	r9, r3
 800a698:	693d      	ldr	r5, [r7, #16]
 800a69a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a69e:	68bb      	ldr	r3, [r7, #8]
 800a6a0:	6879      	ldr	r1, [r7, #4]
 800a6a2:	eb05 060a 	add.w	r6, r5, sl
 800a6a6:	42b3      	cmp	r3, r6
 800a6a8:	b085      	sub	sp, #20
 800a6aa:	bfb8      	it	lt
 800a6ac:	3101      	addlt	r1, #1
 800a6ae:	f7ff fedd 	bl	800a46c <_Balloc>
 800a6b2:	b930      	cbnz	r0, 800a6c2 <__multiply+0x42>
 800a6b4:	4602      	mov	r2, r0
 800a6b6:	4b41      	ldr	r3, [pc, #260]	@ (800a7bc <__multiply+0x13c>)
 800a6b8:	4841      	ldr	r0, [pc, #260]	@ (800a7c0 <__multiply+0x140>)
 800a6ba:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a6be:	f000 fc7b 	bl	800afb8 <__assert_func>
 800a6c2:	f100 0414 	add.w	r4, r0, #20
 800a6c6:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800a6ca:	4623      	mov	r3, r4
 800a6cc:	2200      	movs	r2, #0
 800a6ce:	4573      	cmp	r3, lr
 800a6d0:	d320      	bcc.n	800a714 <__multiply+0x94>
 800a6d2:	f107 0814 	add.w	r8, r7, #20
 800a6d6:	f109 0114 	add.w	r1, r9, #20
 800a6da:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800a6de:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800a6e2:	9302      	str	r3, [sp, #8]
 800a6e4:	1beb      	subs	r3, r5, r7
 800a6e6:	3b15      	subs	r3, #21
 800a6e8:	f023 0303 	bic.w	r3, r3, #3
 800a6ec:	3304      	adds	r3, #4
 800a6ee:	3715      	adds	r7, #21
 800a6f0:	42bd      	cmp	r5, r7
 800a6f2:	bf38      	it	cc
 800a6f4:	2304      	movcc	r3, #4
 800a6f6:	9301      	str	r3, [sp, #4]
 800a6f8:	9b02      	ldr	r3, [sp, #8]
 800a6fa:	9103      	str	r1, [sp, #12]
 800a6fc:	428b      	cmp	r3, r1
 800a6fe:	d80c      	bhi.n	800a71a <__multiply+0x9a>
 800a700:	2e00      	cmp	r6, #0
 800a702:	dd03      	ble.n	800a70c <__multiply+0x8c>
 800a704:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800a708:	2b00      	cmp	r3, #0
 800a70a:	d055      	beq.n	800a7b8 <__multiply+0x138>
 800a70c:	6106      	str	r6, [r0, #16]
 800a70e:	b005      	add	sp, #20
 800a710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a714:	f843 2b04 	str.w	r2, [r3], #4
 800a718:	e7d9      	b.n	800a6ce <__multiply+0x4e>
 800a71a:	f8b1 a000 	ldrh.w	sl, [r1]
 800a71e:	f1ba 0f00 	cmp.w	sl, #0
 800a722:	d01f      	beq.n	800a764 <__multiply+0xe4>
 800a724:	46c4      	mov	ip, r8
 800a726:	46a1      	mov	r9, r4
 800a728:	2700      	movs	r7, #0
 800a72a:	f85c 2b04 	ldr.w	r2, [ip], #4
 800a72e:	f8d9 3000 	ldr.w	r3, [r9]
 800a732:	fa1f fb82 	uxth.w	fp, r2
 800a736:	b29b      	uxth	r3, r3
 800a738:	fb0a 330b 	mla	r3, sl, fp, r3
 800a73c:	443b      	add	r3, r7
 800a73e:	f8d9 7000 	ldr.w	r7, [r9]
 800a742:	0c12      	lsrs	r2, r2, #16
 800a744:	0c3f      	lsrs	r7, r7, #16
 800a746:	fb0a 7202 	mla	r2, sl, r2, r7
 800a74a:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 800a74e:	b29b      	uxth	r3, r3
 800a750:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a754:	4565      	cmp	r5, ip
 800a756:	f849 3b04 	str.w	r3, [r9], #4
 800a75a:	ea4f 4712 	mov.w	r7, r2, lsr #16
 800a75e:	d8e4      	bhi.n	800a72a <__multiply+0xaa>
 800a760:	9b01      	ldr	r3, [sp, #4]
 800a762:	50e7      	str	r7, [r4, r3]
 800a764:	9b03      	ldr	r3, [sp, #12]
 800a766:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a76a:	3104      	adds	r1, #4
 800a76c:	f1b9 0f00 	cmp.w	r9, #0
 800a770:	d020      	beq.n	800a7b4 <__multiply+0x134>
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	4647      	mov	r7, r8
 800a776:	46a4      	mov	ip, r4
 800a778:	f04f 0a00 	mov.w	sl, #0
 800a77c:	f8b7 b000 	ldrh.w	fp, [r7]
 800a780:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 800a784:	fb09 220b 	mla	r2, r9, fp, r2
 800a788:	4452      	add	r2, sl
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a790:	f84c 3b04 	str.w	r3, [ip], #4
 800a794:	f857 3b04 	ldr.w	r3, [r7], #4
 800a798:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a79c:	f8bc 3000 	ldrh.w	r3, [ip]
 800a7a0:	fb09 330a 	mla	r3, r9, sl, r3
 800a7a4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800a7a8:	42bd      	cmp	r5, r7
 800a7aa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a7ae:	d8e5      	bhi.n	800a77c <__multiply+0xfc>
 800a7b0:	9a01      	ldr	r2, [sp, #4]
 800a7b2:	50a3      	str	r3, [r4, r2]
 800a7b4:	3404      	adds	r4, #4
 800a7b6:	e79f      	b.n	800a6f8 <__multiply+0x78>
 800a7b8:	3e01      	subs	r6, #1
 800a7ba:	e7a1      	b.n	800a700 <__multiply+0x80>
 800a7bc:	0800bda0 	.word	0x0800bda0
 800a7c0:	0800bdb1 	.word	0x0800bdb1

0800a7c4 <__pow5mult>:
 800a7c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7c8:	4615      	mov	r5, r2
 800a7ca:	f012 0203 	ands.w	r2, r2, #3
 800a7ce:	4607      	mov	r7, r0
 800a7d0:	460e      	mov	r6, r1
 800a7d2:	d007      	beq.n	800a7e4 <__pow5mult+0x20>
 800a7d4:	4c25      	ldr	r4, [pc, #148]	@ (800a86c <__pow5mult+0xa8>)
 800a7d6:	3a01      	subs	r2, #1
 800a7d8:	2300      	movs	r3, #0
 800a7da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a7de:	f7ff fea7 	bl	800a530 <__multadd>
 800a7e2:	4606      	mov	r6, r0
 800a7e4:	10ad      	asrs	r5, r5, #2
 800a7e6:	d03d      	beq.n	800a864 <__pow5mult+0xa0>
 800a7e8:	69fc      	ldr	r4, [r7, #28]
 800a7ea:	b97c      	cbnz	r4, 800a80c <__pow5mult+0x48>
 800a7ec:	2010      	movs	r0, #16
 800a7ee:	f7fe f8bd 	bl	800896c <malloc>
 800a7f2:	4602      	mov	r2, r0
 800a7f4:	61f8      	str	r0, [r7, #28]
 800a7f6:	b928      	cbnz	r0, 800a804 <__pow5mult+0x40>
 800a7f8:	4b1d      	ldr	r3, [pc, #116]	@ (800a870 <__pow5mult+0xac>)
 800a7fa:	481e      	ldr	r0, [pc, #120]	@ (800a874 <__pow5mult+0xb0>)
 800a7fc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a800:	f000 fbda 	bl	800afb8 <__assert_func>
 800a804:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a808:	6004      	str	r4, [r0, #0]
 800a80a:	60c4      	str	r4, [r0, #12]
 800a80c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a810:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a814:	b94c      	cbnz	r4, 800a82a <__pow5mult+0x66>
 800a816:	f240 2171 	movw	r1, #625	@ 0x271
 800a81a:	4638      	mov	r0, r7
 800a81c:	f7ff ff1a 	bl	800a654 <__i2b>
 800a820:	2300      	movs	r3, #0
 800a822:	f8c8 0008 	str.w	r0, [r8, #8]
 800a826:	4604      	mov	r4, r0
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	f04f 0900 	mov.w	r9, #0
 800a82e:	07eb      	lsls	r3, r5, #31
 800a830:	d50a      	bpl.n	800a848 <__pow5mult+0x84>
 800a832:	4631      	mov	r1, r6
 800a834:	4622      	mov	r2, r4
 800a836:	4638      	mov	r0, r7
 800a838:	f7ff ff22 	bl	800a680 <__multiply>
 800a83c:	4631      	mov	r1, r6
 800a83e:	4680      	mov	r8, r0
 800a840:	4638      	mov	r0, r7
 800a842:	f7ff fe53 	bl	800a4ec <_Bfree>
 800a846:	4646      	mov	r6, r8
 800a848:	106d      	asrs	r5, r5, #1
 800a84a:	d00b      	beq.n	800a864 <__pow5mult+0xa0>
 800a84c:	6820      	ldr	r0, [r4, #0]
 800a84e:	b938      	cbnz	r0, 800a860 <__pow5mult+0x9c>
 800a850:	4622      	mov	r2, r4
 800a852:	4621      	mov	r1, r4
 800a854:	4638      	mov	r0, r7
 800a856:	f7ff ff13 	bl	800a680 <__multiply>
 800a85a:	6020      	str	r0, [r4, #0]
 800a85c:	f8c0 9000 	str.w	r9, [r0]
 800a860:	4604      	mov	r4, r0
 800a862:	e7e4      	b.n	800a82e <__pow5mult+0x6a>
 800a864:	4630      	mov	r0, r6
 800a866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a86a:	bf00      	nop
 800a86c:	0800be64 	.word	0x0800be64
 800a870:	0800bd31 	.word	0x0800bd31
 800a874:	0800bdb1 	.word	0x0800bdb1

0800a878 <__lshift>:
 800a878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a87c:	460c      	mov	r4, r1
 800a87e:	6849      	ldr	r1, [r1, #4]
 800a880:	6923      	ldr	r3, [r4, #16]
 800a882:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a886:	68a3      	ldr	r3, [r4, #8]
 800a888:	4607      	mov	r7, r0
 800a88a:	4691      	mov	r9, r2
 800a88c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a890:	f108 0601 	add.w	r6, r8, #1
 800a894:	42b3      	cmp	r3, r6
 800a896:	db0b      	blt.n	800a8b0 <__lshift+0x38>
 800a898:	4638      	mov	r0, r7
 800a89a:	f7ff fde7 	bl	800a46c <_Balloc>
 800a89e:	4605      	mov	r5, r0
 800a8a0:	b948      	cbnz	r0, 800a8b6 <__lshift+0x3e>
 800a8a2:	4602      	mov	r2, r0
 800a8a4:	4b28      	ldr	r3, [pc, #160]	@ (800a948 <__lshift+0xd0>)
 800a8a6:	4829      	ldr	r0, [pc, #164]	@ (800a94c <__lshift+0xd4>)
 800a8a8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a8ac:	f000 fb84 	bl	800afb8 <__assert_func>
 800a8b0:	3101      	adds	r1, #1
 800a8b2:	005b      	lsls	r3, r3, #1
 800a8b4:	e7ee      	b.n	800a894 <__lshift+0x1c>
 800a8b6:	2300      	movs	r3, #0
 800a8b8:	f100 0114 	add.w	r1, r0, #20
 800a8bc:	f100 0210 	add.w	r2, r0, #16
 800a8c0:	4618      	mov	r0, r3
 800a8c2:	4553      	cmp	r3, sl
 800a8c4:	db33      	blt.n	800a92e <__lshift+0xb6>
 800a8c6:	6920      	ldr	r0, [r4, #16]
 800a8c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a8cc:	f104 0314 	add.w	r3, r4, #20
 800a8d0:	f019 091f 	ands.w	r9, r9, #31
 800a8d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a8d8:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a8dc:	d02b      	beq.n	800a936 <__lshift+0xbe>
 800a8de:	f1c9 0e20 	rsb	lr, r9, #32
 800a8e2:	468a      	mov	sl, r1
 800a8e4:	2200      	movs	r2, #0
 800a8e6:	6818      	ldr	r0, [r3, #0]
 800a8e8:	fa00 f009 	lsl.w	r0, r0, r9
 800a8ec:	4310      	orrs	r0, r2
 800a8ee:	f84a 0b04 	str.w	r0, [sl], #4
 800a8f2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a8f6:	459c      	cmp	ip, r3
 800a8f8:	fa22 f20e 	lsr.w	r2, r2, lr
 800a8fc:	d8f3      	bhi.n	800a8e6 <__lshift+0x6e>
 800a8fe:	ebac 0304 	sub.w	r3, ip, r4
 800a902:	3b15      	subs	r3, #21
 800a904:	f023 0303 	bic.w	r3, r3, #3
 800a908:	3304      	adds	r3, #4
 800a90a:	f104 0015 	add.w	r0, r4, #21
 800a90e:	4560      	cmp	r0, ip
 800a910:	bf88      	it	hi
 800a912:	2304      	movhi	r3, #4
 800a914:	50ca      	str	r2, [r1, r3]
 800a916:	b10a      	cbz	r2, 800a91c <__lshift+0xa4>
 800a918:	f108 0602 	add.w	r6, r8, #2
 800a91c:	3e01      	subs	r6, #1
 800a91e:	4638      	mov	r0, r7
 800a920:	612e      	str	r6, [r5, #16]
 800a922:	4621      	mov	r1, r4
 800a924:	f7ff fde2 	bl	800a4ec <_Bfree>
 800a928:	4628      	mov	r0, r5
 800a92a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92e:	f842 0f04 	str.w	r0, [r2, #4]!
 800a932:	3301      	adds	r3, #1
 800a934:	e7c5      	b.n	800a8c2 <__lshift+0x4a>
 800a936:	3904      	subs	r1, #4
 800a938:	f853 2b04 	ldr.w	r2, [r3], #4
 800a93c:	f841 2f04 	str.w	r2, [r1, #4]!
 800a940:	459c      	cmp	ip, r3
 800a942:	d8f9      	bhi.n	800a938 <__lshift+0xc0>
 800a944:	e7ea      	b.n	800a91c <__lshift+0xa4>
 800a946:	bf00      	nop
 800a948:	0800bda0 	.word	0x0800bda0
 800a94c:	0800bdb1 	.word	0x0800bdb1

0800a950 <__mcmp>:
 800a950:	690a      	ldr	r2, [r1, #16]
 800a952:	4603      	mov	r3, r0
 800a954:	6900      	ldr	r0, [r0, #16]
 800a956:	1a80      	subs	r0, r0, r2
 800a958:	b530      	push	{r4, r5, lr}
 800a95a:	d10e      	bne.n	800a97a <__mcmp+0x2a>
 800a95c:	3314      	adds	r3, #20
 800a95e:	3114      	adds	r1, #20
 800a960:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a964:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a968:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a96c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a970:	4295      	cmp	r5, r2
 800a972:	d003      	beq.n	800a97c <__mcmp+0x2c>
 800a974:	d205      	bcs.n	800a982 <__mcmp+0x32>
 800a976:	f04f 30ff 	mov.w	r0, #4294967295
 800a97a:	bd30      	pop	{r4, r5, pc}
 800a97c:	42a3      	cmp	r3, r4
 800a97e:	d3f3      	bcc.n	800a968 <__mcmp+0x18>
 800a980:	e7fb      	b.n	800a97a <__mcmp+0x2a>
 800a982:	2001      	movs	r0, #1
 800a984:	e7f9      	b.n	800a97a <__mcmp+0x2a>
	...

0800a988 <__mdiff>:
 800a988:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a98c:	4689      	mov	r9, r1
 800a98e:	4606      	mov	r6, r0
 800a990:	4611      	mov	r1, r2
 800a992:	4648      	mov	r0, r9
 800a994:	4614      	mov	r4, r2
 800a996:	f7ff ffdb 	bl	800a950 <__mcmp>
 800a99a:	1e05      	subs	r5, r0, #0
 800a99c:	d112      	bne.n	800a9c4 <__mdiff+0x3c>
 800a99e:	4629      	mov	r1, r5
 800a9a0:	4630      	mov	r0, r6
 800a9a2:	f7ff fd63 	bl	800a46c <_Balloc>
 800a9a6:	4602      	mov	r2, r0
 800a9a8:	b928      	cbnz	r0, 800a9b6 <__mdiff+0x2e>
 800a9aa:	4b3f      	ldr	r3, [pc, #252]	@ (800aaa8 <__mdiff+0x120>)
 800a9ac:	f240 2137 	movw	r1, #567	@ 0x237
 800a9b0:	483e      	ldr	r0, [pc, #248]	@ (800aaac <__mdiff+0x124>)
 800a9b2:	f000 fb01 	bl	800afb8 <__assert_func>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a9bc:	4610      	mov	r0, r2
 800a9be:	b003      	add	sp, #12
 800a9c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a9c4:	bfbc      	itt	lt
 800a9c6:	464b      	movlt	r3, r9
 800a9c8:	46a1      	movlt	r9, r4
 800a9ca:	4630      	mov	r0, r6
 800a9cc:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a9d0:	bfba      	itte	lt
 800a9d2:	461c      	movlt	r4, r3
 800a9d4:	2501      	movlt	r5, #1
 800a9d6:	2500      	movge	r5, #0
 800a9d8:	f7ff fd48 	bl	800a46c <_Balloc>
 800a9dc:	4602      	mov	r2, r0
 800a9de:	b918      	cbnz	r0, 800a9e8 <__mdiff+0x60>
 800a9e0:	4b31      	ldr	r3, [pc, #196]	@ (800aaa8 <__mdiff+0x120>)
 800a9e2:	f240 2145 	movw	r1, #581	@ 0x245
 800a9e6:	e7e3      	b.n	800a9b0 <__mdiff+0x28>
 800a9e8:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a9ec:	6926      	ldr	r6, [r4, #16]
 800a9ee:	60c5      	str	r5, [r0, #12]
 800a9f0:	f109 0310 	add.w	r3, r9, #16
 800a9f4:	f109 0514 	add.w	r5, r9, #20
 800a9f8:	f104 0e14 	add.w	lr, r4, #20
 800a9fc:	f100 0b14 	add.w	fp, r0, #20
 800aa00:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800aa04:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800aa08:	9301      	str	r3, [sp, #4]
 800aa0a:	46d9      	mov	r9, fp
 800aa0c:	f04f 0c00 	mov.w	ip, #0
 800aa10:	9b01      	ldr	r3, [sp, #4]
 800aa12:	f85e 0b04 	ldr.w	r0, [lr], #4
 800aa16:	f853 af04 	ldr.w	sl, [r3, #4]!
 800aa1a:	9301      	str	r3, [sp, #4]
 800aa1c:	fa1f f38a 	uxth.w	r3, sl
 800aa20:	4619      	mov	r1, r3
 800aa22:	b283      	uxth	r3, r0
 800aa24:	1acb      	subs	r3, r1, r3
 800aa26:	0c00      	lsrs	r0, r0, #16
 800aa28:	4463      	add	r3, ip
 800aa2a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800aa2e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800aa32:	b29b      	uxth	r3, r3
 800aa34:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800aa38:	4576      	cmp	r6, lr
 800aa3a:	f849 3b04 	str.w	r3, [r9], #4
 800aa3e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aa42:	d8e5      	bhi.n	800aa10 <__mdiff+0x88>
 800aa44:	1b33      	subs	r3, r6, r4
 800aa46:	3b15      	subs	r3, #21
 800aa48:	f023 0303 	bic.w	r3, r3, #3
 800aa4c:	3415      	adds	r4, #21
 800aa4e:	3304      	adds	r3, #4
 800aa50:	42a6      	cmp	r6, r4
 800aa52:	bf38      	it	cc
 800aa54:	2304      	movcc	r3, #4
 800aa56:	441d      	add	r5, r3
 800aa58:	445b      	add	r3, fp
 800aa5a:	461e      	mov	r6, r3
 800aa5c:	462c      	mov	r4, r5
 800aa5e:	4544      	cmp	r4, r8
 800aa60:	d30e      	bcc.n	800aa80 <__mdiff+0xf8>
 800aa62:	f108 0103 	add.w	r1, r8, #3
 800aa66:	1b49      	subs	r1, r1, r5
 800aa68:	f021 0103 	bic.w	r1, r1, #3
 800aa6c:	3d03      	subs	r5, #3
 800aa6e:	45a8      	cmp	r8, r5
 800aa70:	bf38      	it	cc
 800aa72:	2100      	movcc	r1, #0
 800aa74:	440b      	add	r3, r1
 800aa76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800aa7a:	b191      	cbz	r1, 800aaa2 <__mdiff+0x11a>
 800aa7c:	6117      	str	r7, [r2, #16]
 800aa7e:	e79d      	b.n	800a9bc <__mdiff+0x34>
 800aa80:	f854 1b04 	ldr.w	r1, [r4], #4
 800aa84:	46e6      	mov	lr, ip
 800aa86:	0c08      	lsrs	r0, r1, #16
 800aa88:	fa1c fc81 	uxtah	ip, ip, r1
 800aa8c:	4471      	add	r1, lr
 800aa8e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800aa92:	b289      	uxth	r1, r1
 800aa94:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800aa98:	f846 1b04 	str.w	r1, [r6], #4
 800aa9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800aaa0:	e7dd      	b.n	800aa5e <__mdiff+0xd6>
 800aaa2:	3f01      	subs	r7, #1
 800aaa4:	e7e7      	b.n	800aa76 <__mdiff+0xee>
 800aaa6:	bf00      	nop
 800aaa8:	0800bda0 	.word	0x0800bda0
 800aaac:	0800bdb1 	.word	0x0800bdb1

0800aab0 <__d2b>:
 800aab0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800aab4:	460f      	mov	r7, r1
 800aab6:	2101      	movs	r1, #1
 800aab8:	ec59 8b10 	vmov	r8, r9, d0
 800aabc:	4616      	mov	r6, r2
 800aabe:	f7ff fcd5 	bl	800a46c <_Balloc>
 800aac2:	4604      	mov	r4, r0
 800aac4:	b930      	cbnz	r0, 800aad4 <__d2b+0x24>
 800aac6:	4602      	mov	r2, r0
 800aac8:	4b23      	ldr	r3, [pc, #140]	@ (800ab58 <__d2b+0xa8>)
 800aaca:	4824      	ldr	r0, [pc, #144]	@ (800ab5c <__d2b+0xac>)
 800aacc:	f240 310f 	movw	r1, #783	@ 0x30f
 800aad0:	f000 fa72 	bl	800afb8 <__assert_func>
 800aad4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800aad8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800aadc:	b10d      	cbz	r5, 800aae2 <__d2b+0x32>
 800aade:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800aae2:	9301      	str	r3, [sp, #4]
 800aae4:	f1b8 0300 	subs.w	r3, r8, #0
 800aae8:	d023      	beq.n	800ab32 <__d2b+0x82>
 800aaea:	4668      	mov	r0, sp
 800aaec:	9300      	str	r3, [sp, #0]
 800aaee:	f7ff fd84 	bl	800a5fa <__lo0bits>
 800aaf2:	e9dd 1200 	ldrd	r1, r2, [sp]
 800aaf6:	b1d0      	cbz	r0, 800ab2e <__d2b+0x7e>
 800aaf8:	f1c0 0320 	rsb	r3, r0, #32
 800aafc:	fa02 f303 	lsl.w	r3, r2, r3
 800ab00:	430b      	orrs	r3, r1
 800ab02:	40c2      	lsrs	r2, r0
 800ab04:	6163      	str	r3, [r4, #20]
 800ab06:	9201      	str	r2, [sp, #4]
 800ab08:	9b01      	ldr	r3, [sp, #4]
 800ab0a:	61a3      	str	r3, [r4, #24]
 800ab0c:	2b00      	cmp	r3, #0
 800ab0e:	bf0c      	ite	eq
 800ab10:	2201      	moveq	r2, #1
 800ab12:	2202      	movne	r2, #2
 800ab14:	6122      	str	r2, [r4, #16]
 800ab16:	b1a5      	cbz	r5, 800ab42 <__d2b+0x92>
 800ab18:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800ab1c:	4405      	add	r5, r0
 800ab1e:	603d      	str	r5, [r7, #0]
 800ab20:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800ab24:	6030      	str	r0, [r6, #0]
 800ab26:	4620      	mov	r0, r4
 800ab28:	b003      	add	sp, #12
 800ab2a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ab2e:	6161      	str	r1, [r4, #20]
 800ab30:	e7ea      	b.n	800ab08 <__d2b+0x58>
 800ab32:	a801      	add	r0, sp, #4
 800ab34:	f7ff fd61 	bl	800a5fa <__lo0bits>
 800ab38:	9b01      	ldr	r3, [sp, #4]
 800ab3a:	6163      	str	r3, [r4, #20]
 800ab3c:	3020      	adds	r0, #32
 800ab3e:	2201      	movs	r2, #1
 800ab40:	e7e8      	b.n	800ab14 <__d2b+0x64>
 800ab42:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800ab46:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800ab4a:	6038      	str	r0, [r7, #0]
 800ab4c:	6918      	ldr	r0, [r3, #16]
 800ab4e:	f7ff fd35 	bl	800a5bc <__hi0bits>
 800ab52:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800ab56:	e7e5      	b.n	800ab24 <__d2b+0x74>
 800ab58:	0800bda0 	.word	0x0800bda0
 800ab5c:	0800bdb1 	.word	0x0800bdb1

0800ab60 <__ssputs_r>:
 800ab60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab64:	688e      	ldr	r6, [r1, #8]
 800ab66:	461f      	mov	r7, r3
 800ab68:	42be      	cmp	r6, r7
 800ab6a:	680b      	ldr	r3, [r1, #0]
 800ab6c:	4682      	mov	sl, r0
 800ab6e:	460c      	mov	r4, r1
 800ab70:	4690      	mov	r8, r2
 800ab72:	d82d      	bhi.n	800abd0 <__ssputs_r+0x70>
 800ab74:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ab78:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800ab7c:	d026      	beq.n	800abcc <__ssputs_r+0x6c>
 800ab7e:	6965      	ldr	r5, [r4, #20]
 800ab80:	6909      	ldr	r1, [r1, #16]
 800ab82:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ab86:	eba3 0901 	sub.w	r9, r3, r1
 800ab8a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ab8e:	1c7b      	adds	r3, r7, #1
 800ab90:	444b      	add	r3, r9
 800ab92:	106d      	asrs	r5, r5, #1
 800ab94:	429d      	cmp	r5, r3
 800ab96:	bf38      	it	cc
 800ab98:	461d      	movcc	r5, r3
 800ab9a:	0553      	lsls	r3, r2, #21
 800ab9c:	d527      	bpl.n	800abee <__ssputs_r+0x8e>
 800ab9e:	4629      	mov	r1, r5
 800aba0:	f7fd ff0e 	bl	80089c0 <_malloc_r>
 800aba4:	4606      	mov	r6, r0
 800aba6:	b360      	cbz	r0, 800ac02 <__ssputs_r+0xa2>
 800aba8:	6921      	ldr	r1, [r4, #16]
 800abaa:	464a      	mov	r2, r9
 800abac:	f000 f9f6 	bl	800af9c <memcpy>
 800abb0:	89a3      	ldrh	r3, [r4, #12]
 800abb2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800abb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abba:	81a3      	strh	r3, [r4, #12]
 800abbc:	6126      	str	r6, [r4, #16]
 800abbe:	6165      	str	r5, [r4, #20]
 800abc0:	444e      	add	r6, r9
 800abc2:	eba5 0509 	sub.w	r5, r5, r9
 800abc6:	6026      	str	r6, [r4, #0]
 800abc8:	60a5      	str	r5, [r4, #8]
 800abca:	463e      	mov	r6, r7
 800abcc:	42be      	cmp	r6, r7
 800abce:	d900      	bls.n	800abd2 <__ssputs_r+0x72>
 800abd0:	463e      	mov	r6, r7
 800abd2:	6820      	ldr	r0, [r4, #0]
 800abd4:	4632      	mov	r2, r6
 800abd6:	4641      	mov	r1, r8
 800abd8:	f000 f9c6 	bl	800af68 <memmove>
 800abdc:	68a3      	ldr	r3, [r4, #8]
 800abde:	1b9b      	subs	r3, r3, r6
 800abe0:	60a3      	str	r3, [r4, #8]
 800abe2:	6823      	ldr	r3, [r4, #0]
 800abe4:	4433      	add	r3, r6
 800abe6:	6023      	str	r3, [r4, #0]
 800abe8:	2000      	movs	r0, #0
 800abea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abee:	462a      	mov	r2, r5
 800abf0:	f000 fa12 	bl	800b018 <_realloc_r>
 800abf4:	4606      	mov	r6, r0
 800abf6:	2800      	cmp	r0, #0
 800abf8:	d1e0      	bne.n	800abbc <__ssputs_r+0x5c>
 800abfa:	6921      	ldr	r1, [r4, #16]
 800abfc:	4650      	mov	r0, sl
 800abfe:	f7ff fbeb 	bl	800a3d8 <_free_r>
 800ac02:	230c      	movs	r3, #12
 800ac04:	f8ca 3000 	str.w	r3, [sl]
 800ac08:	89a3      	ldrh	r3, [r4, #12]
 800ac0a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ac0e:	81a3      	strh	r3, [r4, #12]
 800ac10:	f04f 30ff 	mov.w	r0, #4294967295
 800ac14:	e7e9      	b.n	800abea <__ssputs_r+0x8a>
	...

0800ac18 <_svfiprintf_r>:
 800ac18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac1c:	4698      	mov	r8, r3
 800ac1e:	898b      	ldrh	r3, [r1, #12]
 800ac20:	061b      	lsls	r3, r3, #24
 800ac22:	b09d      	sub	sp, #116	@ 0x74
 800ac24:	4607      	mov	r7, r0
 800ac26:	460d      	mov	r5, r1
 800ac28:	4614      	mov	r4, r2
 800ac2a:	d510      	bpl.n	800ac4e <_svfiprintf_r+0x36>
 800ac2c:	690b      	ldr	r3, [r1, #16]
 800ac2e:	b973      	cbnz	r3, 800ac4e <_svfiprintf_r+0x36>
 800ac30:	2140      	movs	r1, #64	@ 0x40
 800ac32:	f7fd fec5 	bl	80089c0 <_malloc_r>
 800ac36:	6028      	str	r0, [r5, #0]
 800ac38:	6128      	str	r0, [r5, #16]
 800ac3a:	b930      	cbnz	r0, 800ac4a <_svfiprintf_r+0x32>
 800ac3c:	230c      	movs	r3, #12
 800ac3e:	603b      	str	r3, [r7, #0]
 800ac40:	f04f 30ff 	mov.w	r0, #4294967295
 800ac44:	b01d      	add	sp, #116	@ 0x74
 800ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac4a:	2340      	movs	r3, #64	@ 0x40
 800ac4c:	616b      	str	r3, [r5, #20]
 800ac4e:	2300      	movs	r3, #0
 800ac50:	9309      	str	r3, [sp, #36]	@ 0x24
 800ac52:	2320      	movs	r3, #32
 800ac54:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800ac58:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac5c:	2330      	movs	r3, #48	@ 0x30
 800ac5e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800adfc <_svfiprintf_r+0x1e4>
 800ac62:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac66:	f04f 0901 	mov.w	r9, #1
 800ac6a:	4623      	mov	r3, r4
 800ac6c:	469a      	mov	sl, r3
 800ac6e:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac72:	b10a      	cbz	r2, 800ac78 <_svfiprintf_r+0x60>
 800ac74:	2a25      	cmp	r2, #37	@ 0x25
 800ac76:	d1f9      	bne.n	800ac6c <_svfiprintf_r+0x54>
 800ac78:	ebba 0b04 	subs.w	fp, sl, r4
 800ac7c:	d00b      	beq.n	800ac96 <_svfiprintf_r+0x7e>
 800ac7e:	465b      	mov	r3, fp
 800ac80:	4622      	mov	r2, r4
 800ac82:	4629      	mov	r1, r5
 800ac84:	4638      	mov	r0, r7
 800ac86:	f7ff ff6b 	bl	800ab60 <__ssputs_r>
 800ac8a:	3001      	adds	r0, #1
 800ac8c:	f000 80a7 	beq.w	800adde <_svfiprintf_r+0x1c6>
 800ac90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac92:	445a      	add	r2, fp
 800ac94:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac96:	f89a 3000 	ldrb.w	r3, [sl]
 800ac9a:	2b00      	cmp	r3, #0
 800ac9c:	f000 809f 	beq.w	800adde <_svfiprintf_r+0x1c6>
 800aca0:	2300      	movs	r3, #0
 800aca2:	f04f 32ff 	mov.w	r2, #4294967295
 800aca6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800acaa:	f10a 0a01 	add.w	sl, sl, #1
 800acae:	9304      	str	r3, [sp, #16]
 800acb0:	9307      	str	r3, [sp, #28]
 800acb2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800acb6:	931a      	str	r3, [sp, #104]	@ 0x68
 800acb8:	4654      	mov	r4, sl
 800acba:	2205      	movs	r2, #5
 800acbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800acc0:	484e      	ldr	r0, [pc, #312]	@ (800adfc <_svfiprintf_r+0x1e4>)
 800acc2:	f7f5 fa85 	bl	80001d0 <memchr>
 800acc6:	9a04      	ldr	r2, [sp, #16]
 800acc8:	b9d8      	cbnz	r0, 800ad02 <_svfiprintf_r+0xea>
 800acca:	06d0      	lsls	r0, r2, #27
 800accc:	bf44      	itt	mi
 800acce:	2320      	movmi	r3, #32
 800acd0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acd4:	0711      	lsls	r1, r2, #28
 800acd6:	bf44      	itt	mi
 800acd8:	232b      	movmi	r3, #43	@ 0x2b
 800acda:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800acde:	f89a 3000 	ldrb.w	r3, [sl]
 800ace2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ace4:	d015      	beq.n	800ad12 <_svfiprintf_r+0xfa>
 800ace6:	9a07      	ldr	r2, [sp, #28]
 800ace8:	4654      	mov	r4, sl
 800acea:	2000      	movs	r0, #0
 800acec:	f04f 0c0a 	mov.w	ip, #10
 800acf0:	4621      	mov	r1, r4
 800acf2:	f811 3b01 	ldrb.w	r3, [r1], #1
 800acf6:	3b30      	subs	r3, #48	@ 0x30
 800acf8:	2b09      	cmp	r3, #9
 800acfa:	d94b      	bls.n	800ad94 <_svfiprintf_r+0x17c>
 800acfc:	b1b0      	cbz	r0, 800ad2c <_svfiprintf_r+0x114>
 800acfe:	9207      	str	r2, [sp, #28]
 800ad00:	e014      	b.n	800ad2c <_svfiprintf_r+0x114>
 800ad02:	eba0 0308 	sub.w	r3, r0, r8
 800ad06:	fa09 f303 	lsl.w	r3, r9, r3
 800ad0a:	4313      	orrs	r3, r2
 800ad0c:	9304      	str	r3, [sp, #16]
 800ad0e:	46a2      	mov	sl, r4
 800ad10:	e7d2      	b.n	800acb8 <_svfiprintf_r+0xa0>
 800ad12:	9b03      	ldr	r3, [sp, #12]
 800ad14:	1d19      	adds	r1, r3, #4
 800ad16:	681b      	ldr	r3, [r3, #0]
 800ad18:	9103      	str	r1, [sp, #12]
 800ad1a:	2b00      	cmp	r3, #0
 800ad1c:	bfbb      	ittet	lt
 800ad1e:	425b      	neglt	r3, r3
 800ad20:	f042 0202 	orrlt.w	r2, r2, #2
 800ad24:	9307      	strge	r3, [sp, #28]
 800ad26:	9307      	strlt	r3, [sp, #28]
 800ad28:	bfb8      	it	lt
 800ad2a:	9204      	strlt	r2, [sp, #16]
 800ad2c:	7823      	ldrb	r3, [r4, #0]
 800ad2e:	2b2e      	cmp	r3, #46	@ 0x2e
 800ad30:	d10a      	bne.n	800ad48 <_svfiprintf_r+0x130>
 800ad32:	7863      	ldrb	r3, [r4, #1]
 800ad34:	2b2a      	cmp	r3, #42	@ 0x2a
 800ad36:	d132      	bne.n	800ad9e <_svfiprintf_r+0x186>
 800ad38:	9b03      	ldr	r3, [sp, #12]
 800ad3a:	1d1a      	adds	r2, r3, #4
 800ad3c:	681b      	ldr	r3, [r3, #0]
 800ad3e:	9203      	str	r2, [sp, #12]
 800ad40:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ad44:	3402      	adds	r4, #2
 800ad46:	9305      	str	r3, [sp, #20]
 800ad48:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800ae0c <_svfiprintf_r+0x1f4>
 800ad4c:	7821      	ldrb	r1, [r4, #0]
 800ad4e:	2203      	movs	r2, #3
 800ad50:	4650      	mov	r0, sl
 800ad52:	f7f5 fa3d 	bl	80001d0 <memchr>
 800ad56:	b138      	cbz	r0, 800ad68 <_svfiprintf_r+0x150>
 800ad58:	9b04      	ldr	r3, [sp, #16]
 800ad5a:	eba0 000a 	sub.w	r0, r0, sl
 800ad5e:	2240      	movs	r2, #64	@ 0x40
 800ad60:	4082      	lsls	r2, r0
 800ad62:	4313      	orrs	r3, r2
 800ad64:	3401      	adds	r4, #1
 800ad66:	9304      	str	r3, [sp, #16]
 800ad68:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad6c:	4824      	ldr	r0, [pc, #144]	@ (800ae00 <_svfiprintf_r+0x1e8>)
 800ad6e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad72:	2206      	movs	r2, #6
 800ad74:	f7f5 fa2c 	bl	80001d0 <memchr>
 800ad78:	2800      	cmp	r0, #0
 800ad7a:	d036      	beq.n	800adea <_svfiprintf_r+0x1d2>
 800ad7c:	4b21      	ldr	r3, [pc, #132]	@ (800ae04 <_svfiprintf_r+0x1ec>)
 800ad7e:	bb1b      	cbnz	r3, 800adc8 <_svfiprintf_r+0x1b0>
 800ad80:	9b03      	ldr	r3, [sp, #12]
 800ad82:	3307      	adds	r3, #7
 800ad84:	f023 0307 	bic.w	r3, r3, #7
 800ad88:	3308      	adds	r3, #8
 800ad8a:	9303      	str	r3, [sp, #12]
 800ad8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad8e:	4433      	add	r3, r6
 800ad90:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad92:	e76a      	b.n	800ac6a <_svfiprintf_r+0x52>
 800ad94:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad98:	460c      	mov	r4, r1
 800ad9a:	2001      	movs	r0, #1
 800ad9c:	e7a8      	b.n	800acf0 <_svfiprintf_r+0xd8>
 800ad9e:	2300      	movs	r3, #0
 800ada0:	3401      	adds	r4, #1
 800ada2:	9305      	str	r3, [sp, #20]
 800ada4:	4619      	mov	r1, r3
 800ada6:	f04f 0c0a 	mov.w	ip, #10
 800adaa:	4620      	mov	r0, r4
 800adac:	f810 2b01 	ldrb.w	r2, [r0], #1
 800adb0:	3a30      	subs	r2, #48	@ 0x30
 800adb2:	2a09      	cmp	r2, #9
 800adb4:	d903      	bls.n	800adbe <_svfiprintf_r+0x1a6>
 800adb6:	2b00      	cmp	r3, #0
 800adb8:	d0c6      	beq.n	800ad48 <_svfiprintf_r+0x130>
 800adba:	9105      	str	r1, [sp, #20]
 800adbc:	e7c4      	b.n	800ad48 <_svfiprintf_r+0x130>
 800adbe:	fb0c 2101 	mla	r1, ip, r1, r2
 800adc2:	4604      	mov	r4, r0
 800adc4:	2301      	movs	r3, #1
 800adc6:	e7f0      	b.n	800adaa <_svfiprintf_r+0x192>
 800adc8:	ab03      	add	r3, sp, #12
 800adca:	9300      	str	r3, [sp, #0]
 800adcc:	462a      	mov	r2, r5
 800adce:	4b0e      	ldr	r3, [pc, #56]	@ (800ae08 <_svfiprintf_r+0x1f0>)
 800add0:	a904      	add	r1, sp, #16
 800add2:	4638      	mov	r0, r7
 800add4:	f7fd ff20 	bl	8008c18 <_printf_float>
 800add8:	1c42      	adds	r2, r0, #1
 800adda:	4606      	mov	r6, r0
 800addc:	d1d6      	bne.n	800ad8c <_svfiprintf_r+0x174>
 800adde:	89ab      	ldrh	r3, [r5, #12]
 800ade0:	065b      	lsls	r3, r3, #25
 800ade2:	f53f af2d 	bmi.w	800ac40 <_svfiprintf_r+0x28>
 800ade6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ade8:	e72c      	b.n	800ac44 <_svfiprintf_r+0x2c>
 800adea:	ab03      	add	r3, sp, #12
 800adec:	9300      	str	r3, [sp, #0]
 800adee:	462a      	mov	r2, r5
 800adf0:	4b05      	ldr	r3, [pc, #20]	@ (800ae08 <_svfiprintf_r+0x1f0>)
 800adf2:	a904      	add	r1, sp, #16
 800adf4:	4638      	mov	r0, r7
 800adf6:	f7fe f9a7 	bl	8009148 <_printf_i>
 800adfa:	e7ed      	b.n	800add8 <_svfiprintf_r+0x1c0>
 800adfc:	0800be0a 	.word	0x0800be0a
 800ae00:	0800be14 	.word	0x0800be14
 800ae04:	08008c19 	.word	0x08008c19
 800ae08:	0800ab61 	.word	0x0800ab61
 800ae0c:	0800be10 	.word	0x0800be10

0800ae10 <__sflush_r>:
 800ae10:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ae14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ae18:	0716      	lsls	r6, r2, #28
 800ae1a:	4605      	mov	r5, r0
 800ae1c:	460c      	mov	r4, r1
 800ae1e:	d454      	bmi.n	800aeca <__sflush_r+0xba>
 800ae20:	684b      	ldr	r3, [r1, #4]
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	dc02      	bgt.n	800ae2c <__sflush_r+0x1c>
 800ae26:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ae28:	2b00      	cmp	r3, #0
 800ae2a:	dd48      	ble.n	800aebe <__sflush_r+0xae>
 800ae2c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae2e:	2e00      	cmp	r6, #0
 800ae30:	d045      	beq.n	800aebe <__sflush_r+0xae>
 800ae32:	2300      	movs	r3, #0
 800ae34:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800ae38:	682f      	ldr	r7, [r5, #0]
 800ae3a:	6a21      	ldr	r1, [r4, #32]
 800ae3c:	602b      	str	r3, [r5, #0]
 800ae3e:	d030      	beq.n	800aea2 <__sflush_r+0x92>
 800ae40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800ae42:	89a3      	ldrh	r3, [r4, #12]
 800ae44:	0759      	lsls	r1, r3, #29
 800ae46:	d505      	bpl.n	800ae54 <__sflush_r+0x44>
 800ae48:	6863      	ldr	r3, [r4, #4]
 800ae4a:	1ad2      	subs	r2, r2, r3
 800ae4c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800ae4e:	b10b      	cbz	r3, 800ae54 <__sflush_r+0x44>
 800ae50:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800ae52:	1ad2      	subs	r2, r2, r3
 800ae54:	2300      	movs	r3, #0
 800ae56:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ae58:	6a21      	ldr	r1, [r4, #32]
 800ae5a:	4628      	mov	r0, r5
 800ae5c:	47b0      	blx	r6
 800ae5e:	1c43      	adds	r3, r0, #1
 800ae60:	89a3      	ldrh	r3, [r4, #12]
 800ae62:	d106      	bne.n	800ae72 <__sflush_r+0x62>
 800ae64:	6829      	ldr	r1, [r5, #0]
 800ae66:	291d      	cmp	r1, #29
 800ae68:	d82b      	bhi.n	800aec2 <__sflush_r+0xb2>
 800ae6a:	4a2a      	ldr	r2, [pc, #168]	@ (800af14 <__sflush_r+0x104>)
 800ae6c:	40ca      	lsrs	r2, r1
 800ae6e:	07d6      	lsls	r6, r2, #31
 800ae70:	d527      	bpl.n	800aec2 <__sflush_r+0xb2>
 800ae72:	2200      	movs	r2, #0
 800ae74:	6062      	str	r2, [r4, #4]
 800ae76:	04d9      	lsls	r1, r3, #19
 800ae78:	6922      	ldr	r2, [r4, #16]
 800ae7a:	6022      	str	r2, [r4, #0]
 800ae7c:	d504      	bpl.n	800ae88 <__sflush_r+0x78>
 800ae7e:	1c42      	adds	r2, r0, #1
 800ae80:	d101      	bne.n	800ae86 <__sflush_r+0x76>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b903      	cbnz	r3, 800ae88 <__sflush_r+0x78>
 800ae86:	6560      	str	r0, [r4, #84]	@ 0x54
 800ae88:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae8a:	602f      	str	r7, [r5, #0]
 800ae8c:	b1b9      	cbz	r1, 800aebe <__sflush_r+0xae>
 800ae8e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae92:	4299      	cmp	r1, r3
 800ae94:	d002      	beq.n	800ae9c <__sflush_r+0x8c>
 800ae96:	4628      	mov	r0, r5
 800ae98:	f7ff fa9e 	bl	800a3d8 <_free_r>
 800ae9c:	2300      	movs	r3, #0
 800ae9e:	6363      	str	r3, [r4, #52]	@ 0x34
 800aea0:	e00d      	b.n	800aebe <__sflush_r+0xae>
 800aea2:	2301      	movs	r3, #1
 800aea4:	4628      	mov	r0, r5
 800aea6:	47b0      	blx	r6
 800aea8:	4602      	mov	r2, r0
 800aeaa:	1c50      	adds	r0, r2, #1
 800aeac:	d1c9      	bne.n	800ae42 <__sflush_r+0x32>
 800aeae:	682b      	ldr	r3, [r5, #0]
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d0c6      	beq.n	800ae42 <__sflush_r+0x32>
 800aeb4:	2b1d      	cmp	r3, #29
 800aeb6:	d001      	beq.n	800aebc <__sflush_r+0xac>
 800aeb8:	2b16      	cmp	r3, #22
 800aeba:	d11e      	bne.n	800aefa <__sflush_r+0xea>
 800aebc:	602f      	str	r7, [r5, #0]
 800aebe:	2000      	movs	r0, #0
 800aec0:	e022      	b.n	800af08 <__sflush_r+0xf8>
 800aec2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aec6:	b21b      	sxth	r3, r3
 800aec8:	e01b      	b.n	800af02 <__sflush_r+0xf2>
 800aeca:	690f      	ldr	r7, [r1, #16]
 800aecc:	2f00      	cmp	r7, #0
 800aece:	d0f6      	beq.n	800aebe <__sflush_r+0xae>
 800aed0:	0793      	lsls	r3, r2, #30
 800aed2:	680e      	ldr	r6, [r1, #0]
 800aed4:	bf08      	it	eq
 800aed6:	694b      	ldreq	r3, [r1, #20]
 800aed8:	600f      	str	r7, [r1, #0]
 800aeda:	bf18      	it	ne
 800aedc:	2300      	movne	r3, #0
 800aede:	eba6 0807 	sub.w	r8, r6, r7
 800aee2:	608b      	str	r3, [r1, #8]
 800aee4:	f1b8 0f00 	cmp.w	r8, #0
 800aee8:	dde9      	ble.n	800aebe <__sflush_r+0xae>
 800aeea:	6a21      	ldr	r1, [r4, #32]
 800aeec:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aeee:	4643      	mov	r3, r8
 800aef0:	463a      	mov	r2, r7
 800aef2:	4628      	mov	r0, r5
 800aef4:	47b0      	blx	r6
 800aef6:	2800      	cmp	r0, #0
 800aef8:	dc08      	bgt.n	800af0c <__sflush_r+0xfc>
 800aefa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aefe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800af02:	81a3      	strh	r3, [r4, #12]
 800af04:	f04f 30ff 	mov.w	r0, #4294967295
 800af08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800af0c:	4407      	add	r7, r0
 800af0e:	eba8 0800 	sub.w	r8, r8, r0
 800af12:	e7e7      	b.n	800aee4 <__sflush_r+0xd4>
 800af14:	20400001 	.word	0x20400001

0800af18 <_fflush_r>:
 800af18:	b538      	push	{r3, r4, r5, lr}
 800af1a:	690b      	ldr	r3, [r1, #16]
 800af1c:	4605      	mov	r5, r0
 800af1e:	460c      	mov	r4, r1
 800af20:	b913      	cbnz	r3, 800af28 <_fflush_r+0x10>
 800af22:	2500      	movs	r5, #0
 800af24:	4628      	mov	r0, r5
 800af26:	bd38      	pop	{r3, r4, r5, pc}
 800af28:	b118      	cbz	r0, 800af32 <_fflush_r+0x1a>
 800af2a:	6a03      	ldr	r3, [r0, #32]
 800af2c:	b90b      	cbnz	r3, 800af32 <_fflush_r+0x1a>
 800af2e:	f7fe fab5 	bl	800949c <__sinit>
 800af32:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800af36:	2b00      	cmp	r3, #0
 800af38:	d0f3      	beq.n	800af22 <_fflush_r+0xa>
 800af3a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800af3c:	07d0      	lsls	r0, r2, #31
 800af3e:	d404      	bmi.n	800af4a <_fflush_r+0x32>
 800af40:	0599      	lsls	r1, r3, #22
 800af42:	d402      	bmi.n	800af4a <_fflush_r+0x32>
 800af44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af46:	f7fe fbe2 	bl	800970e <__retarget_lock_acquire_recursive>
 800af4a:	4628      	mov	r0, r5
 800af4c:	4621      	mov	r1, r4
 800af4e:	f7ff ff5f 	bl	800ae10 <__sflush_r>
 800af52:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af54:	07da      	lsls	r2, r3, #31
 800af56:	4605      	mov	r5, r0
 800af58:	d4e4      	bmi.n	800af24 <_fflush_r+0xc>
 800af5a:	89a3      	ldrh	r3, [r4, #12]
 800af5c:	059b      	lsls	r3, r3, #22
 800af5e:	d4e1      	bmi.n	800af24 <_fflush_r+0xc>
 800af60:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af62:	f7fe fbd5 	bl	8009710 <__retarget_lock_release_recursive>
 800af66:	e7dd      	b.n	800af24 <_fflush_r+0xc>

0800af68 <memmove>:
 800af68:	4288      	cmp	r0, r1
 800af6a:	b510      	push	{r4, lr}
 800af6c:	eb01 0402 	add.w	r4, r1, r2
 800af70:	d902      	bls.n	800af78 <memmove+0x10>
 800af72:	4284      	cmp	r4, r0
 800af74:	4623      	mov	r3, r4
 800af76:	d807      	bhi.n	800af88 <memmove+0x20>
 800af78:	1e43      	subs	r3, r0, #1
 800af7a:	42a1      	cmp	r1, r4
 800af7c:	d008      	beq.n	800af90 <memmove+0x28>
 800af7e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800af82:	f803 2f01 	strb.w	r2, [r3, #1]!
 800af86:	e7f8      	b.n	800af7a <memmove+0x12>
 800af88:	4402      	add	r2, r0
 800af8a:	4601      	mov	r1, r0
 800af8c:	428a      	cmp	r2, r1
 800af8e:	d100      	bne.n	800af92 <memmove+0x2a>
 800af90:	bd10      	pop	{r4, pc}
 800af92:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800af96:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800af9a:	e7f7      	b.n	800af8c <memmove+0x24>

0800af9c <memcpy>:
 800af9c:	440a      	add	r2, r1
 800af9e:	4291      	cmp	r1, r2
 800afa0:	f100 33ff 	add.w	r3, r0, #4294967295
 800afa4:	d100      	bne.n	800afa8 <memcpy+0xc>
 800afa6:	4770      	bx	lr
 800afa8:	b510      	push	{r4, lr}
 800afaa:	f811 4b01 	ldrb.w	r4, [r1], #1
 800afae:	f803 4f01 	strb.w	r4, [r3, #1]!
 800afb2:	4291      	cmp	r1, r2
 800afb4:	d1f9      	bne.n	800afaa <memcpy+0xe>
 800afb6:	bd10      	pop	{r4, pc}

0800afb8 <__assert_func>:
 800afb8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800afba:	4614      	mov	r4, r2
 800afbc:	461a      	mov	r2, r3
 800afbe:	4b09      	ldr	r3, [pc, #36]	@ (800afe4 <__assert_func+0x2c>)
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	4605      	mov	r5, r0
 800afc4:	68d8      	ldr	r0, [r3, #12]
 800afc6:	b14c      	cbz	r4, 800afdc <__assert_func+0x24>
 800afc8:	4b07      	ldr	r3, [pc, #28]	@ (800afe8 <__assert_func+0x30>)
 800afca:	9100      	str	r1, [sp, #0]
 800afcc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800afd0:	4906      	ldr	r1, [pc, #24]	@ (800afec <__assert_func+0x34>)
 800afd2:	462b      	mov	r3, r5
 800afd4:	f000 f85c 	bl	800b090 <fiprintf>
 800afd8:	f000 f86c 	bl	800b0b4 <abort>
 800afdc:	4b04      	ldr	r3, [pc, #16]	@ (800aff0 <__assert_func+0x38>)
 800afde:	461c      	mov	r4, r3
 800afe0:	e7f3      	b.n	800afca <__assert_func+0x12>
 800afe2:	bf00      	nop
 800afe4:	20000034 	.word	0x20000034
 800afe8:	0800be25 	.word	0x0800be25
 800afec:	0800be32 	.word	0x0800be32
 800aff0:	0800be60 	.word	0x0800be60

0800aff4 <__ascii_mbtowc>:
 800aff4:	b082      	sub	sp, #8
 800aff6:	b901      	cbnz	r1, 800affa <__ascii_mbtowc+0x6>
 800aff8:	a901      	add	r1, sp, #4
 800affa:	b142      	cbz	r2, 800b00e <__ascii_mbtowc+0x1a>
 800affc:	b14b      	cbz	r3, 800b012 <__ascii_mbtowc+0x1e>
 800affe:	7813      	ldrb	r3, [r2, #0]
 800b000:	600b      	str	r3, [r1, #0]
 800b002:	7812      	ldrb	r2, [r2, #0]
 800b004:	1e10      	subs	r0, r2, #0
 800b006:	bf18      	it	ne
 800b008:	2001      	movne	r0, #1
 800b00a:	b002      	add	sp, #8
 800b00c:	4770      	bx	lr
 800b00e:	4610      	mov	r0, r2
 800b010:	e7fb      	b.n	800b00a <__ascii_mbtowc+0x16>
 800b012:	f06f 0001 	mvn.w	r0, #1
 800b016:	e7f8      	b.n	800b00a <__ascii_mbtowc+0x16>

0800b018 <_realloc_r>:
 800b018:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b01c:	4607      	mov	r7, r0
 800b01e:	4614      	mov	r4, r2
 800b020:	460d      	mov	r5, r1
 800b022:	b921      	cbnz	r1, 800b02e <_realloc_r+0x16>
 800b024:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b028:	4611      	mov	r1, r2
 800b02a:	f7fd bcc9 	b.w	80089c0 <_malloc_r>
 800b02e:	b92a      	cbnz	r2, 800b03c <_realloc_r+0x24>
 800b030:	f7ff f9d2 	bl	800a3d8 <_free_r>
 800b034:	4625      	mov	r5, r4
 800b036:	4628      	mov	r0, r5
 800b038:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b03c:	f000 f841 	bl	800b0c2 <_malloc_usable_size_r>
 800b040:	4284      	cmp	r4, r0
 800b042:	4606      	mov	r6, r0
 800b044:	d802      	bhi.n	800b04c <_realloc_r+0x34>
 800b046:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b04a:	d8f4      	bhi.n	800b036 <_realloc_r+0x1e>
 800b04c:	4621      	mov	r1, r4
 800b04e:	4638      	mov	r0, r7
 800b050:	f7fd fcb6 	bl	80089c0 <_malloc_r>
 800b054:	4680      	mov	r8, r0
 800b056:	b908      	cbnz	r0, 800b05c <_realloc_r+0x44>
 800b058:	4645      	mov	r5, r8
 800b05a:	e7ec      	b.n	800b036 <_realloc_r+0x1e>
 800b05c:	42b4      	cmp	r4, r6
 800b05e:	4622      	mov	r2, r4
 800b060:	4629      	mov	r1, r5
 800b062:	bf28      	it	cs
 800b064:	4632      	movcs	r2, r6
 800b066:	f7ff ff99 	bl	800af9c <memcpy>
 800b06a:	4629      	mov	r1, r5
 800b06c:	4638      	mov	r0, r7
 800b06e:	f7ff f9b3 	bl	800a3d8 <_free_r>
 800b072:	e7f1      	b.n	800b058 <_realloc_r+0x40>

0800b074 <__ascii_wctomb>:
 800b074:	4603      	mov	r3, r0
 800b076:	4608      	mov	r0, r1
 800b078:	b141      	cbz	r1, 800b08c <__ascii_wctomb+0x18>
 800b07a:	2aff      	cmp	r2, #255	@ 0xff
 800b07c:	d904      	bls.n	800b088 <__ascii_wctomb+0x14>
 800b07e:	228a      	movs	r2, #138	@ 0x8a
 800b080:	601a      	str	r2, [r3, #0]
 800b082:	f04f 30ff 	mov.w	r0, #4294967295
 800b086:	4770      	bx	lr
 800b088:	700a      	strb	r2, [r1, #0]
 800b08a:	2001      	movs	r0, #1
 800b08c:	4770      	bx	lr
	...

0800b090 <fiprintf>:
 800b090:	b40e      	push	{r1, r2, r3}
 800b092:	b503      	push	{r0, r1, lr}
 800b094:	4601      	mov	r1, r0
 800b096:	ab03      	add	r3, sp, #12
 800b098:	4805      	ldr	r0, [pc, #20]	@ (800b0b0 <fiprintf+0x20>)
 800b09a:	f853 2b04 	ldr.w	r2, [r3], #4
 800b09e:	6800      	ldr	r0, [r0, #0]
 800b0a0:	9301      	str	r3, [sp, #4]
 800b0a2:	f000 f83f 	bl	800b124 <_vfiprintf_r>
 800b0a6:	b002      	add	sp, #8
 800b0a8:	f85d eb04 	ldr.w	lr, [sp], #4
 800b0ac:	b003      	add	sp, #12
 800b0ae:	4770      	bx	lr
 800b0b0:	20000034 	.word	0x20000034

0800b0b4 <abort>:
 800b0b4:	b508      	push	{r3, lr}
 800b0b6:	2006      	movs	r0, #6
 800b0b8:	f000 fa08 	bl	800b4cc <raise>
 800b0bc:	2001      	movs	r0, #1
 800b0be:	f7f8 ff07 	bl	8003ed0 <_exit>

0800b0c2 <_malloc_usable_size_r>:
 800b0c2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b0c6:	1f18      	subs	r0, r3, #4
 800b0c8:	2b00      	cmp	r3, #0
 800b0ca:	bfbc      	itt	lt
 800b0cc:	580b      	ldrlt	r3, [r1, r0]
 800b0ce:	18c0      	addlt	r0, r0, r3
 800b0d0:	4770      	bx	lr

0800b0d2 <__sfputc_r>:
 800b0d2:	6893      	ldr	r3, [r2, #8]
 800b0d4:	3b01      	subs	r3, #1
 800b0d6:	2b00      	cmp	r3, #0
 800b0d8:	b410      	push	{r4}
 800b0da:	6093      	str	r3, [r2, #8]
 800b0dc:	da08      	bge.n	800b0f0 <__sfputc_r+0x1e>
 800b0de:	6994      	ldr	r4, [r2, #24]
 800b0e0:	42a3      	cmp	r3, r4
 800b0e2:	db01      	blt.n	800b0e8 <__sfputc_r+0x16>
 800b0e4:	290a      	cmp	r1, #10
 800b0e6:	d103      	bne.n	800b0f0 <__sfputc_r+0x1e>
 800b0e8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0ec:	f000 b932 	b.w	800b354 <__swbuf_r>
 800b0f0:	6813      	ldr	r3, [r2, #0]
 800b0f2:	1c58      	adds	r0, r3, #1
 800b0f4:	6010      	str	r0, [r2, #0]
 800b0f6:	7019      	strb	r1, [r3, #0]
 800b0f8:	4608      	mov	r0, r1
 800b0fa:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b0fe:	4770      	bx	lr

0800b100 <__sfputs_r>:
 800b100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b102:	4606      	mov	r6, r0
 800b104:	460f      	mov	r7, r1
 800b106:	4614      	mov	r4, r2
 800b108:	18d5      	adds	r5, r2, r3
 800b10a:	42ac      	cmp	r4, r5
 800b10c:	d101      	bne.n	800b112 <__sfputs_r+0x12>
 800b10e:	2000      	movs	r0, #0
 800b110:	e007      	b.n	800b122 <__sfputs_r+0x22>
 800b112:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b116:	463a      	mov	r2, r7
 800b118:	4630      	mov	r0, r6
 800b11a:	f7ff ffda 	bl	800b0d2 <__sfputc_r>
 800b11e:	1c43      	adds	r3, r0, #1
 800b120:	d1f3      	bne.n	800b10a <__sfputs_r+0xa>
 800b122:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b124 <_vfiprintf_r>:
 800b124:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b128:	460d      	mov	r5, r1
 800b12a:	b09d      	sub	sp, #116	@ 0x74
 800b12c:	4614      	mov	r4, r2
 800b12e:	4698      	mov	r8, r3
 800b130:	4606      	mov	r6, r0
 800b132:	b118      	cbz	r0, 800b13c <_vfiprintf_r+0x18>
 800b134:	6a03      	ldr	r3, [r0, #32]
 800b136:	b90b      	cbnz	r3, 800b13c <_vfiprintf_r+0x18>
 800b138:	f7fe f9b0 	bl	800949c <__sinit>
 800b13c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b13e:	07d9      	lsls	r1, r3, #31
 800b140:	d405      	bmi.n	800b14e <_vfiprintf_r+0x2a>
 800b142:	89ab      	ldrh	r3, [r5, #12]
 800b144:	059a      	lsls	r2, r3, #22
 800b146:	d402      	bmi.n	800b14e <_vfiprintf_r+0x2a>
 800b148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b14a:	f7fe fae0 	bl	800970e <__retarget_lock_acquire_recursive>
 800b14e:	89ab      	ldrh	r3, [r5, #12]
 800b150:	071b      	lsls	r3, r3, #28
 800b152:	d501      	bpl.n	800b158 <_vfiprintf_r+0x34>
 800b154:	692b      	ldr	r3, [r5, #16]
 800b156:	b99b      	cbnz	r3, 800b180 <_vfiprintf_r+0x5c>
 800b158:	4629      	mov	r1, r5
 800b15a:	4630      	mov	r0, r6
 800b15c:	f000 f938 	bl	800b3d0 <__swsetup_r>
 800b160:	b170      	cbz	r0, 800b180 <_vfiprintf_r+0x5c>
 800b162:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b164:	07dc      	lsls	r4, r3, #31
 800b166:	d504      	bpl.n	800b172 <_vfiprintf_r+0x4e>
 800b168:	f04f 30ff 	mov.w	r0, #4294967295
 800b16c:	b01d      	add	sp, #116	@ 0x74
 800b16e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b172:	89ab      	ldrh	r3, [r5, #12]
 800b174:	0598      	lsls	r0, r3, #22
 800b176:	d4f7      	bmi.n	800b168 <_vfiprintf_r+0x44>
 800b178:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b17a:	f7fe fac9 	bl	8009710 <__retarget_lock_release_recursive>
 800b17e:	e7f3      	b.n	800b168 <_vfiprintf_r+0x44>
 800b180:	2300      	movs	r3, #0
 800b182:	9309      	str	r3, [sp, #36]	@ 0x24
 800b184:	2320      	movs	r3, #32
 800b186:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b18a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b18e:	2330      	movs	r3, #48	@ 0x30
 800b190:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b340 <_vfiprintf_r+0x21c>
 800b194:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b198:	f04f 0901 	mov.w	r9, #1
 800b19c:	4623      	mov	r3, r4
 800b19e:	469a      	mov	sl, r3
 800b1a0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a4:	b10a      	cbz	r2, 800b1aa <_vfiprintf_r+0x86>
 800b1a6:	2a25      	cmp	r2, #37	@ 0x25
 800b1a8:	d1f9      	bne.n	800b19e <_vfiprintf_r+0x7a>
 800b1aa:	ebba 0b04 	subs.w	fp, sl, r4
 800b1ae:	d00b      	beq.n	800b1c8 <_vfiprintf_r+0xa4>
 800b1b0:	465b      	mov	r3, fp
 800b1b2:	4622      	mov	r2, r4
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4630      	mov	r0, r6
 800b1b8:	f7ff ffa2 	bl	800b100 <__sfputs_r>
 800b1bc:	3001      	adds	r0, #1
 800b1be:	f000 80a7 	beq.w	800b310 <_vfiprintf_r+0x1ec>
 800b1c2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b1c4:	445a      	add	r2, fp
 800b1c6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b1c8:	f89a 3000 	ldrb.w	r3, [sl]
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	f000 809f 	beq.w	800b310 <_vfiprintf_r+0x1ec>
 800b1d2:	2300      	movs	r3, #0
 800b1d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b1d8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b1dc:	f10a 0a01 	add.w	sl, sl, #1
 800b1e0:	9304      	str	r3, [sp, #16]
 800b1e2:	9307      	str	r3, [sp, #28]
 800b1e4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b1e8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b1ea:	4654      	mov	r4, sl
 800b1ec:	2205      	movs	r2, #5
 800b1ee:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b1f2:	4853      	ldr	r0, [pc, #332]	@ (800b340 <_vfiprintf_r+0x21c>)
 800b1f4:	f7f4 ffec 	bl	80001d0 <memchr>
 800b1f8:	9a04      	ldr	r2, [sp, #16]
 800b1fa:	b9d8      	cbnz	r0, 800b234 <_vfiprintf_r+0x110>
 800b1fc:	06d1      	lsls	r1, r2, #27
 800b1fe:	bf44      	itt	mi
 800b200:	2320      	movmi	r3, #32
 800b202:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b206:	0713      	lsls	r3, r2, #28
 800b208:	bf44      	itt	mi
 800b20a:	232b      	movmi	r3, #43	@ 0x2b
 800b20c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b210:	f89a 3000 	ldrb.w	r3, [sl]
 800b214:	2b2a      	cmp	r3, #42	@ 0x2a
 800b216:	d015      	beq.n	800b244 <_vfiprintf_r+0x120>
 800b218:	9a07      	ldr	r2, [sp, #28]
 800b21a:	4654      	mov	r4, sl
 800b21c:	2000      	movs	r0, #0
 800b21e:	f04f 0c0a 	mov.w	ip, #10
 800b222:	4621      	mov	r1, r4
 800b224:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b228:	3b30      	subs	r3, #48	@ 0x30
 800b22a:	2b09      	cmp	r3, #9
 800b22c:	d94b      	bls.n	800b2c6 <_vfiprintf_r+0x1a2>
 800b22e:	b1b0      	cbz	r0, 800b25e <_vfiprintf_r+0x13a>
 800b230:	9207      	str	r2, [sp, #28]
 800b232:	e014      	b.n	800b25e <_vfiprintf_r+0x13a>
 800b234:	eba0 0308 	sub.w	r3, r0, r8
 800b238:	fa09 f303 	lsl.w	r3, r9, r3
 800b23c:	4313      	orrs	r3, r2
 800b23e:	9304      	str	r3, [sp, #16]
 800b240:	46a2      	mov	sl, r4
 800b242:	e7d2      	b.n	800b1ea <_vfiprintf_r+0xc6>
 800b244:	9b03      	ldr	r3, [sp, #12]
 800b246:	1d19      	adds	r1, r3, #4
 800b248:	681b      	ldr	r3, [r3, #0]
 800b24a:	9103      	str	r1, [sp, #12]
 800b24c:	2b00      	cmp	r3, #0
 800b24e:	bfbb      	ittet	lt
 800b250:	425b      	neglt	r3, r3
 800b252:	f042 0202 	orrlt.w	r2, r2, #2
 800b256:	9307      	strge	r3, [sp, #28]
 800b258:	9307      	strlt	r3, [sp, #28]
 800b25a:	bfb8      	it	lt
 800b25c:	9204      	strlt	r2, [sp, #16]
 800b25e:	7823      	ldrb	r3, [r4, #0]
 800b260:	2b2e      	cmp	r3, #46	@ 0x2e
 800b262:	d10a      	bne.n	800b27a <_vfiprintf_r+0x156>
 800b264:	7863      	ldrb	r3, [r4, #1]
 800b266:	2b2a      	cmp	r3, #42	@ 0x2a
 800b268:	d132      	bne.n	800b2d0 <_vfiprintf_r+0x1ac>
 800b26a:	9b03      	ldr	r3, [sp, #12]
 800b26c:	1d1a      	adds	r2, r3, #4
 800b26e:	681b      	ldr	r3, [r3, #0]
 800b270:	9203      	str	r2, [sp, #12]
 800b272:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b276:	3402      	adds	r4, #2
 800b278:	9305      	str	r3, [sp, #20]
 800b27a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b350 <_vfiprintf_r+0x22c>
 800b27e:	7821      	ldrb	r1, [r4, #0]
 800b280:	2203      	movs	r2, #3
 800b282:	4650      	mov	r0, sl
 800b284:	f7f4 ffa4 	bl	80001d0 <memchr>
 800b288:	b138      	cbz	r0, 800b29a <_vfiprintf_r+0x176>
 800b28a:	9b04      	ldr	r3, [sp, #16]
 800b28c:	eba0 000a 	sub.w	r0, r0, sl
 800b290:	2240      	movs	r2, #64	@ 0x40
 800b292:	4082      	lsls	r2, r0
 800b294:	4313      	orrs	r3, r2
 800b296:	3401      	adds	r4, #1
 800b298:	9304      	str	r3, [sp, #16]
 800b29a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b29e:	4829      	ldr	r0, [pc, #164]	@ (800b344 <_vfiprintf_r+0x220>)
 800b2a0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b2a4:	2206      	movs	r2, #6
 800b2a6:	f7f4 ff93 	bl	80001d0 <memchr>
 800b2aa:	2800      	cmp	r0, #0
 800b2ac:	d03f      	beq.n	800b32e <_vfiprintf_r+0x20a>
 800b2ae:	4b26      	ldr	r3, [pc, #152]	@ (800b348 <_vfiprintf_r+0x224>)
 800b2b0:	bb1b      	cbnz	r3, 800b2fa <_vfiprintf_r+0x1d6>
 800b2b2:	9b03      	ldr	r3, [sp, #12]
 800b2b4:	3307      	adds	r3, #7
 800b2b6:	f023 0307 	bic.w	r3, r3, #7
 800b2ba:	3308      	adds	r3, #8
 800b2bc:	9303      	str	r3, [sp, #12]
 800b2be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b2c0:	443b      	add	r3, r7
 800b2c2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b2c4:	e76a      	b.n	800b19c <_vfiprintf_r+0x78>
 800b2c6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b2ca:	460c      	mov	r4, r1
 800b2cc:	2001      	movs	r0, #1
 800b2ce:	e7a8      	b.n	800b222 <_vfiprintf_r+0xfe>
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	3401      	adds	r4, #1
 800b2d4:	9305      	str	r3, [sp, #20]
 800b2d6:	4619      	mov	r1, r3
 800b2d8:	f04f 0c0a 	mov.w	ip, #10
 800b2dc:	4620      	mov	r0, r4
 800b2de:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b2e2:	3a30      	subs	r2, #48	@ 0x30
 800b2e4:	2a09      	cmp	r2, #9
 800b2e6:	d903      	bls.n	800b2f0 <_vfiprintf_r+0x1cc>
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	d0c6      	beq.n	800b27a <_vfiprintf_r+0x156>
 800b2ec:	9105      	str	r1, [sp, #20]
 800b2ee:	e7c4      	b.n	800b27a <_vfiprintf_r+0x156>
 800b2f0:	fb0c 2101 	mla	r1, ip, r1, r2
 800b2f4:	4604      	mov	r4, r0
 800b2f6:	2301      	movs	r3, #1
 800b2f8:	e7f0      	b.n	800b2dc <_vfiprintf_r+0x1b8>
 800b2fa:	ab03      	add	r3, sp, #12
 800b2fc:	9300      	str	r3, [sp, #0]
 800b2fe:	462a      	mov	r2, r5
 800b300:	4b12      	ldr	r3, [pc, #72]	@ (800b34c <_vfiprintf_r+0x228>)
 800b302:	a904      	add	r1, sp, #16
 800b304:	4630      	mov	r0, r6
 800b306:	f7fd fc87 	bl	8008c18 <_printf_float>
 800b30a:	4607      	mov	r7, r0
 800b30c:	1c78      	adds	r0, r7, #1
 800b30e:	d1d6      	bne.n	800b2be <_vfiprintf_r+0x19a>
 800b310:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b312:	07d9      	lsls	r1, r3, #31
 800b314:	d405      	bmi.n	800b322 <_vfiprintf_r+0x1fe>
 800b316:	89ab      	ldrh	r3, [r5, #12]
 800b318:	059a      	lsls	r2, r3, #22
 800b31a:	d402      	bmi.n	800b322 <_vfiprintf_r+0x1fe>
 800b31c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b31e:	f7fe f9f7 	bl	8009710 <__retarget_lock_release_recursive>
 800b322:	89ab      	ldrh	r3, [r5, #12]
 800b324:	065b      	lsls	r3, r3, #25
 800b326:	f53f af1f 	bmi.w	800b168 <_vfiprintf_r+0x44>
 800b32a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b32c:	e71e      	b.n	800b16c <_vfiprintf_r+0x48>
 800b32e:	ab03      	add	r3, sp, #12
 800b330:	9300      	str	r3, [sp, #0]
 800b332:	462a      	mov	r2, r5
 800b334:	4b05      	ldr	r3, [pc, #20]	@ (800b34c <_vfiprintf_r+0x228>)
 800b336:	a904      	add	r1, sp, #16
 800b338:	4630      	mov	r0, r6
 800b33a:	f7fd ff05 	bl	8009148 <_printf_i>
 800b33e:	e7e4      	b.n	800b30a <_vfiprintf_r+0x1e6>
 800b340:	0800be0a 	.word	0x0800be0a
 800b344:	0800be14 	.word	0x0800be14
 800b348:	08008c19 	.word	0x08008c19
 800b34c:	0800b101 	.word	0x0800b101
 800b350:	0800be10 	.word	0x0800be10

0800b354 <__swbuf_r>:
 800b354:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b356:	460e      	mov	r6, r1
 800b358:	4614      	mov	r4, r2
 800b35a:	4605      	mov	r5, r0
 800b35c:	b118      	cbz	r0, 800b366 <__swbuf_r+0x12>
 800b35e:	6a03      	ldr	r3, [r0, #32]
 800b360:	b90b      	cbnz	r3, 800b366 <__swbuf_r+0x12>
 800b362:	f7fe f89b 	bl	800949c <__sinit>
 800b366:	69a3      	ldr	r3, [r4, #24]
 800b368:	60a3      	str	r3, [r4, #8]
 800b36a:	89a3      	ldrh	r3, [r4, #12]
 800b36c:	071a      	lsls	r2, r3, #28
 800b36e:	d501      	bpl.n	800b374 <__swbuf_r+0x20>
 800b370:	6923      	ldr	r3, [r4, #16]
 800b372:	b943      	cbnz	r3, 800b386 <__swbuf_r+0x32>
 800b374:	4621      	mov	r1, r4
 800b376:	4628      	mov	r0, r5
 800b378:	f000 f82a 	bl	800b3d0 <__swsetup_r>
 800b37c:	b118      	cbz	r0, 800b386 <__swbuf_r+0x32>
 800b37e:	f04f 37ff 	mov.w	r7, #4294967295
 800b382:	4638      	mov	r0, r7
 800b384:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b386:	6823      	ldr	r3, [r4, #0]
 800b388:	6922      	ldr	r2, [r4, #16]
 800b38a:	1a98      	subs	r0, r3, r2
 800b38c:	6963      	ldr	r3, [r4, #20]
 800b38e:	b2f6      	uxtb	r6, r6
 800b390:	4283      	cmp	r3, r0
 800b392:	4637      	mov	r7, r6
 800b394:	dc05      	bgt.n	800b3a2 <__swbuf_r+0x4e>
 800b396:	4621      	mov	r1, r4
 800b398:	4628      	mov	r0, r5
 800b39a:	f7ff fdbd 	bl	800af18 <_fflush_r>
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	d1ed      	bne.n	800b37e <__swbuf_r+0x2a>
 800b3a2:	68a3      	ldr	r3, [r4, #8]
 800b3a4:	3b01      	subs	r3, #1
 800b3a6:	60a3      	str	r3, [r4, #8]
 800b3a8:	6823      	ldr	r3, [r4, #0]
 800b3aa:	1c5a      	adds	r2, r3, #1
 800b3ac:	6022      	str	r2, [r4, #0]
 800b3ae:	701e      	strb	r6, [r3, #0]
 800b3b0:	6962      	ldr	r2, [r4, #20]
 800b3b2:	1c43      	adds	r3, r0, #1
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d004      	beq.n	800b3c2 <__swbuf_r+0x6e>
 800b3b8:	89a3      	ldrh	r3, [r4, #12]
 800b3ba:	07db      	lsls	r3, r3, #31
 800b3bc:	d5e1      	bpl.n	800b382 <__swbuf_r+0x2e>
 800b3be:	2e0a      	cmp	r6, #10
 800b3c0:	d1df      	bne.n	800b382 <__swbuf_r+0x2e>
 800b3c2:	4621      	mov	r1, r4
 800b3c4:	4628      	mov	r0, r5
 800b3c6:	f7ff fda7 	bl	800af18 <_fflush_r>
 800b3ca:	2800      	cmp	r0, #0
 800b3cc:	d0d9      	beq.n	800b382 <__swbuf_r+0x2e>
 800b3ce:	e7d6      	b.n	800b37e <__swbuf_r+0x2a>

0800b3d0 <__swsetup_r>:
 800b3d0:	b538      	push	{r3, r4, r5, lr}
 800b3d2:	4b29      	ldr	r3, [pc, #164]	@ (800b478 <__swsetup_r+0xa8>)
 800b3d4:	4605      	mov	r5, r0
 800b3d6:	6818      	ldr	r0, [r3, #0]
 800b3d8:	460c      	mov	r4, r1
 800b3da:	b118      	cbz	r0, 800b3e4 <__swsetup_r+0x14>
 800b3dc:	6a03      	ldr	r3, [r0, #32]
 800b3de:	b90b      	cbnz	r3, 800b3e4 <__swsetup_r+0x14>
 800b3e0:	f7fe f85c 	bl	800949c <__sinit>
 800b3e4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b3e8:	0719      	lsls	r1, r3, #28
 800b3ea:	d422      	bmi.n	800b432 <__swsetup_r+0x62>
 800b3ec:	06da      	lsls	r2, r3, #27
 800b3ee:	d407      	bmi.n	800b400 <__swsetup_r+0x30>
 800b3f0:	2209      	movs	r2, #9
 800b3f2:	602a      	str	r2, [r5, #0]
 800b3f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b3f8:	81a3      	strh	r3, [r4, #12]
 800b3fa:	f04f 30ff 	mov.w	r0, #4294967295
 800b3fe:	e033      	b.n	800b468 <__swsetup_r+0x98>
 800b400:	0758      	lsls	r0, r3, #29
 800b402:	d512      	bpl.n	800b42a <__swsetup_r+0x5a>
 800b404:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b406:	b141      	cbz	r1, 800b41a <__swsetup_r+0x4a>
 800b408:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b40c:	4299      	cmp	r1, r3
 800b40e:	d002      	beq.n	800b416 <__swsetup_r+0x46>
 800b410:	4628      	mov	r0, r5
 800b412:	f7fe ffe1 	bl	800a3d8 <_free_r>
 800b416:	2300      	movs	r3, #0
 800b418:	6363      	str	r3, [r4, #52]	@ 0x34
 800b41a:	89a3      	ldrh	r3, [r4, #12]
 800b41c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b420:	81a3      	strh	r3, [r4, #12]
 800b422:	2300      	movs	r3, #0
 800b424:	6063      	str	r3, [r4, #4]
 800b426:	6923      	ldr	r3, [r4, #16]
 800b428:	6023      	str	r3, [r4, #0]
 800b42a:	89a3      	ldrh	r3, [r4, #12]
 800b42c:	f043 0308 	orr.w	r3, r3, #8
 800b430:	81a3      	strh	r3, [r4, #12]
 800b432:	6923      	ldr	r3, [r4, #16]
 800b434:	b94b      	cbnz	r3, 800b44a <__swsetup_r+0x7a>
 800b436:	89a3      	ldrh	r3, [r4, #12]
 800b438:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b43c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b440:	d003      	beq.n	800b44a <__swsetup_r+0x7a>
 800b442:	4621      	mov	r1, r4
 800b444:	4628      	mov	r0, r5
 800b446:	f000 f883 	bl	800b550 <__smakebuf_r>
 800b44a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b44e:	f013 0201 	ands.w	r2, r3, #1
 800b452:	d00a      	beq.n	800b46a <__swsetup_r+0x9a>
 800b454:	2200      	movs	r2, #0
 800b456:	60a2      	str	r2, [r4, #8]
 800b458:	6962      	ldr	r2, [r4, #20]
 800b45a:	4252      	negs	r2, r2
 800b45c:	61a2      	str	r2, [r4, #24]
 800b45e:	6922      	ldr	r2, [r4, #16]
 800b460:	b942      	cbnz	r2, 800b474 <__swsetup_r+0xa4>
 800b462:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b466:	d1c5      	bne.n	800b3f4 <__swsetup_r+0x24>
 800b468:	bd38      	pop	{r3, r4, r5, pc}
 800b46a:	0799      	lsls	r1, r3, #30
 800b46c:	bf58      	it	pl
 800b46e:	6962      	ldrpl	r2, [r4, #20]
 800b470:	60a2      	str	r2, [r4, #8]
 800b472:	e7f4      	b.n	800b45e <__swsetup_r+0x8e>
 800b474:	2000      	movs	r0, #0
 800b476:	e7f7      	b.n	800b468 <__swsetup_r+0x98>
 800b478:	20000034 	.word	0x20000034

0800b47c <_raise_r>:
 800b47c:	291f      	cmp	r1, #31
 800b47e:	b538      	push	{r3, r4, r5, lr}
 800b480:	4605      	mov	r5, r0
 800b482:	460c      	mov	r4, r1
 800b484:	d904      	bls.n	800b490 <_raise_r+0x14>
 800b486:	2316      	movs	r3, #22
 800b488:	6003      	str	r3, [r0, #0]
 800b48a:	f04f 30ff 	mov.w	r0, #4294967295
 800b48e:	bd38      	pop	{r3, r4, r5, pc}
 800b490:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b492:	b112      	cbz	r2, 800b49a <_raise_r+0x1e>
 800b494:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b498:	b94b      	cbnz	r3, 800b4ae <_raise_r+0x32>
 800b49a:	4628      	mov	r0, r5
 800b49c:	f000 f830 	bl	800b500 <_getpid_r>
 800b4a0:	4622      	mov	r2, r4
 800b4a2:	4601      	mov	r1, r0
 800b4a4:	4628      	mov	r0, r5
 800b4a6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b4aa:	f000 b817 	b.w	800b4dc <_kill_r>
 800b4ae:	2b01      	cmp	r3, #1
 800b4b0:	d00a      	beq.n	800b4c8 <_raise_r+0x4c>
 800b4b2:	1c59      	adds	r1, r3, #1
 800b4b4:	d103      	bne.n	800b4be <_raise_r+0x42>
 800b4b6:	2316      	movs	r3, #22
 800b4b8:	6003      	str	r3, [r0, #0]
 800b4ba:	2001      	movs	r0, #1
 800b4bc:	e7e7      	b.n	800b48e <_raise_r+0x12>
 800b4be:	2100      	movs	r1, #0
 800b4c0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b4c4:	4620      	mov	r0, r4
 800b4c6:	4798      	blx	r3
 800b4c8:	2000      	movs	r0, #0
 800b4ca:	e7e0      	b.n	800b48e <_raise_r+0x12>

0800b4cc <raise>:
 800b4cc:	4b02      	ldr	r3, [pc, #8]	@ (800b4d8 <raise+0xc>)
 800b4ce:	4601      	mov	r1, r0
 800b4d0:	6818      	ldr	r0, [r3, #0]
 800b4d2:	f7ff bfd3 	b.w	800b47c <_raise_r>
 800b4d6:	bf00      	nop
 800b4d8:	20000034 	.word	0x20000034

0800b4dc <_kill_r>:
 800b4dc:	b538      	push	{r3, r4, r5, lr}
 800b4de:	4d07      	ldr	r5, [pc, #28]	@ (800b4fc <_kill_r+0x20>)
 800b4e0:	2300      	movs	r3, #0
 800b4e2:	4604      	mov	r4, r0
 800b4e4:	4608      	mov	r0, r1
 800b4e6:	4611      	mov	r1, r2
 800b4e8:	602b      	str	r3, [r5, #0]
 800b4ea:	f7f8 fce1 	bl	8003eb0 <_kill>
 800b4ee:	1c43      	adds	r3, r0, #1
 800b4f0:	d102      	bne.n	800b4f8 <_kill_r+0x1c>
 800b4f2:	682b      	ldr	r3, [r5, #0]
 800b4f4:	b103      	cbz	r3, 800b4f8 <_kill_r+0x1c>
 800b4f6:	6023      	str	r3, [r4, #0]
 800b4f8:	bd38      	pop	{r3, r4, r5, pc}
 800b4fa:	bf00      	nop
 800b4fc:	2000062c 	.word	0x2000062c

0800b500 <_getpid_r>:
 800b500:	f7f8 bcce 	b.w	8003ea0 <_getpid>

0800b504 <__swhatbuf_r>:
 800b504:	b570      	push	{r4, r5, r6, lr}
 800b506:	460c      	mov	r4, r1
 800b508:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b50c:	2900      	cmp	r1, #0
 800b50e:	b096      	sub	sp, #88	@ 0x58
 800b510:	4615      	mov	r5, r2
 800b512:	461e      	mov	r6, r3
 800b514:	da0d      	bge.n	800b532 <__swhatbuf_r+0x2e>
 800b516:	89a3      	ldrh	r3, [r4, #12]
 800b518:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800b51c:	f04f 0100 	mov.w	r1, #0
 800b520:	bf14      	ite	ne
 800b522:	2340      	movne	r3, #64	@ 0x40
 800b524:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800b528:	2000      	movs	r0, #0
 800b52a:	6031      	str	r1, [r6, #0]
 800b52c:	602b      	str	r3, [r5, #0]
 800b52e:	b016      	add	sp, #88	@ 0x58
 800b530:	bd70      	pop	{r4, r5, r6, pc}
 800b532:	466a      	mov	r2, sp
 800b534:	f000 f848 	bl	800b5c8 <_fstat_r>
 800b538:	2800      	cmp	r0, #0
 800b53a:	dbec      	blt.n	800b516 <__swhatbuf_r+0x12>
 800b53c:	9901      	ldr	r1, [sp, #4]
 800b53e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800b542:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800b546:	4259      	negs	r1, r3
 800b548:	4159      	adcs	r1, r3
 800b54a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800b54e:	e7eb      	b.n	800b528 <__swhatbuf_r+0x24>

0800b550 <__smakebuf_r>:
 800b550:	898b      	ldrh	r3, [r1, #12]
 800b552:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800b554:	079d      	lsls	r5, r3, #30
 800b556:	4606      	mov	r6, r0
 800b558:	460c      	mov	r4, r1
 800b55a:	d507      	bpl.n	800b56c <__smakebuf_r+0x1c>
 800b55c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800b560:	6023      	str	r3, [r4, #0]
 800b562:	6123      	str	r3, [r4, #16]
 800b564:	2301      	movs	r3, #1
 800b566:	6163      	str	r3, [r4, #20]
 800b568:	b003      	add	sp, #12
 800b56a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b56c:	ab01      	add	r3, sp, #4
 800b56e:	466a      	mov	r2, sp
 800b570:	f7ff ffc8 	bl	800b504 <__swhatbuf_r>
 800b574:	9f00      	ldr	r7, [sp, #0]
 800b576:	4605      	mov	r5, r0
 800b578:	4639      	mov	r1, r7
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7fd fa20 	bl	80089c0 <_malloc_r>
 800b580:	b948      	cbnz	r0, 800b596 <__smakebuf_r+0x46>
 800b582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b586:	059a      	lsls	r2, r3, #22
 800b588:	d4ee      	bmi.n	800b568 <__smakebuf_r+0x18>
 800b58a:	f023 0303 	bic.w	r3, r3, #3
 800b58e:	f043 0302 	orr.w	r3, r3, #2
 800b592:	81a3      	strh	r3, [r4, #12]
 800b594:	e7e2      	b.n	800b55c <__smakebuf_r+0xc>
 800b596:	89a3      	ldrh	r3, [r4, #12]
 800b598:	6020      	str	r0, [r4, #0]
 800b59a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b59e:	81a3      	strh	r3, [r4, #12]
 800b5a0:	9b01      	ldr	r3, [sp, #4]
 800b5a2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b5a6:	b15b      	cbz	r3, 800b5c0 <__smakebuf_r+0x70>
 800b5a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b5ac:	4630      	mov	r0, r6
 800b5ae:	f000 f81d 	bl	800b5ec <_isatty_r>
 800b5b2:	b128      	cbz	r0, 800b5c0 <__smakebuf_r+0x70>
 800b5b4:	89a3      	ldrh	r3, [r4, #12]
 800b5b6:	f023 0303 	bic.w	r3, r3, #3
 800b5ba:	f043 0301 	orr.w	r3, r3, #1
 800b5be:	81a3      	strh	r3, [r4, #12]
 800b5c0:	89a3      	ldrh	r3, [r4, #12]
 800b5c2:	431d      	orrs	r5, r3
 800b5c4:	81a5      	strh	r5, [r4, #12]
 800b5c6:	e7cf      	b.n	800b568 <__smakebuf_r+0x18>

0800b5c8 <_fstat_r>:
 800b5c8:	b538      	push	{r3, r4, r5, lr}
 800b5ca:	4d07      	ldr	r5, [pc, #28]	@ (800b5e8 <_fstat_r+0x20>)
 800b5cc:	2300      	movs	r3, #0
 800b5ce:	4604      	mov	r4, r0
 800b5d0:	4608      	mov	r0, r1
 800b5d2:	4611      	mov	r1, r2
 800b5d4:	602b      	str	r3, [r5, #0]
 800b5d6:	f7f8 fccb 	bl	8003f70 <_fstat>
 800b5da:	1c43      	adds	r3, r0, #1
 800b5dc:	d102      	bne.n	800b5e4 <_fstat_r+0x1c>
 800b5de:	682b      	ldr	r3, [r5, #0]
 800b5e0:	b103      	cbz	r3, 800b5e4 <_fstat_r+0x1c>
 800b5e2:	6023      	str	r3, [r4, #0]
 800b5e4:	bd38      	pop	{r3, r4, r5, pc}
 800b5e6:	bf00      	nop
 800b5e8:	2000062c 	.word	0x2000062c

0800b5ec <_isatty_r>:
 800b5ec:	b538      	push	{r3, r4, r5, lr}
 800b5ee:	4d06      	ldr	r5, [pc, #24]	@ (800b608 <_isatty_r+0x1c>)
 800b5f0:	2300      	movs	r3, #0
 800b5f2:	4604      	mov	r4, r0
 800b5f4:	4608      	mov	r0, r1
 800b5f6:	602b      	str	r3, [r5, #0]
 800b5f8:	f7f8 fcca 	bl	8003f90 <_isatty>
 800b5fc:	1c43      	adds	r3, r0, #1
 800b5fe:	d102      	bne.n	800b606 <_isatty_r+0x1a>
 800b600:	682b      	ldr	r3, [r5, #0]
 800b602:	b103      	cbz	r3, 800b606 <_isatty_r+0x1a>
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	bd38      	pop	{r3, r4, r5, pc}
 800b608:	2000062c 	.word	0x2000062c

0800b60c <_init>:
 800b60c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b60e:	bf00      	nop
 800b610:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b612:	bc08      	pop	{r3}
 800b614:	469e      	mov	lr, r3
 800b616:	4770      	bx	lr

0800b618 <_fini>:
 800b618:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b61a:	bf00      	nop
 800b61c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b61e:	bc08      	pop	{r3}
 800b620:	469e      	mov	lr, r3
 800b622:	4770      	bx	lr
